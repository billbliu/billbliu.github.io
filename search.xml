<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用hexo搭建github博客</title>
      <link href="/2021/03/11/hexo-blog/"/>
      <url>/2021/03/11/hexo-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo搭建github博客"><a href="#使用hexo搭建github博客" class="headerlink" title="使用hexo搭建github博客"></a>使用hexo搭建github博客</h1><h2 id="我的博客源代码地址"><a href="#我的博客源代码地址" class="headerlink" title="我的博客源代码地址"></a>我的博客源代码地址</h2><p>大家可以直接star&amp;fork我的博客源代码：<a href="https://github.com/billbliu/hexo-matery-modified，然后改改配置就可以写博客。" target="_blank" rel="noopener">https://github.com/billbliu/hexo-matery-modified，然后改改配置就可以写博客。</a></p><p>为了减小源码的体积，我将插件目录<code>node_modules</code>进行了压缩，大家下载完后需要解压。另外添加水印需要的字体文件我也删除了，大家可以直接从电脑自带的字体库中拷贝。</p><ul><li>首先运行<code>git clone git@github.com:billbliu/hexo-matery-modified.git</code>将所有文件下载到本地。</li><li>解压<code>node_modules.zip</code>，然后删除<code>node_modules.zip</code>和<code>.git</code>文件夹。</li><li>还缺一个字体（为图片添加水印需要用到），去<code>C:\Windows\Fonts</code>下找到<code>STSong Regular</code>，复制到<code>hexo-matery-modified</code>文件夹下。</li></ul><h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><p>如果你不想自己从头开始慢慢自定义主题的话，可以直接下载我的修改好的主题，然后稍微修改几个地方就好了。</p><ul><li>根目录配置文件<code>_config.yml</code>和主题目录配置文件<code>_config.yml</code>中修改个人信息。</li><li>根目录配置文件<code>_config.yml</code>中修改<code>deploy</code>一栏的<code>repo</code>。</li><li>主题配置文件中修改<code>gitalk</code>一栏，修改方法见正文。</li></ul><p><strong>当然前提是个性化设置章节之前的环境还是需要配置好！</strong></p><p>平时常用命令：</p><pre class="line-numbers language-txt"><code class="language-txt">hexo g  # 生成博客网页文件hexo s  # 本地预览博客hexo deploy  # 上传网页文件到github,上传之前删除.deploy_git里的内容python3 watermark.py all  # 给图片加水印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。</p><p>我是在<a href="https://godweiyang.com/" target="_blank" rel="noopener">godweiyang.com</a>提供的个性化博客之上做了自己的修改。</p><p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p><p><strong>目录结构</strong></p><ul><li>安装Node.js</li><li>添加国内镜像源</li><li>安装Git</li><li>注册Github账号</li><li>安装Hexo</li><li>连接Github与本地</li><li>写文章、发布文章</li><li>绑定域名</li><li>备份博客源文件</li><li>博客源代码下载</li><li>个性化设置（matery主题）</li><li>常见问题及解答（FAQ）</li><li>个性化设置（beantech主题，已停更）</li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">[下载地址]</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h2><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>打开<a href="https://github.com/，新建一个项目，如下所示：" target="_blank" rel="noopener">https://github.com/，新建一个项目，如下所示：</a></p><p><img src="/2021/03/11/hexo-blog/1.png" alt="image-20210315140339438"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。<strong>名称一定要和你的github名字完全一样，比如你github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code>。</strong></p><p><img src="/2021/03/11/hexo-blog/2.png" alt="image-20210315140455680"></p><p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="/2021/03/11/hexo-blog/3.png" alt="image-20210315140809801"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="/2021/03/11/hexo-blog/4.png" alt="image-20210315140828467"></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre><code>// 安装部署插件npm install hexo-deployer-git --save</code></pre><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\study\program\blog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦</a></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"bill"</span><span class="token function">git</span> config --global user.email <span class="token string">"132153131@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Bash</p><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"132153131@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Bash</p><p>打开<a href="http://github.com/" target="_blank" rel="noopener">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p><p>git bash中输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Bash</p><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="/2021/03/11/hexo-blog/6.jpg" alt="img"></p><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><pre class="line-numbers language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: git@github.com/billbliu/billbliu.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>repository修改为你自己的github项目地址。</p><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p><p>以我的百度云为例，如下图所示，添加两条解析记录：</p><p><img src="/2021/03/11/hexo-blog/7.jpg" alt="img"></p><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="/2021/03/11/hexo-blog/8.jpg" alt="img"></p><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\study\program\blog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p><p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</p><p>当然我新建了一个仓库存放了源文件，具体效果可以看我的博客源文件仓库：<a href="https://github.com/billbliu/hexo-matery-modified。大家也可以先用下文hexo安装方法安装完hexo，然后直接`git" target="_blank" rel="noopener">https://github.com/billbliu/hexo-matery-modified。大家也可以先用下文hexo安装方法安装完hexo，然后直接`git</a> clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:billbliu/hexo-matery-modified.git`克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。</p><h2 id="博客源代码下载"><a href="#博客源代码下载" class="headerlink" title="博客源代码下载"></a>博客源代码下载</h2><p>如果大家不想这么麻烦的装一堆东西，然后还要自己修改bug，那么只需要做好上面的准备工作，然后下载我的源代码，改改个人配置就行了。</p><p>源码地址：<a href="https://github.com/billbliu/hexo-matery-modified。大家可以直接下载下来使用，修改个人配置信息即可，当然环境要先搭好。" target="_blank" rel="noopener">https://github.com/billbliu/hexo-matery-modified。大家可以直接下载下来使用，修改个人配置信息即可，当然环境要先搭好。</a></p><h2 id="个性化设置（matery主题）"><a href="#个性化设置（matery主题）" class="headerlink" title="个性化设置（matery主题）"></a>个性化设置（matery主题）</h2><p>下面的个性化设置主要针对的是<code>matery</code>主题，如果你想用我现在博客这个主题，可以直接看这个章节。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。</p><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。</p><p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，然后可以安装下面步骤修改成自己想要的配置。</p><h2 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>top<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">false</span>password<span class="token operator">:</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>mathjax<span class="token operator">:</span> <span class="token boolean">true</span>summary<span class="token operator">:</span>tags<span class="token operator">:</span>categories<span class="token operator">:</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p><h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><p>原来的主题没有404页面，加一个也不是什么难事。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class="line-numbers language-json"><code class="language-json">---title<span class="token operator">:</span> <span class="token number">404</span>date<span class="token operator">:</span> <span class="token number">2019</span>-<span class="token number">07</span>-<span class="token number">19</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">10</span>type<span class="token operator">:</span> <span class="token string">"404"</span>layout<span class="token operator">:</span> <span class="token string">"404"</span>description<span class="token operator">:</span> <span class="token string">"你的页面走丢了!!!"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h2><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('myCV')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><h2 id="解决mathjax与代码高亮的冲突"><a href="#解决mathjax与代码高亮的冲突" class="headerlink" title="解决mathjax与代码高亮的冲突"></a>解决mathjax与代码高亮的冲突</h2><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了，改法如下：</p><p>打开<code>D:\study\program\blog\node_modules\marked\lib\marked.js</code><br><code>escape:</code>处替换成：</p><pre class="line-numbers language-json"><code class="language-json">escape<span class="token operator">:</span> /^\\(<span class="token punctuation">[</span>`*\<span class="token punctuation">[</span>\<span class="token punctuation">]</span>(<span class="token punctuation">)</span>#$+\-.!_><span class="token punctuation">]</span><span class="token punctuation">)</span>/<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>em:</code>处替换成：</p><pre class="line-numbers language-json"><code class="language-json">em<span class="token operator">:</span> /^\*((?<span class="token operator">:</span>\*\*|<span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token punctuation">)</span>+?<span class="token punctuation">)</span>\*(?!\*<span class="token punctuation">)</span>/<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p><h2 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h2><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sitetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改不蒜子初始化计数"><a href="#修改不蒜子初始化计数" class="headerlink" title="修改不蒜子初始化计数"></a>修改不蒜子初始化计数</h2><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 50ms周期检测函数</span>        <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化首次数据</span>        <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加上初始数据 </span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止检测</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把上面几行有段代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改为：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p><h2 id="添加动漫人物"><a href="#添加动漫人物" class="headerlink" title="添加动漫人物"></a>添加动漫人物</h2><p>其实三步就行了，不用像网上有些教程那么复杂。</p><p><strong>第一步：</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Bash</p><p><strong>第二步：</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Bash</p><p><strong>第三步：</strong><br>在根目录配置文件中添加如下代码：</p><pre class="line-numbers language-json"><code class="language-json">live2d<span class="token operator">:</span>  enable<span class="token operator">:</span> <span class="token boolean">true</span>  scriptFrom<span class="token operator">:</span> local  pluginRootPath<span class="token operator">:</span> live2dw/  pluginJsPath<span class="token operator">:</span> lib/  pluginModelPath<span class="token operator">:</span> assets/  tagMode<span class="token operator">:</span> <span class="token boolean">false</span>  log<span class="token operator">:</span> <span class="token boolean">false</span>  model<span class="token operator">:</span>    use<span class="token operator">:</span> live2d-widget-model-shizuku  display<span class="token operator">:</span>    position<span class="token operator">:</span> right    width<span class="token operator">:</span> <span class="token number">150</span>    height<span class="token operator">:</span> <span class="token number">300</span>  mobile<span class="token operator">:</span>    show<span class="token operator">:</span> <span class="token boolean">true</span>  react<span class="token operator">:</span>    opacity<span class="token operator">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，我发现<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。</p><h2 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h2><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。</p><p>首先在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@yourname'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p><h2 id="添加网易云音乐BGM"><a href="#添加网易云音乐BGM" class="headerlink" title="添加网易云音乐BGM"></a>添加网易云音乐BGM</h2><p>写文章的时候，想插入一段BGM怎么办？</p><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：</p><p><img src="/2021/03/11/hexo-blog/15.jpg" alt="img"></p><p>复制如下代码：</p><p><img src="/2021/03/11/hexo-blog/16.jpg" alt="img"></p><p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里粘贴刚刚复制的代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h2><p>主题已经自带了gitalk插件了，所以你只需要去github官网配置好就行了。</p><p>首先打开<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">github</a>申请一个应用，要填四个东西：</p><pre class="line-numbers language-txt"><code class="language-txt">Application name //应用名称，随便填Homepage URL //填自己的博客地址Application description //应用描述，随便填Authorization callback URL //填自己的博客地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击注册，会出现两个字符串<code>Client ID</code>和<code>Client Secret</code>，这个要复制出来。</p><p>然后去主题的配置文件<code>_config.yml</code>下修改<code>gitalk</code>那里：</p><pre class="line-numbers language-txt"><code class="language-txt">gitalk:  enable: true  owner: 你的github用户名  repo: 你的github用户名.github.io  oauth:    clientId: 粘贴刚刚注册完显示的字符串    clientSecret: 粘贴刚刚注册完显示的字符串  admin: 你的github用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后写文章的时候，只要在文章页面登陆过github，就会自动创建评论框，<strong>记得每次写完文章后打开博客文章页面一下</strong>。</p><h2 id="添加百度统计和谷歌统计代码"><a href="#添加百度统计和谷歌统计代码" class="headerlink" title="添加百度统计和谷歌统计代码"></a>添加百度统计和谷歌统计代码</h2><p>首先打开<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">百度站长平台</a>，然后点击添加网站，输入网址并选择领域。</p><p>接下来要验证网站所有权，有三种方式，推荐采用HTML标签验证，最简单，将代码复制出来。</p><p>打开<code>themes/matery/layout/_partial/head.ejs</code>，修改下面两行：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<code>content</code>内容改成你自己刚刚复制出来的就行了。</p><h2 id="修复代码块行号不显示bug"><a href="#修复代码块行号不显示bug" class="headerlink" title="修复代码块行号不显示bug"></a>修复代码块行号不显示bug</h2><p>修改<code>themes/matery/source/css/matery.css</code>第95行左右的<code>pre</code>和<code>code</code>两段改为如下代码：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">pre </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* padding: 1.5rem !important; */</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">3.3</span>rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>rem <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#272822</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">code </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata, Monaco, Consolas, <span class="token string">'Courier New'</span>, Courier, monospace<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* font-size: 0.91rem; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e96900</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f8f8f8</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在根目录的<code>_config.yml</code>中设置<code>prism_plugin.line_number</code>为<code>true</code>。</p><h2 id="优化文章url路径"><a href="#优化文章url路径" class="headerlink" title="优化文章url路径"></a>优化文章url路径</h2><p>有教程认为，将博客目录结构改为如下，就能减少层级，有利于搜索引擎的SEO。其实不然，网站内容的层级是按照从首页开始点击几次能到达你的文章来算的，所以你改不改都是两层就到达了，不在首页的也可以通过<code>index-archives-post</code>到达，跟文章url长度没有任何关系，所以如下操作作废，你想改也行，不改也行。但是建议已经建站一段时间的同学千万别改，不然会产生很多死链，并且评论issue全部会清空，很麻烦。</p><p><del>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：<code>sitename/year/mounth/day/title</code>四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成<code>sitename/title</code>的形式，并且title最好是用英文，在根目录的<code>_config.yml</code>文件下修改permalink如下：</del></p><pre class="line-numbers language-text"><code class="language-text"># permalink: :year/:month/:day/:title/permalink: :title/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="添加雪花特效"><a href="#添加雪花特效" class="headerlink" title="添加雪花特效"></a>添加雪花特效</h2><p>首先在<code>themes/matery/source/libs/others</code>下新建文件<code>snow.js</code>，并插入如下代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*样式一*/</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>snow <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> $flake <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="snowbox" />'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span><span class="token string">'z-index'</span><span class="token punctuation">:</span><span class="token string">'9999'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token string">'-50px'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&amp;#10052;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    documentHeight  <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    documentWidth   <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    defaults <span class="token operator">=</span> <span class="token punctuation">{</span>        minSize     <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        maxSize     <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        newOn       <span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>        flakeColor  <span class="token punctuation">:</span> <span class="token string">"#AFDAEF"</span> <span class="token comment" spellcheck="true">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> interval<span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> startPositionLeft <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> documentWidth <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>    startOpacity <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sizeFlake <span class="token operator">=</span> options<span class="token punctuation">.</span>minSize <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span>    endPositionTop <span class="token operator">=</span> documentHeight <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span>    endPositionLeft <span class="token operator">=</span> startPositionLeft <span class="token operator">-</span> <span class="token number">500</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">,</span>    durationFall <span class="token operator">=</span> documentHeight <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5000</span><span class="token punctuation">;</span>    $flake<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        left<span class="token punctuation">:</span> startPositionLeft<span class="token punctuation">,</span>        opacity<span class="token punctuation">:</span> startOpacity<span class="token punctuation">,</span>        <span class="token string">'font-size'</span><span class="token punctuation">:</span> sizeFlake<span class="token punctuation">,</span>        color<span class="token punctuation">:</span> options<span class="token punctuation">.</span>flakeColor    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        top<span class="token punctuation">:</span> endPositionTop<span class="token punctuation">,</span>        left<span class="token punctuation">:</span> endPositionLeft<span class="token punctuation">,</span>        opacity<span class="token punctuation">:</span> <span class="token number">0.2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>durationFall<span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>newOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">snow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         minSize<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* 定义雪花最小尺寸 */</span>        maxSize<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/* 定义雪花最大尺寸 */</span>        newOn<span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token comment" spellcheck="true">/* 定义密集程度，数字越小越密集 */</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*样式二*/</span><span class="token comment" spellcheck="true">/* 控制下雪 */</span><span class="token keyword">function</span> <span class="token function">snowFall</span><span class="token punctuation">(</span>snow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 可配置属性 */</span>    snow <span class="token operator">=</span> snow <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxFlake <span class="token operator">=</span> snow<span class="token punctuation">.</span>maxFlake <span class="token operator">||</span> <span class="token number">200</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 最多片数 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flakeSize <span class="token operator">=</span> snow<span class="token punctuation">.</span>flakeSize <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 雪花形状 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed <span class="token operator">=</span> snow<span class="token punctuation">.</span>fallSpeed <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 坠落速度 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 兼容写法 */</span>requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>cancelAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>mozCancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>msCancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>oCancelAnimationFrame<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 开始下雪 */</span>snowFall<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 创建画布 */</span>    snowCanvas<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 创建雪花形状 */</span>    createFlakes<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 画雪 */</span>    drawSnow<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 创建画布 */</span><span class="token keyword">function</span> <span class="token function">snowCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 添加Dom结点 */</span>    <span class="token keyword">var</span> snowcanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"snowfall"</span><span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>snowcanvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>canvas <span class="token operator">=</span> snowcanvas<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> snowcanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 窗口大小改变的处理 */</span>    window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        snowcanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* snowcanvas.height = window.innerHeight */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 雪运动对象 */</span><span class="token keyword">function</span> <span class="token function">flakeMove</span><span class="token punctuation">(</span>canvasWidth<span class="token punctuation">,</span> canvasHeight<span class="token punctuation">,</span> flakeSize<span class="token punctuation">,</span> fallSpeed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> canvasWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* x坐标 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> canvasHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* y坐标 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> flakeSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 形状 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> flakeSize<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">/* 最大形状 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> fallSpeed<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 坠落速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed <span class="token operator">=</span> fallSpeed<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/* 坠落速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">/* Y方向速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">/* X方向速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stepSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* 步长 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token number">0</span>                                       <span class="token comment" spellcheck="true">/* 步数 */</span><span class="token punctuation">}</span>flakeMove<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>        y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左右摆动(余弦) */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>step <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">05</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stepSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 飞出边界的处理 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">>=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">>=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 飞出边界-放置最顶端继续坠落 */</span>flakeMove<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reset <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span>flakeMove<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> snowFlake <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    snowFlake<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0.9)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 此处是雪花颜色，默认是白色 */</span>    snowFlake<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0.5)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 若要改为其他颜色，请自行查 */</span>    snowFlake<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 找16进制的RGB 颜色代码。 */</span>    ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> snowFlake<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 创建雪花-定义形状 */</span><span class="token keyword">function</span> <span class="token function">createFlakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> maxFlake <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxFlake<span class="token punctuation">,</span>        flakes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flakes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        canvas <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxFlake<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flakes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">flakeMove</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flakeSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 画雪 */</span><span class="token keyword">function</span> <span class="token function">drawSnow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> maxFlake <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxFlake<span class="token punctuation">,</span>        flakes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flakes<span class="token punctuation">;</span>    ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> canvas <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">,</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清空雪花 */</span>    ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> e <span class="token operator">&lt;</span> maxFlake<span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flakes<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flakes<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*  一帧一帧的画 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        drawSnow<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 调用及控制方法 */</span><span class="token keyword">var</span> snow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">snowFall</span><span class="token punctuation">(</span><span class="token punctuation">{</span>maxFlake<span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>snow<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主题配置文件里<code>libs.js</code>里添加一行<code>snow: /libs/others/snow.js</code>。</p><p>在<code>themes/matery/layout/layout.ejs</code>里添加如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 雪花特效 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.snow.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>&lt;script type="text/javascript" src="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">theme.libs.js.snow</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token script language-javascript">"<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后在主题配置文件最后添加：</p><pre class="line-numbers language-txt"><code class="language-txt"># 雪花特效snow:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这个特效和动漫一样，有点花里胡哨，并且可能会造成卡顿，所以我并没有开启，还是给大家一个最干净的阅读体验吧。</p></blockquote><h2 id="动态标签栏"><a href="#动态标签栏" class="headerlink" title="动态标签栏"></a>动态标签栏</h2><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Σ(っ °Д °;)っ喔哟，崩溃啦！"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"φ(゜▽゜*)♪咦，又好了！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="常见问题及解答（FAQ）"><a href="#常见问题及解答（FAQ）" class="headerlink" title="常见问题及解答（FAQ）"></a>常见问题及解答（FAQ）</h2><h3 id="为什么代码块显示有问题？"><a href="#为什么代码块显示有问题？" class="headerlink" title="为什么代码块显示有问题？"></a>为什么代码块显示有问题？</h3><p>代码要显示正确，要注意以下几个点：</p><ul><li><p>根目录<code>_config.yml</code>文件下的<code>highlight</code>中的<code>line_number</code>要设置为<code>false</code>，因为行号有bug，当然如果你按照上面教程修复了bug，就可以改成<code>true</code>。</p></li><li><p>不要按照网上教程安装<code>kramed</code>插件，已经装了的卸载掉。</p></li><li><p>修改</p><pre><code>node_modules/marked/lib/marked.js</code></pre><p>文件中的</p><pre><code>escape</code></pre><p>和</p><pre><code>em</code></pre><p>两行（在538行左右），改成下面：</p><pre class="line-numbers language-json"><code class="language-json">escape<span class="token operator">:</span> /^\\(<span class="token punctuation">[</span>`*\<span class="token punctuation">[</span>\<span class="token punctuation">]</span>(<span class="token punctuation">)</span>#$+\-.!_><span class="token punctuation">]</span><span class="token punctuation">)</span>/<span class="token punctuation">,</span>em<span class="token operator">:</span> /^\*((?<span class="token operator">:</span>\*\*|<span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token punctuation">)</span>+?<span class="token punctuation">)</span>\*(?!\*<span class="token punctuation">)</span>/<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="为什么博客本地预览没问题，push到github上就显示不正常？"><a href="#为什么博客本地预览没问题，push到github上就显示不正常？" class="headerlink" title="为什么博客本地预览没问题，push到github上就显示不正常？"></a>为什么博客本地预览没问题，push到github上就显示不正常？</h3><p>这个问题可能原因有很多，我暂时列举遇到的情况：</p><ul><li>github博客的仓库名称一定要和你的github名字完全一样，比如你github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code>。这是大多数人会犯的错误，会导致显示不正常。</li></ul><h3 id="hexo-图片显示问题及使用typora设置图片路径"><a href="#hexo-图片显示问题及使用typora设置图片路径" class="headerlink" title="hexo 图片显示问题及使用typora设置图片路径"></a>hexo 图片显示问题及使用typora设置图片路径</h3><pre><code>设置post_asset_folder  为 true, 安装插件 asset-imagenpm install https://github.com/CodeFalling/hexo-asset-image设置图片为相对路径hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s 运行查看</code></pre><p>配置<code>typora</code>进行本地图片的粘贴及正常显示</p><p>设置<code>typora</code>,图像</p><p><img src="/2021/03/11/hexo-blog/20.png" alt="image-20210315144702743"></p><p>​    以后直接粘贴图片就可以自动保存到 hexo 配置的 post_asset_folder 文件夹里,自动渲染了</p><p><strong>注意修改图片路径中的 \ 为 / ,并且不带 <code>.</code>或者<code>./</code> 直接写<code>目录/图片</code></strong></p><p><strong>此种方式如有文件夹中存在中文则会<code>url</code>转码,也会显示不正常,解决方法: <code>new</code>文件时使用英文名,手动设置文章标题即可</strong></p><h3 id="博客目录构成介绍"><a href="#博客目录构成介绍" class="headerlink" title="博客目录构成介绍"></a>博客目录构成介绍</h3><pre class="line-numbers language-md"><code class="language-md">- node_modules- public- scaffolds- source    - _posts    - about    - archive    - img    - tags- themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><p>网站图片都保存在<code>D:\study\program\blog\source\img</code>目录下，可以修改成自己的图片。</p><h3 id="添加畅言评论插件"><a href="#添加畅言评论插件" class="headerlink" title="添加畅言评论插件"></a>添加畅言评论插件</h3><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p><p>首先你得注册一个畅言账号，<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">地址</a>。<br>然后打开如下页面，复制该段代码：</p><p><img src="/2021/03/11/hexo-blog/11.jpg" alt="img"></p><p>打开<code>D:\study\program\blog\themes\beantech\layout\post.ejs</code>，将代码粘贴到如下位置：</p><p><img src="/2021/03/11/hexo-blog/12.jpg" alt="img"></p><p>然后重新生成一下网页，可以看到效果图如下：</p><p><img src="/2021/03/11/hexo-blog/13.jpg" alt="img"></p><p>更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。</p><h3 id="添加图片放大功能"><a href="#添加图片放大功能" class="headerlink" title="添加图片放大功能"></a>添加图片放大功能</h3><p>首先下载<code>zooming.js</code>文件<a href="https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js" target="_blank" rel="noopener">地址</a>，保存在<code>D:\study\program\blog\themes\beantech\source\js</code>目录下。</p><p>打开<code>D:\study\program\blog\themes\beantech\layout\post.ejs</code>，在最下方粘贴如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/zooming.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后文章里的图片就可以单击全屏啦。</p><h3 id="添加数学公式显示"><a href="#添加数学公式显示" class="headerlink" title="添加数学公式显示"></a>添加数学公式显示</h3><p>打开<code>D:\study\program\blog\themes\beantech\layout\post.ejs</code>，在最下方粘贴如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config<span class="token punctuation">=</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。</p><p>打开<code>D:\study\program\blog\node_modules\marked\lib\marked.js</code><br><code>escape:</code>处替换成：</p><pre class="line-numbers language-json"><code class="language-json">escape<span class="token operator">:</span> /^$<span class="token punctuation">[</span>`*\<span class="token punctuation">[</span>\<span class="token punctuation">]</span>(<span class="token punctuation">)</span>#$+\-.!_><span class="token punctuation">]</span><span class="token punctuation">)</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>em:</code>处替换成：</p><pre class="line-numbers language-json"><code class="language-json">em<span class="token operator">:</span> /^\*((?<span class="token operator">:</span>\*\*|<span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token punctuation">)</span>+?<span class="token punctuation">)</span>\*(?!\*<span class="token punctuation">)</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p><p>举个例子:<br>行内公式：y=f(x)y=f(x)<br>代码：</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token equation string">$y = f(x)$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>行间公式：</p><p>y=fg1(x)y=fg1(x)</p><p>代码：</p><pre class="line-numbers language-latex"><code class="language-latex">\<span class="token equation string">\[y = {f_{ {g_1}}}(x)<span class="token equation-command regex">\\</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意上面花括号之间有空格！</strong></p><h3 id="添加留言板"><a href="#添加留言板" class="headerlink" title="添加留言板"></a>添加留言板</h3><p>在<code>D:\study\program\blog\themes\beantech\layout</code>中新建<code>bbs.ejs</code>，文件内容如下：</p><pre class="line-numbers language-html"><code class="language-html">---layout: page---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">header<span class="token class">.intro-header</span></span><span class="token punctuation">{</span>        <span class="token property">background-position</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>     <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Chinese Version --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh post-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>D:\study\program\blog\source</code>中新建<code>\bbs</code>文件夹，里面在新建<code>index.md</code>文件，内容如下：</p><pre class="line-numbers language-json"><code class="language-json">---layout<span class="token operator">:</span> <span class="token string">"bbs"</span>title<span class="token operator">:</span> <span class="token string">"BBS"</span>date<span class="token operator">:</span> <span class="token number">2017</span>-<span class="token number">09</span>-<span class="token number">19</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">33</span>description<span class="token operator">:</span> <span class="token string">"欢迎交换友链，一起交流学习！"</span>header-img<span class="token operator">:</span> <span class="token string">"img/header_img/home-bg-2-dark.png"</span>comments<span class="token operator">:</span> <span class="token boolean">true</span>---此处替换为你的畅言评论代码~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加置顶功能"><a href="#添加置顶功能" class="headerlink" title="添加置顶功能"></a>添加置顶功能</h3><p>运行如下两条命令安装置顶插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-generator-index --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后打开<code>D:\study\program\blog\themes\beantech\layout\index.ejs</code>，在如下位置添加代码：</p><p><img src="/2021/03/11/hexo-blog/14.jpg" alt="img"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(post.top)</span> <span class="token attr-name">{%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-thumb-tack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7D26CD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%}%</span><span class="token punctuation">></span></span>&lt; code>&lt; %}%>&lt;>&lt; code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>%}%</span><span class="token punctuation">></span></span>&lt;><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在你想置顶的文章md文件里，添加如下配置选项：</p><pre class="line-numbers language-json"><code class="language-json">top<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加访客人数统计和字数统计"><a href="#添加访客人数统计和字数统计" class="headerlink" title="添加访客人数统计和字数统计"></a>添加访客人数统计和字数统计</h3><p>我们使用一个国外的流量统计网站：<a href="https://godweiyang.com/2018/04/13/hexo-blog/gostats.com" target="_blank" rel="noopener">gostats.com</a>，首先注册一下。</p><p>然后自己添加网站地址，过程就不详细说了，然后点击<code>Get counter code</code>，选择一个自己喜欢的风格。<br>如下图所示，选择一个样式，选择<code>HTML</code>，生成代码：</p><p><img src="/2021/03/11/hexo-blog/17.jpg" alt="img"></p><p>复制这段代码到<code>D:\study\program\blog\themes\beantech\layout\_partial\footer.ejs</code>，具体位置如下：</p><p><img src="/2021/03/11/hexo-blog/18.jpg" alt="img"></p><p>默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。</p><p>字数统计首先安装插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>D:\study\program\blog\themes\beantech\layout\_partial\footer.ejs</code>，添加如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= totalcount(site) %> words altogether<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体位置见上图。</p><h3 id="文章属性配置"><a href="#文章属性配置" class="headerlink" title="文章属性配置"></a>文章属性配置</h3><p>首先解释一下文章开头的属性配置，如下图所示：</p><p><img src="/2021/03/11/hexo-blog/19.jpg" alt="img"></p><pre class="line-numbers language-json"><code class="language-json">title<span class="token operator">:</span> 文章标题catalog<span class="token operator">:</span> 是否显示段落目录date<span class="token operator">:</span> 文章日期subtitle<span class="token operator">:</span> 子标题header-img<span class="token operator">:</span> 顶部背景图片top<span class="token operator">:</span> 是否置顶tags<span class="token operator">:</span> 标签categories<span class="token operator">:</span> 分类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次写文章修改每个值就行了。</p><p>这里可以写 tags标签，以及categories 分类</p><p>那么 多个标签应该怎么写呢？</p><pre><code>tags: [标签1,标签2]</code></pre><h3 id="部署到github失败"><a href="#部署到github失败" class="headerlink" title="部署到github失败"></a>部署到github失败</h3><pre><code>TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Objectat copyFile (fs.js:1890:10)at tryCatcher (D:\wwwroot\loft\node_modules\bluebird\js\release\util.js:16:23)at ret (eval at makeNodePromisifiedEval (C:\Users\ClueeZhuo\AppData\Roaming\npm\node_modules\hexo-cli\node_modules\bluebird\js\release\promisify.js:184:12), :13:39) at D:\wwwroot\loft\node_modules\hexo-fs\lib\fs.js:144:39at tryCatcher (D:\wwwroot\loft\node_modules\bluebird\js\release\util.js:16:23)at Promise._settlePromiseFromHandler (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:547:31)at Promise._settlePromise (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:604:18)at Promise._settlePromise0 (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:649:10)at Promise._settlePromises (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:729:18)at Promise._fulfill (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:673:18)at Promise._resolveCallback (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:466:57)at Promise._settlePromiseFromHandler (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:559:17)at Promise._settlePromise (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:604:18)at Promise._settlePromise0 (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:649:10)at Promise._settlePromises (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:729:18)at Promise._fulfill (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:673:18)at Promise._resolveCallback (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:466:57)at Promise._settlePromiseFromHandler (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:559:17)at Promise._settlePromise (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:604:18)at Promise._settlePromise0 (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:649:10)at Promise._settlePromises (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:729:18)at Promise._fulfill (D:\wwwroot\loft\node_modules\bluebird\js\release\promise.js:673:18)</code></pre><p>原因：nodejs安装版本过高</p><ul><li><a href="https://github.com/hexojs/hexo/issues/4263" target="_blank" rel="noopener">解决方法</a></li><li><a href="https://nodejs.org/dist/v13.10.0/" target="_blank" rel="noopener">nodejs版本下载</a></li></ul><h3 id="github博客的一些模块"><a href="#github博客的一些模块" class="headerlink" title="github博客的一些模块"></a>github博客的一些模块</h3><ul><li><a href="http://jekyllthemes.org/" target="_blank" rel="noopener">http://jekyllthemes.org/</a></li><li><a href="https://github.com/sharu725/online-cv" target="_blank" rel="noopener">https://github.com/sharu725/online-cv</a></li><li><a href="https://jekyllthemes.io/jekyll-blog-themes" target="_blank" rel="noopener">https://jekyllthemes.io/jekyll-blog-themes</a></li><li><a href="https://github.com/mmistakes/minimal-mistakes" target="_blank" rel="noopener">https://github.com/mmistakes/minimal-mistakes</a></li></ul><p>参考文档</p><ul><li><a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">godweiyang博客文档</a></li><li><a href="https://hexo.io/zh-cn/docs/github-pages.html" target="_blank" rel="noopener">hexo部署到github</a></li><li><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo部署插件</a></li><li><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo常用命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux关闭防火墙命令</title>
      <link href="/2021/03/11/linux-cmd-stop-fillware/"/>
      <url>/2021/03/11/linux-cmd-stop-fillware/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux关闭防火墙命令"><a href="#Linux关闭防火墙命令" class="headerlink" title="Linux关闭防火墙命令"></a>Linux关闭防火墙命令</h1><p>问题:老是关闭防火墙太麻烦，所以选择彻底关闭防火墙，发现每次都记不住命令!</p><h2 id="查看防火状态"><a href="#查看防火状态" class="headerlink" title="查看防火状态"></a>查看防火状态</h2><pre class="line-numbers language-shell"><code class="language-shell">systemctl status firewalldservice  iptables status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="暂时关闭防火墙"><a href="#暂时关闭防火墙" class="headerlink" title="暂时关闭防火墙"></a>暂时关闭防火墙</h2><pre class="line-numbers language-shell"><code class="language-shell">systemctl stop firewalldservice  iptables stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="永久关闭防火墙"><a href="#永久关闭防火墙" class="headerlink" title="永久关闭防火墙"></a>永久关闭防火墙</h2><pre class="line-numbers language-shell"><code class="language-shell">systemctl disable firewalldchkconfig iptables off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h2><pre class="line-numbers language-shell"><code class="language-shell">systemctl enable firewalldservice iptables restart <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04 mysql安装配置</title>
      <link href="/2021/03/11/mysql-install-ubuntu18.04/"/>
      <url>/2021/03/11/mysql-install-ubuntu18.04/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><pre class="line-numbers language-shell"><code class="language-shell"># 查看有没有安装MySQL,没有安装继续执行以下命令dpkg -l | grep mysql#更新软件源sudo apt-get update #安装mysqlsudo apt-get install mysql-server  # 启动和关闭mysql服务器：service mysql startservice mysql stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、检查相关配置"><a href="#2、检查相关配置" class="headerlink" title="2、检查相关配置"></a>2、检查相关配置</h2><pre class="line-numbers language-shell"><code class="language-shell"># 安装完成之后可以使用如下命令来检查是否安装成功：sudo netstat -tap | grep mysql# 登录mysql数据库可以通过如下命令# -u 表示选择登陆的用户名， -p 表示登陆的用户密码，现在是mysql数据库是没有密码的，Enter password:处直接回车，就能够进入mysql数据库。mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 解决利用sqoop导入MySQL中文乱码的问题（可以插入中文，但不能用sqoop导入中文）导致导入时中文乱码的原因是character_set_server默认设置是latin1 可以单个设置修改编码方式set character_set_server=utf8;但是重启会失效，建议按以下方式修改编码方式。mysql -u root -p# 并查看MySQL目前设置的编码mysql> show variables like "char%";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/11/mysql-install-ubuntu18.04/1.png" alt="img"></p><pre class="line-numbers language-shell"><code class="language-shell"># 在[mysqld]下添加一行character_set_server=utf8。如下图sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf# 重启MySQL服务service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/11/mysql-install-ubuntu18.04/2.png" alt="img"></p><pre class="line-numbers language-shell"><code class="language-shell"># 登录mysql -u root -p# 并查看MySQL目前设置的编码# 完成编码方式的修改后，即解决了sqoop导入MySQL中文乱码的问题。至此，ubuntu系统上顺利完成安装mysql数据库。mysql> show variables like "char%";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/11/mysql-install-ubuntu18.04/3.png" alt="img"></p><pre class="line-numbers language-shell"><code class="language-shell"># 检查mysql服务状态：systemctl status mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/11/mysql-install-ubuntu18.04/4.png" alt="img"></p><pre class="line-numbers language-shell"><code class="language-shell"># 处输入刚设置的密码，回车，就能够进入mysql数据库。mysql -u root -p命令，Enter password:mysql> use mysql; # 命令打开mysql命名的数据库，显示当前数据库的表：mysql> show tables; #查询user表里的数据：mysql> select * from user;（user表里是mysql数据库的所有账户信息）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/11/mysql-install-ubuntu18.04/5.png" alt="img"></p><h2 id="3、配置外网"><a href="#3、配置外网" class="headerlink" title="3、配置外网"></a>3、配置外网</h2><pre class="line-numbers language-shell"><code class="language-shell"># 现在配置mysql允许远程访问，首先编辑 /etc/mysql/mysql.conf.d/mysqld.cnf 配置文件：vim /etc/mysql/mysql.conf.d/mysqld.cnf# 注释掉bind-address          = 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/11/mysql-install-ubuntu18.04/6.png" alt="img"></p><pre class="line-numbers language-shell"><code class="language-shell">mysql -u root -p# 配置外网访问mysql> grant all on *.* to root@'%' identified by 'ars123456' with grant option;# 配置内网访问mysql> grant all on *.* to root@'127.0.0.1' identified by 'ars123456' with grant option;mysql> grant all on *.* to root@'localhost' identified by 'ars123456' with grant option;# 刷新权限mysql> flush privileges;    mysql> exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署文档 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04 redis安装配置</title>
      <link href="/2021/03/11/redis-install-ubuntu18.04/"/>
      <url>/2021/03/11/redis-install-ubuntu18.04/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h1><p>Redis是一款内存键值存储，以其灵活性，性能和广泛的语言支持而闻名。本教程将演示如何在Ubuntu 18.04服务器上安装和配置Redis。主要内容包括：</p><ol><li>安装 Redis</li><li>Redis 配置</li><li>Redis 控制</li></ol><h2 id="一、安装-Redis"><a href="#一、安装-Redis" class="headerlink" title="一、安装 Redis"></a>一、安装 Redis</h2><p>使用 apt 从官方 Ubuntu 存储库来安装 Redis：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt update$ sudo apt install redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、Redis-配置"><a href="#二、Redis-配置" class="headerlink" title="二、Redis 配置"></a>二、Redis 配置</h2><p>打开 Redis的配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo vi /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件中，找到supervised指令。 该指令允许您声明一个init系统来管理Redis作为服务，从而为您提供对其操作的更多控制。 受supervised指令默认设置为no 。 由于您正在运行使用systemd init系统的Ubuntu，请将其更改为systemd ：</p><pre class="line-numbers language-shell"><code class="language-shell"># If you run Redis from upstart or systemd, Redis can interact with your# supervision tree. Options:#   supervised no      - no supervision interaction#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET#   supervised auto    - detect upstart or systemd method based on#                        UPSTART_JOB or NOTIFY_SOCKET environment variables# Note: these supervision methods only signal "process is ready."#       They do not enable continuous liveness pings back to your supervisor.supervised systemd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新加载Redis服务文件以反映您对配置文件所做的更改：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo service redis restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 Redis 的运行状态：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo systemctl status redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出如下结果表示运行成功：</p><pre class="line-numbers language-shell"><code class="language-shell">Active:active (running)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在已经成功安装和配置了Redis并且已经开始运行。</p><h2 id="三、Redis-控制"><a href="#三、Redis-控制" class="headerlink" title="三、Redis 控制"></a>三、Redis 控制</h2><h3 id="redis-服务控制"><a href="#redis-服务控制" class="headerlink" title="redis 服务控制"></a>redis 服务控制</h3><p>启动 redis 服务：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo service redis start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭 redis 服务：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo service redis stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 redis 服务：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo service redis restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="redis-客户端连接"><a href="#redis-客户端连接" class="headerlink" title="redis 客户端连接"></a>redis 客户端连接</h3><p>在命令行中输入如下命令来登陆进 redis 客户端</p><pre class="line-numbers language-shell"><code class="language-shell">$ redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="redis-远程连接"><a href="#redis-远程连接" class="headerlink" title="redis 远程连接"></a>redis 远程连接</h3><p>打开配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo vi /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 bind 127.0.0.1 ::1 改为 bind 0.0.0.0</p><p>之后重新启动 redis</p><h2 id="四、Redis-设置密码"><a href="#四、Redis-设置密码" class="headerlink" title="四、Redis 设置密码"></a>四、Redis 设置密码</h2><p>打开 Redis 的配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo vi /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到下面这一行</p><pre class="line-numbers language-shell"><code class="language-shell"># requirepass foobared <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将注释符号去掉，将后面修改成自己的密码，如:</p><pre class="line-numbers language-shell"><code class="language-shell">requirepass 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署文档 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据表结构导出md表格工具：mysql_markdown</title>
      <link href="/2020/04/11/databases-tools-01/"/>
      <url>/2020/04/11/databases-tools-01/</url>
      
        <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>将数据库的表结构导出未markdown表格，这样我只用维护数据库的备注，然后每次更新文档的时候从数据库里导出表格：</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li>github：<a href="https://github.com/billbliu/mysql_markdown" target="_blank" rel="noopener">https://github.com/billbliu/mysql_markdown</a></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre><code>root@ceph03:/home/bill# ./mysql_markdown_unix -hflag needs an argument: -hUsage: mysql_markdown [options...]--help  This help text-h      host.     default 127.0.0.1-u      username. default root-p      password. default root-d      database. default mysql-P      port.     default 3306-c      charset.  default utf8-o      output.   default current location-t      tables.   default all table and support &#39;,&#39; separator for filter, every item can use regexp// 导出tidb数据库里的tpcc数据库表结构// tidb：192.168.1.93:4000  数据库名：tpcc  用户：root  密码：空// 导出结果：tpcc_20210414_172002.mdroot@ceph03:/home/bill# ./mysql_markdown_unix -h 192.168.1.93 -u root -p &quot;&quot; -P 4000 -d tpcc1/9 the warehouse table is making ...2/9 the customer table is making ...3/9 the history table is making ...4/9 the new_order table is making ...5/9 the orders table is making ...6/9 the order_line table is making ...7/9 the stock table is making ...8/9 the item table is making ...9/9 the district table is making ...mysql_markdown finished ...  root@ceph03:/home/bill# lltotal 4.4Mdrwxr-xr-x 2 root root 4.0K Apr 14 17:20 ./drwxr-xr-x 6 root root 4.0K Apr 13 10:27 ../-rwxr-xr-x 1 root root 4.3M Apr 14 17:12 mysql_markdown_unix*-rw-r--r-- 1 root root 1.2K Apr 13 10:24 topo.yaml-rwxr-xr-x 1 root root 5.8K Apr 14 17:20 tpcc_20210414_172002.md*</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 34 丢失的数字(find-first-and-last-position-of-element-in-sorted-array)</title>
      <link href="/2020/03/25/leetcode-0034-find-first-and-last-position-of-element-in-sorted-array/"/>
      <url>/2020/03/25/leetcode-0034-find-first-and-last-position-of-element-in-sorted-array/</url>
      
        <content type="html"><![CDATA[<h2 id="0034-find-first-and-last-position-of-element-in-sorted-array"><a href="#0034-find-first-and-last-position-of-element-in-sorted-array" class="headerlink" title="0034 find-first-and-last-position-of-element-in-sorted-array"></a><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">0034 find-first-and-last-position-of-element-in-sorted-array</a></h2><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Follow up:</strong> Could you write an algorithm with <code>O(log n)</code> runtime complexity?</p><p><strong>Example 1:</strong></p><pre><code>Input: nums = [5,7,7,8,8,10], target = 8Output: [3,4]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: nums = [5,7,7,8,8,10], target = 6Output: [-1,-1]</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: nums = [], target = 0Output: [-1,-1]</code></pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>nums</code> is a non-decreasing array.</li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。你的算法时间复杂度必须是 O(log n) 级别。如果数组中不存在目标值，返回 [-1, -1]。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h2><p>给出一个有序数组<code>nums</code>和一个数<code>target</code>，要求在数组中找到第一个和这个元素相等的元素下标，最后一个和这个元素相等的元素下标。</p><p>这一题是经典的二分搜索变种题。二分搜索有4大基础变种题：</p><ol><li>查找第一个值等于给定值的元素</li><li>查找最后一个值等于给定值的元素</li><li>查找第一个大于等于给定值的元素</li><li>查找最后一个大于等于给定值的元素</li></ol><p>这一题的解题思路可以分别利用变种 1 和变种 2 的解法就可以做出此题。(4 大基础变种的实现见代码)</p><p><strong>1.查找第一个值等于给定值的元素</strong></p><p>首先让我们找到范围的左边界。我们将范围初始化为[left = 0，right = n-1]。在每个步骤中，计算中间元素[mid =（i + j）/ 2]。现在根据目标nums[mid]的相对值，存在三种可能性：</p><ol><li>如果nums[mid] &lt; target，right = mid-1进入下一次迭代</li><li>如果nums[mid]&gt; target，left = mid+1进入下一次迭代</li><li>如果nums[mid] = target，又有两种情况<ol><li>mid == 0 或者中值的前一个元素nums[mid-1] != target，则mid就是我们要找的第一个值</li><li>否则mid还不是我们要找的第一个值，前面还有相等的值，则right = mid-1进入下一次迭代</li></ol></li></ol><p><strong>2.查找最后一个值等于给定值的元素</strong></p><p>首先让我们找到范围的右边界。我们将范围初始化为[left = 0，right = n-1]。在每个步骤中，计算中间元素[mid =（i + j）/ 2 +1]（这里+1使得中值偏向右边）。现在根据目标nums[mid]的相对值，存在三种可能性：</p><ol><li>如果nums[mid] &lt; target，right = mid-1进入下一次迭代</li><li>如果nums[mid]&gt; target，left = mid+1进入下一次迭代</li><li>如果nums[mid] = target，又有两种情况<ol><li>mid == len(nums) - 1 或者中值的前一个元素nums[mid+1] != target，则mid就是我们要找的最后一个值</li><li>否则mid还不是我们要找的最后一个值，后面还有相等的值，则left = mid+1进入下一次迭代</li></ol></li></ol><p><strong>3.查找第一个大于等于给定值的元素</strong></p><p>首先让我们找到范围的左边界。我们将范围初始化为[left = 0，right = n-1]。在每个步骤中，计算中间元素[mid =（i + j）/ 2]。现在根据目标nums[mid]的相对值，存在三种可能性：</p><ol><li>如果nums[mid] &lt; target，left = mid+1进入下一次迭代</li><li>如果nums[mid] &gt;= target，又有两种情况<ol><li>mid == 0 或者中值的前一个元素nums[mid-1] &lt; target，则mid就是我们要找的第一个值</li><li>否则mid还不是我们要找的第一个值，前面还有相等的值，则right = mid-1进入下一次迭代</li></ol></li></ol><p><strong>4.查找最后一个大于等于给定值的元素</strong></p><p>首先让我们找到范围的右边界。我们将范围初始化为[left = 0，right = n-1]。在每个步骤中，计算中间元素[mid =（i + j）/ 2 +1]（这里+1使得中值偏向右边）。现在根据目标nums[mid]的相对值，存在三种可能性：</p><ol><li>如果nums[mid] &gt; target，right = mid-1进入下一次迭代</li><li>如果nums[mid] &lt;= target，又有两种情况<ol><li>mid == len(nums) - 1 或者中值的前一个元素nums[mid+1] &gt; target，则mid就是我们要找的最后一个值</li><li>否则mid还不是我们要找的最后一个值，后面还有大于相等的值，则left = mid+1进入下一次迭代</li></ol></li></ol><p><a href="https://github.com/billbliu/leetcode/blob/main/leetcode-go/array/0034.find-first-and-last-position-of-element-in-sorted-array_test.go" target="_blank" rel="noopener">Go</a></p><p><a href="https://github.com/billbliu/leetcode/blob/main/leetcode-go/array/0034.find-first-and-last-position-of-element-in-sorted-array_test.go" target="_blank" rel="noopener">Rust</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 268 丢失的数字(missing number)</title>
      <link href="/2020/03/25/leetcode-0268-missing-number/"/>
      <url>/2020/03/25/leetcode-0268-missing-number/</url>
      
        <content type="html"><![CDATA[<h2 id="0268-missing-number"><a href="#0268-missing-number" class="headerlink" title="0268 missing number"></a><a href="https://leetcode.com/problems/missing-number/" target="_blank" rel="noopener">0268 missing number</a></h2><p>Given an array containing n distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.</p><p><strong>Example 1</strong>:</p><pre><code>Input: [3,0,1]Output: 2</code></pre><p><strong>Example 2</strong>:</p><pre><code>Input: [9,6,4,2,3,5,7,0,1]Output: 8</code></pre><p><strong>Note</strong>:Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。算法应该具有线性时间复杂度。你能否仅使用额外常数空间来实现?</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h2><p>要求找出 <code>0, 1, 2, ..., n</code> 中缺失的那个数。基本思想是利用异或的性质，我们都知道<code>X^X^Y = y</code>，这意味着用相同的数做两个异或运算会消去这个数，露出原来的数。在这个解决方案中，我对数组的索引和值都应用了异或操作。在没有缺失数字的完整数组中，索引和值应该完全对应(nums[index] = index)，所以在缺失的数组中，最后剩下的是缺失的数字。</p><p>步骤：</p><ol><li>这里我们需要构造一个 X，用数组下标就可以了。数组下标是从 <code>[0，n-1]</code>，数字是 <code>[0，n]</code>，for循环依次把数组里面的数值和数组下标进行异或。</li><li>把for循环异或的结果再和 n 再异或一次，即可得到缺失的数字。</li></ol><pre><code>Time O(n), Space O(1)</code></pre><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路 2"></a>解题思路 2</h2><p>这个解决方案很容易理解。假设输入为[0,1,3,4]，数组中的数字下标为[0,1,2,3]，缺失的数字之后的数值与下标都相差1，因此每个数字对应下标的差值为[0,0,1,1]，将差值相加，用数组的长度减去它，就可以得到出现差值的缺失数。</p><pre><code>Time O(n), Space O(1)</code></pre><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路 3"></a>解题思路 3</h2><p>对数组先排序，然后使用二分查找</p><pre><code>Time O(nlogn), Space O(1)</code></pre><p>如果数组是有序的，我更喜欢二分搜索法。否则，异或方法更好。</p><p><a href="https://github.com/billbliu/leetcode/blob/main/leetcode-go/array/268.missing_number.go" target="_blank" rel="noopener">Go</a></p><p><a href="https://github.com/billbliu/leetcode/blob/main/leetcode-rust/array/268.missing_number.rs" target="_blank" rel="noopener">Rust</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP与ping：投石问路的侦察兵</title>
      <link href="/2020/03/15/geek-time-interesting-talk-about-network-protocols-07/"/>
      <url>/2020/03/15/geek-time-interesting-talk-about-network-protocols-07/</url>
      
        <content type="html"><![CDATA[<p>无论是在宿舍，还是在办公室，或者运维一个数据中心，我们常常会遇到网络不通的问题。那台机器明明就在那里，你甚至都可以通过机器的终端连上去看。它看着好好的，可是就是连不上去，究竟是哪里出了问题呢？</p><h2 id="1、ICMP-协议的格式"><a href="#1、ICMP-协议的格式" class="headerlink" title="1、ICMP 协议的格式"></a>1、ICMP 协议的格式</h2><p>一般情况下，你会想到 ping 一下。那你知道 ping 是如何工作的吗？</p><p>ping 是基于 ICMP 协议工作的。<strong>ICMP 全称 Internet Control Message Protocol，就是互联网控制报文协议</strong>。这里面的关键词是“控制”，那具体是怎么控制的呢？</p><p>网络包在异常复杂的网络环境中传输时，常常会遇到各种各样的问题。当遇到问题的时候，总不能“死个不明不白”，要传出消息来，报告情况，这样才可以调整传输策略。这就相当于我们经常看到的电视剧里，古代行军的时候，为将为帅者需要通过侦察兵、哨探或传令兵等人肉的方式来掌握情况，控制整个战局。</p><p>ICMP 报文是封装在 IP 包里面的。因为传输指令的时候，肯定需要源地址和目标地址。它本身非常简单。因为作为侦查兵，要轻装上阵，不能携带大量的包袱。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-07/image-20210411230245737.png" alt="image-20210411230245737"></p><p>ICMP 报文有很多的类型，不同的类型有不同的代码。<strong>最常用的类型是主动请求为 8，主动请求的应答为 0。</strong></p><h2 id="2、查询报文类型"><a href="#2、查询报文类型" class="headerlink" title="2、查询报文类型"></a>2、查询报文类型</h2><p>我们经常在电视剧里听到这样的话：主帅说，来人哪！前方战事如何，快去派人打探，一有情况，立即通报！</p><p>这种是主帅发起的，主动查看敌情，对应 <strong>ICMP 的查询报文类型</strong>。例如，常用的 <strong>ping 就是查询报文，是一种主动请求，并且获得主动应答的 ICMP 协议。</strong>所以，ping 发的包也是符合 ICMP 协议格式的，只不过它在后面增加了自己的格式。</p><p><strong>对 ping 的主动请求，进行网络抓包，称为 ICMP ECHO REQUEST。同理主动请求的回复，称为ICMP ECHO REPLY</strong>。比起原生的 ICMP，这里面多了两个字段，一个是<strong>标识符</strong>。这个很好理解，你派出去两队侦查兵，一队是侦查战况的，一队是去查找水源的，要有个标识才能区分。另一个是<strong>序号</strong>，你派出去的侦查兵，都要编个号。如果派出去 10 个，回来 10 个，就说明前方战况不错；如果派出去 10 个，回来 2 个，说明情况可能不妙。</p><p>在选项数据中，ping 还会存放发送请求的时间值，来计算往返时间，说明路程的长短。</p><h2 id="3、差错报文类型"><a href="#3、差错报文类型" class="headerlink" title="3、差错报文类型"></a>3、差错报文类型</h2><p>当然也有另外一种方式，就是差错报文。</p><p>主帅骑马走着走着，突然来了一匹快马，上面的小兵气喘吁吁的：报告主公，不好啦！张将军遭遇埋伏，全军覆没啦！这种是异常情况发起的，来报告发生了不好的事情，对应 <strong>ICMP 的差错报文类型</strong>。</p><p>我举几个 ICMP 差错报文的例子：<strong>终点不可达为 3，源抑制为 4，超时为 11，重定向为 5</strong>。这些都是什么意思呢？我给你具体解释一下。</p><ul><li><strong>第一种是终点不可达</strong>。小兵：报告主公，您让把粮草送到张将军那里，结果没有送到。</li></ul><p>如果你是主公，你肯定会问，为啥送不到？具体的原因在代码中表示就是，网络不可达代码为 0，主机不可达代码为 1，协议不可达代码为 2，端口不可达代码为 3，需要进行分片但设置了不分片位代码为 4。</p><p>具体的场景就像这样：</p><ol><li>网络不可达：主公，找不到地方呀？</li><li>主机不可达：主公，找到地方没这个人呀？</li><li>协议不可达：主公，找到地方，找到人，口号没对上，人家天王盖地虎，我说 12345！</li><li>端口不可达：主公，找到地方，找到人，对了口号，事儿没对上，我去送粮草，人家说他们在等救兵。</li><li>需要进行分片但设置了不分片位：主公，走到一半，山路狭窄，想换小车，但是您的将令，严禁换小车，就没办法送到了。</li></ol><ul><li><strong>第二种是源站抑制</strong>，也就是让源站放慢发送速度。小兵：报告主公，您粮草送的太多了吃不完。</li><li><strong>第三种是时间超时</strong>，也就是超过网络包的生存时间还是没到。小兵：报告主公，送粮草的人，自己把粮草吃完了，还没找到地方，已经饿死啦。</li><li><strong>第四种是路由重定向</strong>，也就是让下次发给另一个路由器。小兵：报告主公，上次送粮草的人本来只要走一站地铁，非得从五环绕，下次别这样了啊。</li></ul><p>差错报文的结构相对复杂一些。除了前面还是 IP，ICMP 的前 8 字节不变，后面则跟上出错的那个 IP 包的 IP 头和 IP 正文的前 8 个字节。</p><p>而且这类侦查兵特别恪尽职守，不但自己返回来报信，还把一部分遗物也带回来。侦察兵：报告主公，张将军已经战死沙场，这是张将军的印信和佩剑。主公：神马？张将军是怎么死的（可以查看 ICMP 的前 8 字节）？没错，这是张将军的剑，是他的剑（IP 数据包的头及正文前 8 字节）。</p><h2 id="4、ping：查询报文类型的使用"><a href="#4、ping：查询报文类型的使用" class="headerlink" title="4、ping：查询报文类型的使用"></a>4、ping：查询报文类型的使用</h2><p>接下来，我们重点来看 ping 的发送和接收过程。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-07/image-20210411231115716.png" alt="image-20210411231115716"></p><p>假定主机 A 的 IP 地址是 192.168.1.1，主机 B 的 IP 地址是 192.168.1.2，它们都在同一个子网。那当你在主机 A 上运行“ping 192.168.1.2”后，会发生什么呢?</p><p>ping 命令执行的时候，源主机首先会构建一个 ICMP 请求数据包，ICMP 数据包内包含多个字段。最重要的是两个，第一个是<strong>类型字段</strong>，对于请求数据包而言该字段为 8；另外一个是<strong>顺序号</strong>，主要用于区分连续 ping 的时候发出的多个数据包。每发出一个请求数据包，顺序号会自动加 1。为了能够计算往返时间 RTT，它会在报文的数据部分插入发送时间。</p><p>然后，由 ICMP 协议将这个数据包连同地址 192.168.1.2 一起交给 IP 层。IP 层将以 192.168.1.2 作为目的地址，本机 IP 地址作为源地址，加上一些其他控制信息，构建一个 IP 数据包。</p><p>接下来，需要加入 MAC 头。如果在本节 ARP 映射表中查找出 IP 地址 192.168.1.2 所对应的 MAC 地址，则可以直接使用；如果没有，则需要发送 ARP 协议查询 MAC 地址，获得 MAC 地址后，由数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址；还要附加上一些控制信息，依据以太网的介质访问规则，将它们传送出去。</p><p>主机 B 收到这个数据帧后，先检查它的目的 MAC 地址，并和本机的 MAC 地址对比，如符合，则接收，否则就丢弃。接收后检查该数据帧，将 IP 数据包从帧中提取出来，交给本机的 IP 层。同样，IP 层检查后，将有用的信息提取后交给 ICMP 协议。</p><p>主机 B 会构建一个 ICMP 应答包，应答数据包的类型字段为 0，顺序号为接收到的请求数据包中的顺序号，然后再发送出去给主机 A。</p><p>在规定的时候间内，源主机如果没有接到 ICMP 的应答包，则说明目标主机不可达；如果接收到了 ICMP 应答包，则说明目标主机可达。此时，源主机会检查，用当前时刻减去该数据包最初从源主机上发出的时刻，就是 ICMP 数据包的时间延迟。</p><p>当然这只是最简单的，同一个局域网里面的情况。如果跨网段的话，还会涉及网关的转发、路由器的转发等等。但是对于 ICMP 的头来讲，是没什么影响的。会影响的是根据目标 IP 地址，选择路由的下一跳，还有每经过一个路由器到达一个新的局域网，需要换 MAC 头里面的 MAC 地址。这个过程后面几节会详细描述，这里暂时不多说。</p><p>如果在自己的可控范围之内，当遇到网络不通的问题的时候，除了直接 ping 目标的 IP 地址之外，还应该有一个清晰的网络拓扑图。并且从理论上来讲，应该要清楚地知道一个网络包从源地址到目标地址都需要经过哪些设备，然后逐个 ping 中间的这些设备或者机器。如果可能的话，在这些关键点，通过 tcpdump -i eth0 icmp，查看包有没有到达某个点，回复的包到达了哪个点，可以更加容易推断出错的位置。</p><p>经常会遇到一个问题，如果不在我们的控制范围内，很多中间设备都是禁止 ping 的，但是 ping 不通不代表网络不通。这个时候就要使用 telnet，通过其他协议来测试网络是否通，这个就不在本篇的讲述范围了。</p><p>说了这么多，你应该可以看出 ping 这个程序是使用了 ICMP 里面的 ECHO REQUEST 和 ECHO REPLY 类型的。</p><h2 id="5、Traceroute：差错报文类型的使用"><a href="#5、Traceroute：差错报文类型的使用" class="headerlink" title="5、Traceroute：差错报文类型的使用"></a>5、Traceroute：差错报文类型的使用</h2><p>那其他的类型呢？是不是只有真正遇到错误的时候，才能收到呢？那也不是，有一个程序 Traceroute，是个“大骗子”。它会使用 ICMP 的规则，故意制造一些能够产生错误的场景。</p><p>所以，<strong>Traceroute 的第一个作用就是故意设置特殊的 TTL，来追踪去往目的地时沿途经过的路由器</strong>。Traceroute 的参数指向某个目的 IP 地址，它会发送一个 UDP 的数据包。将 TTL 设置成 1，也就是说一旦遇到一个路由器或者一个关卡，就表示它“牺牲”了。</p><p>如果中间的路由器不止一个，当然碰到第一个就“牺牲”。于是，返回一个 ICMP 包，也就是网络差错包，类型是时间超时。那大军前行就带一顿饭，试一试走多远会被饿死，然后找个哨探回来报告，那我就知道大军只带一顿饭能走多远了。</p><p>接下来，将 TTL 设置为 2。第一关过了，第二关就“牺牲”了，那我就知道第二关有多远。如此反复，直到到达目的主机。这样，Traceroute 就拿到了所有的路由器 IP。当然，有的路由器压根不会回这个 ICMP。这也是 Traceroute 一个公网的地址，看不到中间路由的原因。</p><p>怎么知道 UDP 有没有到达目的主机呢？Traceroute 程序会发送一份 UDP 数据报给目的主机，但它会选择一个不可能的值作为 UDP 端口号（大于 30000）。当该数据报到达时，将使目的主机的 UDP 模块产生一份“端口不可达”错误 ICMP 报文。如果数据报没有到达，则可能是超时。</p><p>这就相当于故意派人去西天如来那里去请一本《道德经》，结果人家信佛不信道，消息就会被打出来。被打的消息传回来，你就知道西天是能够到达的。为什么不去取《心经》呢？因为 UDP 是无连接的。也就是说这人一派出去，你就得不到任何音信。你无法区别到底是半路走丢了，还是真的信佛遁入空门了，只有让人家打出来，你才会得到消息。</p><p>Traceroute 还有一个作用是故意设置不分片，从而确定路径的 MTU。要做的工作首先是发送分组，并设置“不分片”标志。发送的第一个分组的长度正好与出口 MTU 相等。如果中间遇到窄的关口会被卡住，会发送 ICMP 网络差错包，类型为“需要进行分片但设置了不分片位”。其实，这是人家故意的好吧，每次收到 ICMP“不能分片”差错时就减小分组的长度，直到到达目标主机。</p><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>好了，这一节内容差不多了，我来总结一下：</p><ul><li>ICMP 相当于网络世界的侦察兵。我讲了两种类型的 ICMP 报文，一种是主动探查的查询报文，一种异常报告的差错报文；</li><li>ping 使用查询报文，Traceroute 使用差错报文。</li></ul><h2 id="7、思考问题？"><a href="#7、思考问题？" class="headerlink" title="7、思考问题？"></a>7、思考问题？</h2><p>1、当发送的报文出问题的时候，会发送一个 ICMP 的差错报文来报告错误，但是如果 ICMP 的差错报文也出问题了呢？</p><p>答案：</p><p>我总结了一下，不会导致产生 ICMP 差错报文的有：</p><ul><li>ICMP 差错报文（ICMP 查询报文可能会产生 ICMP 差错报文）；</li><li>目的地址是广播地址或多播地址的 IP 数据报；</li><li>作为链路层广播的数据报；</li><li>不是 IP 分片的第一片；</li><li>源地址不是单个主机的数据报。这就是说，源地址不能为零地址、环回地址、广播地址或多播地址。</li></ul><p>2、这一节只说了一个局域网互相 ping 的情况。如果跨路由器、跨网关的过程会是什么样的呢？</p><p>3 、TTL的作用没有讲清楚，特此记录一下。</p><p>TTL是网络包里的一个值，它告诉路由器包在网络中太长时间是否需要被丢弃。TTL最初的设想是，设置超时时间，超过此范围则被丢弃。每个路由器要将TTL减一，TTL通常表示被丢弃前经过的路由器的个数。当TTL变为0时，该路由器丢弃该包，并发送一个ICMP包给最初的发送者。 tranceroute差错报文会使用。</p><p>TTL相当于血槽，网络包每次遭遇路由器都要被砍一刀掉一格血，血槽空了网络包也就死了，砍最后一刀的路由器可能还会收尸送回去。</p><p>4、许多人问：tracerouter发udp，为啥出错回icmp？<br>正常情况下，协议栈能正常走到udp，当然正常返回udp。<br>但是，你主机不可达，是ip层的（还没到udp）。ip层，当然只知道回icmp。报文分片错误也是同理。</p><p>5、ping 使用的是什么网络编程接口？</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-07/image-20210411232039419.png" alt="image-20210411232039419"></p><p>咱们使用的网络编程接口是 Socket，对于 ping 来讲，使用的是 ICMP，创建 Socket 如下：</p><pre><code>socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)</code></pre><p>SOCK_RAW 就是基于 IP 层协议建立通信机制。如果是 TCP，则建立下面的 Socket：</p><pre><code>socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)</code></pre><p>如果是 UDP，则建立下面的 Socket：</p><pre><code>socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)</code></pre><p>6、ICMP 差错报文是谁发送的呢？</p><p>我看留言里有很多人对这个问题有疑惑。ICMP 包是由内核返回的，在内核中，有一个函数用于发送 ICMP 的包。</p><pre><code>void icmp_send(struct sk_buff *skb_in, int type, int code, __be32 info);</code></pre><p>例如，目标不可达，会调用下面的函数。</p><pre><code>icmp_send(skb, ICMP_DEST_UNREACH, ICMP_PROT_UNREACH, 0);</code></pre><p>当 IP 大小超过 MTU 的时候，发送需要分片的 ICMP。</p><pre><code>if (ip_exceeds_mtu(skb, mtu)) {  icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED, htonl(mtu));  goto drop; }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界这么大，我想出网关：欧洲十国游与玄奘西行</title>
      <link href="/2020/03/15/geek-time-interesting-talk-about-network-protocols-08/"/>
      <url>/2020/03/15/geek-time-interesting-talk-about-network-protocols-08/</url>
      
        <content type="html"><![CDATA[<p>前几节，我主要跟你讲了宿舍里和办公室里用到的网络协议。你已经有了一些基础，是时候去外网逛逛了！</p><h2 id="1、怎么在宿舍上网？"><a href="#1、怎么在宿舍上网？" class="headerlink" title="1、怎么在宿舍上网？"></a>1、怎么在宿舍上网？</h2><p>还记得咱们在宿舍的时候买了台交换机，几台机器组了一个局域网打游戏吗？可惜啊，只能打局域网的游戏，不能上网啊！盼啊盼啊，终于盼到大二，允许宿舍开通网络了。学校给每个宿舍的网口分配了一个 IP 地址。这个 IP 是校园网的 IP，完全由网管部门控制。宿舍网的 IP 地址多为 192.168.1.x。校园网的 IP 地址，假设是 10.10.x.x。</p><p>这个时候，你要在宿舍上网，有两个办法：</p><ul><li>第一个办法，让你们宿舍长再买一个网卡。这个时候，你们宿舍长的电脑里就有两张网卡。一张网卡的线插到你们宿舍的交换机上，另一张网卡的线插到校园网的网口。而且，这张新的网卡的 IP 地址要按照学校网管部门分配的配置，不然上不了网。这种情况下，如果你们宿舍的人要上网，就需要一直开着宿舍长的电脑。</li><li>第二个办法，你们共同出钱买个家庭路由器（反正当时我们买不起）。家庭路由器会有内网网口和外网网口。把外网网口的线插到校园网的网口上，将这个外网网口配置成和网管部的一样。内网网口连上你们宿舍的所有的电脑。这种情况下，如果你们宿舍的人要上网，就需要一直开着路由器。</li></ul><p>这两种方法其实是一样的。只不过第一种方式，让你的宿舍长的电脑，变成一个有多个口的路由器而已。而你买的家庭路由器，里面也跑着程序，和你宿舍长电脑里的功能一样，只不过是一个嵌入式的系统。</p><p>当你的宿舍长能够上网之后，接下来，就是其他人的电脑怎么上网的问题。这就需要配置你们的网卡。当然 <strong>DHCP 是可以默认配置的。在进行网卡配置的时候，除了 IP 地址，还需要配置一个Gateway 的东西，这个就是网关</strong>。</p><h2 id="2、你了解-MAC-头和-IP-头的细节吗？"><a href="#2、你了解-MAC-头和-IP-头的细节吗？" class="headerlink" title="2、你了解 MAC 头和 IP 头的细节吗？"></a>2、你了解 MAC 头和 IP 头的细节吗？</h2><p>一旦配置了 IP 地址和网关，往往就能够指定目标地址进行访问了。由于在跨网关访问的时候，牵扯到 MAC 地址和 IP 地址的变化，这里有必要详细描述一下 MAC 头和 IP 头的细节。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-08/825e54560a6de08a32e4cab4e0f59f65.jpg" alt="img"></p><p>在MAC 头里面的内容：</p><ul><li>目标 MAC 地址。</li><li>源 MAC 地址。</li><li>协议类型，用来说明里面是 IP 协议。</li></ul><p>IP 头里面的内容：</p><ul><li>版本号，目前主流的还是 IPv4。</li><li>服务类型 TOS 在第3节讲 ip addr 命令的时候讲过。</li><li>TTL 在第 7 节讲 ICMP 协议的时候讲过。</li><li>另外，还有 8 位标识协议。这里到了下一层的协议，也就是，是 TCP 还是 UDP。</li><li>最重要的就是源 IP 和目标 IP。先是源 IP 地址。</li><li>然后是目标 IP 地址。</li></ul><p>在任何一台机器上，当要访问另一个 IP 地址的时候，都会先判断，这个目标 IP 地址，和当前机器的 IP 地址，是否在同一个网段。怎么判断同一个网段呢？需要 CIDR 和子网掩码，这个在第三节的时候也讲过了。</p><p><strong>如果是同一个网段</strong>，例如，你访问你旁边的兄弟的电脑，那就没网关什么事情，直接将源地址和目标地址放入 IP 头中，然后通过 ARP 获得 MAC 地址，将源 MAC 和目的 MAC 放入 MAC 头中，发出去就可以了。</p><p><strong>如果不是同一网段</strong>，例如，你要访问你们校园网里面的 BBS，该怎么办？这就需要发往默认网关 Gateway。Gateway 的地址一定是和源 IP 地址是一个网段的。往往不是第一个，就是第二个。例如 192.168.1.0/24 这个网段，Gateway 往往会是 192.168.1.1/24 或者 192.168.1.2/24。</p><p>如何发往默认网关呢？网关不是和源 IP 地址是一个网段的么？这个过程就和发往同一个网段的其他机器是一样的：将源地址和目标 IP 地址放入 IP 头中，通过 ARP 获得网关的 MAC 地址，将源 MAC 和网关的 MAC 放入 MAC 头中，发送出去。网关所在的端口，例如 192.168.1.1/24 将网络包收进来，然后接下来怎么做，就完全看网关的了。</p><p><strong>网关往往是一个路由器，是一个三层转发的设备</strong>。啥叫三层设备？前面也说过了，就是把 MAC 头和 IP 头都取下来，然后根据里面的内容，看看接下来把包往哪里转发的设备。(路由器一般属于IP层设备)</p><p>在你的宿舍里面，网关就是你宿舍长的电脑。一个路由器往往有多个网口，如果是一台服务器做这个事情，则就有多个网卡，其中一个网卡是和源 IP 同网段的。</p><p>很多情况下，人们把网关就叫做路由器。其实不完全准确，而另一种比喻更加恰当：<strong><em>路由器是一台设备，它有五个网口或者网卡，相当于有五只手，分别连着五个局域网。每只手的 IP 地址都和局域网的 IP 地址相同的网段，每只手都是它握住的那个局域网的网关。</em></strong>(网关只针对某个局域网，是某个局域网的出口地址，而一个路由器由多个网关组成)</p><p>任何一个想发往其他局域网的包，都会到达其中一只手，被拿进来，拿下 MAC 头和 IP 头，看看，根据自己的路由算法，选择另一只手，加上 IP 头和 MAC 头，然后扔出去。</p><h2 id="3、静态路由是什么？"><a href="#3、静态路由是什么？" class="headerlink" title="3、静态路由是什么？"></a>3、静态路由是什么？</h2><p>这个时候，问题来了，该选择哪一只手？IP 头和 MAC 头加什么内容，哪些变、哪些不变呢？这个问题比较复杂，大致可以分为两类，一个是<strong>静态路由</strong>，一个是<strong>动态路由</strong>。动态路由下一节我们详细地讲。这一节我们先说静态路由。</p><p><strong>静态路由，其实就是在路由器上，配置一条一条规则</strong>。这些规则包括：想访问 BBS 站（它肯定有个网段），从 2 号口出去，下一跳是 IP2；想访问教学视频站（它也有个自己的网段），从 3 号口出去，下一跳是 IP3，然后保存在路由器里。</p><p>每当要选择从哪只手抛出去的时候，就一条一条的匹配规则，找到符合的规则，就按规则中设置的那样，从某个口抛出去，找下一跳 IPX。</p><h2 id="4、IP-头和-MAC-头哪些变、哪些不变？"><a href="#4、IP-头和-MAC-头哪些变、哪些不变？" class="headerlink" title="4、IP 头和 MAC 头哪些变、哪些不变？"></a>4、IP 头和 MAC 头哪些变、哪些不变？</h2><p>对于 IP 头和 MAC 头哪些变、哪些不变的问题，可以分两种类型。我把它们称为<strong>“欧洲十国游”型和“玄奘西行”型</strong>。</p><p>之前我说过，<strong>MAC 地址是一个局域网内才有效的地址。因而，MAC 地址只要过网关，就必定会改变，因为已经换了局域网</strong>。两者主要的区别在于 IP 地址是否改变。<strong>不改变 IP 地址的网关，我们称为转发网关；改变 IP 地址的网关，我们称为NAT 网关</strong>。</p><h2 id="5、“欧洲十国游”型"><a href="#5、“欧洲十国游”型" class="headerlink" title="5、“欧洲十国游”型"></a>5、“欧洲十国游”型</h2><p>结合这个图，我们先来看“欧洲十国游”型。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-08/image-20210413181327884.png" alt="image-20210413181327884"></p><p>服务器 A 要访问服务器 B。首先，服务器 A 会思考，192.168.4.101 和我不是一个网段的，因而需要先发给网关。那网关是谁呢？已经静态配置好了，网关是 192.168.1.1。网关的 MAC 地址是多少呢？发送 ARP 获取网关的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源 MAC：服务器 A 的 MAC</li><li>目标 MAC：192.168.1.1 这个网口的 MAC</li><li>源 IP：192.168.1.101</li><li>目标 IP：192.168.4.101</li></ul><p>包到达 192.168.1.1 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。</p><p>在路由器 A 中配置了静态路由之后，要想访问 192.168.4.0/24，要从 192.168.56.1 这个口出去，下一跳为 192.168.56.2。于是，路由器 A 思考的时候，匹配上了这条路由，要从 192.168.56.1 这个口发出去，发给 192.168.56.2，那 192.168.56.2 的 MAC 地址是多少呢？路由器 A 发送 ARP 获取 192.168.56.2 的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源 MAC：192.168.56.1 的 MAC 地址</li><li>目标 MAC：192.168.56.2 的 MAC 地址</li><li>源 IP：192.168.1.101</li><li>目标 IP：192.168.4.101</li></ul><p>包到达 192.168.56.2 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。</p><p>在路由器 B 中配置了静态路由，要想访问 192.168.4.0/24，要从 192.168.4.1 这个口出去，没有下一跳了。因为我右手这个网卡，就是这个网段的，我是最后一跳了。于是，路由器 B 思考的时候，匹配上了这条路由，要从 192.168.4.1 这个口发出去，发给 192.168.4.101。那 192.168.4.101 的 MAC 地址是多少呢？路由器 B 发送 ARP 获取 192.168.4.101 的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源 MAC：192.168.4.1 的 MAC 地址</li><li>目标 MAC：192.168.4.101 的 MAC 地址</li><li>源 IP：192.168.1.101</li><li>目标 IP：192.168.4.101</li></ul><p>包到达服务器 B，MAC 地址匹配，将包收进来。</p><p>通过这个过程可以看出，每到一个新的局域网，MAC 都是要变的，但是 IP 地址都不变。在 IP 头里面，不会保存任何网关的 IP 地址。<strong>所谓的下一跳是，某个 IP 要将这个 IP 地址转换为 MAC 放入 MAC 头</strong>。</p><p>之所以将这种模式比喻称为欧洲十国游，是因为在整个过程中，IP 头里面的地址都是不变的。IP 地址在三个局域网都可见，在三个局域网之间的网段都不会冲突。在三个网段之间传输包，IP 头不改变。这就像在欧洲各国之间旅游，一个签证就能搞定。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-08/image-20210413181920677.png" alt="image-20210413181920677"></p><h2 id="6、“玄奘西行”型"><a href="#6、“玄奘西行”型" class="headerlink" title="6、“玄奘西行”型"></a>6、“玄奘西行”型</h2><p>我们再来看“玄奘西行”型。</p><p>这里遇见的第一个问题是，局域网之间没有商量过，各定各的网段，因而 IP 段冲突了。最左面大唐的地址是 192.168.1.101，最右面印度的地址也是 192.168.1.101，如果单从 IP 地址上看，简直是自己访问自己，其实是大唐的 192.168.1.101 要访问印度的 192.168.1.101。</p><p>怎么解决这个问题呢？既然局域网之间没有商量过，你们各管各的，那到国际上，也即中间的局域网里面，就需要使用另外的地址。就像出国，不能用咱们自己的身份证，而要改用护照一样，玄奘西游也要拿着专门取经的通关文牒，而不能用自己国家的身份证。</p><p>首先，目标服务器 B 在国际上要有一个国际的身份，我们给它一个 192.168.56.2。在网关 B 上，我们记下来，国际身份 192.168.56.2 对应国内身份 192.168.1.101。凡是要访问 192.168.56.2，都转成 192.168.1.101。</p><p>于是，源服务器 A 要访问目标服务器 B，要指定的目标地址为 192.168.56.2。这是它的国际身份。服务器 A 想，192.168.56.2 和我不是一个网段的，因而需要发给网关，网关是谁？已经静态配置好了，网关是 192.168.1.1，网关的 MAC 地址是多少？发送 ARP 获取网关的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源 MAC：服务器 A 的 MAC</li><li>目标 MAC：192.168.1.1 这个网口的 MAC</li><li>源 IP：192.168.1.101</li><li>目标 IP：192.168.56.2</li></ul><p>包到达 192.168.1.1 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。</p><p>在路由器 A 中配置了静态路由：要想访问 192.168.56.2/24，要从 192.168.56.1 这个口出去，没有下一跳了，因为我右手这个网卡，就是这个网段的，我是最后一跳了。</p><p>于是，路由器 A 思考的时候，匹配上了这条路由，要从 192.168.56.1 这个口发出去，发给 192.168.56.2。那 192.168.56.2 的 MAC 地址是多少呢？路由器 A 发送 ARP 获取 192.168.56.2 的 MAC 地址。</p><p>当网络包发送到中间的局域网的时候，服务器 A 也需要有个国际身份，因而在国际上，源 IP 地址也不能用 192.168.1.101，需要改成 192.168.56.1。发送包的内容是这样的：</p><ul><li>源 MAC：192.168.56.1 的 MAC 地址</li><li>目标 MAC：192.168.56.2 的 MAC 地址</li><li>源 IP：192.168.56.1</li><li>目标 IP：192.168.56.2</li></ul><p>包到达 192.168.56.2 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。</p><p>路由器 B 是一个 NAT 网关，它上面配置了，要访问国际身份 192.168.56.2 对应国内身份 192.168.1.101，于是改为访问 192.168.1.101。</p><p>在路由器 B 中配置了静态路由：要想访问 192.168.1.0/24，要从 192.168.1.1 这个口出去，没有下一跳了，因为我右手这个网卡，就是这个网段的，我是最后一跳了。</p><p>于是，路由器 B 思考的时候，匹配上了这条路由，要从 192.168.1.1 这个口发出去，发给 192.168.1.101。那 192.168.1.101 的 MAC 地址是多少呢？路由器 B 发送 ARP 获取 192.168.1.101 的 MAC 地址，然后发送包。内容是这样的：</p><ul><li>源 MAC：192.168.1.1 的 MAC 地址</li><li>目标 MAC：192.168.1.101 的 MAC 地址</li><li>源 IP：192.168.56.1</li><li>目标 IP：192.168.1.101</li></ul><p>包到达服务器 B，MAC 地址匹配，将包收进来。</p><p>从服务器 B 接收的包可以看出，源 IP 为服务器 A 的国际身份，因而发送返回包的时候，也发给这个国际身份，由路由器 A 做 NAT，转换为国内身份。</p><p>从这个过程可以看出，IP 地址也会变。这个过程用英文说就是 <strong>Network Address Translation，简称 NAT</strong>。</p><p>其实这第二种方式我们经常见，现在大家每家都有家用路由器，家里的网段都是 192.168.1.x，所以你肯定访问不了你邻居家的这个私网的 IP 地址的。所以，当我们家里的包发出去的时候，都被家用路由器 NAT 成为了运营商的地址了。</p><p>很多办公室访问外网的时候，也是被 NAT 过的，因为不可能办公室里面的 IP 也是公网可见的，公网地址实在是太贵了，所以一般就是整个办公室共用一个到两个出口 IP 地址。你可以通过 <a href="https://www.whatismyip.com/" target="_blank" rel="noopener">https://www.whatismyip.com/</a> 查看自己的出口 IP 地址。</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>好了，这一节内容差不多了，我来总结一下：</p><ul><li>如果离开本局域网，就需要经过网关，网关是路由器的一个网口；</li><li>路由器是一个三层设备，里面有如何寻找下一跳的规则；</li><li>经过路由器之后 MAC 头要变，如果 IP 不变，相当于不换护照的欧洲旅游，如果 IP 变，相当于换护照的玄奘西行。</li></ul><p>本文讲述了当要访问外网时候ip数据包的变化和寻路过程，有两种情况，ip经过统一的分配没有冲突，这样源ip，目的ip不用变，变得是目的mac（因为需要不断地寻路跳转到中间网关）这种网关也叫转发网关。第二种就是比较现实的情况，有ip冲突不同网段，那么就需要在公网上有一个通用认可的身份，这个身份可以转换成私有身份，关系普通护照和国内身份证。而nat就做这个身份的转换。通常公有ip运营商控制。</p><h2 id="7、思考问题？"><a href="#7、思考问题？" class="headerlink" title="7、思考问题？"></a>7、思考问题？</h2><p>1、当在你家里要访问 163 网站的时候，你的包需要 NAT 成为公网 IP，返回的包又要 NAT 成你的私有 IP，返回包怎么知道这是你的请求呢？它怎么就这么智能的 NAT 成了你的 IP 而非别人的 IP 呢？</p><p>答案：</p><p>这是个比较复杂的事情。在讲云中网络安全里的 iptables 时，我们讲过 conntrack 功能，它记录了 SNAT 一去一回的对应关系。</p><p>如果编译内核时开启了连接跟踪选项，那么 Linux 系统就会为它收到的每个数据包维持一个连接状态，用于记录这条数据连接的状态。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-08/a924ccda5d54bcad6f67fdebe0a6c1fc.jpg" alt="img"></p><p>2、对于路由规则，这一节讲述了静态路由，需要手动配置，如果要自动配置，你觉得应该怎么办呢？</p><p>3 、老师，你在第二种情况说，网关B上记下来，国际身份192.168.56.2对应国内身份192.168.1.101。那么如果该局域网内还有很多其他机器，比如192.168.1.102，103等等，它们对应的国际身份呢？如果也是192.168.56.2，那么从192.168.56.1发来请求时，网关B要将该消息转发到哪个国内身份呢？</p><p>nat：将m个内网ip 映射为 n个公网ip地址，一般n&lt;m，节省公网ip<br>napt：将m个内网ip:port 映射为 公网ip:port，节省公网ip，比nat更灵活，但是端口在映射后可能会变。</p><p>NAT不使用端口时，N个公网IP的专用网中最多只有N个主机，这样才能NAT。<br>后台 NAT路由开始借助端口，将NAT上一个公网IP+NAT端口 映射成 多个内网主机+主机端口。这样就提高了IP利用率。</p><p>对于基本 NAT （只进行 IP 地址的转写）来说，你可以说它是运行在第三层上的机制，但是由于基本 NAT 并没有缓解 IP 地址紧张的问题，一般来说我们使用的都是基于端口映射的 NAPT。由于 NAPT 同时对 IP 地址和传输层端口进行改写，这时候再说 NAT 路由器充当的是三层设备就不合适了。</p><p>对于 NAPT，我们应该区分传出（客户端）和传入（服务器）两种情况。对于传出 NAT 路由器的数据包，NAT 根据源 IP 地址和传输层端口号在尽可能保留源端口号的情况下将其转写为 NAT 可用 IP 地址池里的 IP 地址和可用的 NAT 端口，并用 Session（TCP）或者活跃计时器（UDP）的方法来记忆”源IP地址+传输层端口号 &lt;=&gt; NAT IP 地址 + NAT 端口号“的映射。这样，当相应的回复数据包返回 NAT 路由器时，我们可以根据记录信息将 IP 地址和端口号转写回去。</p><p>而对于位于 NAT 路由器后面的服务器，它需要通过监听端口来向互联网提供服务，由于服务器并不主动向 NAT 外部建立连接，NAT 也就无从根据传出包建立端口映射，那该怎么办呢？此时，NAT 路由器需要书写好端口转发或者端口映射规则，从而将传入 NAT 路由器某一个端口的数据段转发给内部网络某一台主机。</p><p>参考资料：<br>TCP/IP 协议详解 · 卷一</p><p>4、作为教程我觉得问题可以简单带过, 但是一定要点出来, 这样读者可以继续深入学习. 比如在讲西行型时, 要说明实际上网络请求是有端口号的, 服务器A请求服务器B, 虽然是用的服务器B的192.168.56.2/24这个ip左右目标ip, 但是他本身是有带上端口号, 比如端口号123, 这个端口号在路由器B上有一个NAT映射, 路由器知道123端口代表着内网主机192.188.1.101:321, 这样可以解决很多人的疑问: 内网有多台机器的时候怎么知道目标是哪一台?</p><p>5、NAT Gateway会以源IP+源端口的方式记录连接的NAT记录，Ping是直接调用的ICMP，不经过第四层的协议，并没有端口号，请问老师，同一内网的两台机器同时Ping百度，再收到两个应答之后，在没有端口号做区分的情况下，如何进行转发，谢谢</p><p>作者回复: 连接维护用哈希匹配，tcp有端口的一种算法，icmp也有相应的算法</p><p>6、有个地方有错误，在例子中，路由器B右边的192.168.1.0/24并不是静态路由，而是“直连网段”</p><p>作者回复: 赞，是直连，直连也有条路由的</p><p>7、wan口地址怎么来的？是否在到达公网前的这一段链路上每一跳都需要NAT？</p><p>作者回复: wan口地址是运营商分配的，只有最后一跳使用nat</p><p>8、老师，有个不理解的地方。<br>如果外网和内网的 IP是一一绑定的话，内网 IP的意义不就没有了么？<br>还是说，一个内网中有十台机器,但只有一个公网IP的情况，这个网络中就只有一台可以连接外网，其他都连接不了。</p><p>作者回复: 当然不能一一绑定，所以有多台机器共享一个外网ip的情况</p><p>9、不同的网段依靠路由器进行， 2个不同的路由之间是直连网段吗？ 在讲解中， 相邻的路由之间使用arp协议进行广播通信， 那就是直接工作在mac层了， 但是路由器是三层设备， 工作在网络层， 这一点不是很清楚？</p><p>作者回复: 两个路由之间，之前有一个口是同一网段的</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换机与VLAN：办公室太复杂，我要回学校</title>
      <link href="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/"/>
      <url>/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/</url>
      
        <content type="html"><![CDATA[<p>上一次，我们在宿舍里组建了一个本地的局域网 LAN，可以愉快地玩游戏了。这是一个非常简单的场景，因为只有一台交换机，电脑数目很少。今天，让我们切换到一个稍微复杂一点的场景，办公室。</p><h2 id="1、拓扑结构是怎么形成的？"><a href="#1、拓扑结构是怎么形成的？" class="headerlink" title="1、拓扑结构是怎么形成的？"></a>1、拓扑结构是怎么形成的？</h2><p>我们常见到的办公室大多是一排排的桌子，每个桌子都有网口，一排十几个座位就有十几个网口，一个楼层就会有几十个甚至上百个网口。如果算上所有楼层，这个场景自然比你宿舍里的复杂多了。具体哪里复杂呢？我来给你具体讲解。</p><p>首先，这个时候，一个交换机肯定不够用，需要多台交换机，交换机之间连接起来，就形成一个稍微复杂的<strong>拓扑结构</strong>。</p><p>我们先来看<strong>两台交换机</strong>的情形。两台交换机连接着三个局域网，每个局域网上都有多台机器。如果机器 1 只知道机器 4 的 IP 地址，当它想要访问机器 4，把包发出去的时候，它必须要知道机器 4 的 MAC 地址。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411212953322.png" alt="image-20210411212953322"></p><p>于是机器 1 发起广播，机器 2 收到这个广播，但是这不是找它的，所以没它什么事。交换机 A 一开始是不知道任何拓扑信息的，在它收到这个广播后，采取的策略是，除了广播包来的方向外，它还要转发给其他所有的网口(交换机初始化时，收到广播包会转发到其他所有的接口处)。于是机器 3 也收到广播信息了，但是这和它也没什么关系。</p><p>当然，交换机 B 也是能够收到广播信息的(因为交换机A和B都属于LAN2)，但是这时候它也是不知道任何拓扑信息的，因而也是进行广播的策略，将包转发到局域网三。这个时候，机器 4 和机器 5 都收到了广播信息。机器 4 主动响应说，这是找我的，这是我的 MAC 地址。于是一个 ARP 请求就成功完成了。</p><p>在上面的过程中，交换机 A 和交换机 B 都是能够学习到这样的信息：机器 1 是在左边这个网口的。当了解到这些拓扑信息之后，情况就好转起来。当机器 2 要访问机器 1 的时候，机器 2 并不知道机器 1 的 MAC 地址，所以机器 2 会发起一个 ARP 请求。这个广播消息会到达机器 1，也同时会到达交换机 A。这个时候交换机 A 已经知道机器 1 是不可能在右边的网口的，所以这个广播信息就不会广播到局域网二和局域网三。</p><p>当机器 3 要访问机器 1 的时候，也需要发起一个广播的 ARP 请求。这个时候交换机 A 和交换机 B 都能够收到这个广播请求。交换机 A 当然知道主机 A 是在左边这个网口的，所以会把广播消息转发到局域网一。同时，交换机 B 收到这个广播消息之后，由于它知道机器 1 是不在右边这个网口的，所以不会将消息广播到局域网三。</p><h2 id="2、如何解决常见的环路问题？"><a href="#2、如何解决常见的环路问题？" class="headerlink" title="2、如何解决常见的环路问题？"></a>2、如何解决常见的环路问题？</h2><p>这样看起来，两台交换机工作得非常好。随着办公室越来越大，交换机数目肯定越来越多。当整个拓扑结构复杂了，这么多网线，绕过来绕过去，不可避免地会出现一些意料不到的情况。其中常见的问题就是<strong>环路问题。</strong></p><p>例如这个图，当两个交换机将两个局域网同时连接起来的时候。你可能会觉得，这样反而有了高可用性。但是却不幸地出现了环路。出现了环路会有什么结果呢？</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411215734305.png" alt="image-20210411215734305"></p><p>我们来想象一下机器 1 访问机器 2 的过程。一开始，机器 1 并不知道机器 2 的 MAC 地址，所以它需要发起一个 ARP 的广播。广播到达机器 2，机器 2 会把 MAC 地址返回来，看起来没有这两个交换机什么事情。</p><p>但是问题来了，这两个交换机还是都能够收到广播包的。交换机 A 一开始是不知道机器 2 在哪个局域网的，所以它会把广播消息放到局域网二，在局域网二广播的时候，交换机 B 右边这个网口也是能够收到广播消息的。交换机 B 会将这个广播信息发送到局域网一。局域网一的这个广播消息，又会到达交换机 A 左边的这个接口。交换机 A 这个时候还是不知道机器 2 在哪个局域网，于是将广播包又转发到局域网二。左转左转左转，好像是个圈哦。</p><p>可能有人会说，当两台交换机都能够逐渐学习到拓扑结构之后，是不是就可以了？</p><p>别想了，压根儿学不会的。机器 1 的广播包到达交换机 A 和交换机 B 的时候，本来两个交换机都学会了机器 1 是在局域网一的，但是当交换机 A 将包广播到局域网二之后，交换机 B 右边的网口收到了来自交换机 A 的广播包。根据学习机制，这彻底损坏了交换机 B 的三观，刚才机器 1 还在左边的网口呢，怎么又出现在右边的网口呢？(有经过交换机，交换机就会学习)哦，那肯定是机器 1 换位置了，于是就误会了，交换机 B 就学会了，机器 1 是从右边这个网口来的，把刚才学习的那一条清理掉。同理，交换机 A 右边的网口，也能收到交换机 B 转发过来的广播包，同样也误会了，于是也学会了，机器 1 从右边的网口来，不是从左边的网口来。</p><p>然而当广播包从左边的局域网一广播的时候，两个交换机再次刷新三观，原来机器 1 是在左边的，过一会儿，又发现不对，是在右边的，过一会，又发现不对，是在左边的。</p><p>这还是一个包转来转去，每台机器都会发广播包，交换机转发也会复制广播包，当广播包越来越多的时候，按照上一节讲过一个共享道路的算法，也就是路会越来越堵，最后谁也别想走。所以，必须有一个方法解决环路的问题，怎么破除环路呢？</p><h2 id="3、STP-协议中那些难以理解的概念"><a href="#3、STP-协议中那些难以理解的概念" class="headerlink" title="3、STP 协议中那些难以理解的概念"></a>3、STP 协议中那些难以理解的概念</h2><p>在数据结构中，有一个方法叫做<strong>最小生成树</strong>。有环的我们常称为<strong>图</strong>。将图中的环破了，就生成了<strong>树</strong>。在计算机网络中，生成树的算法叫作 <strong>STP，全称 Spanning Tree Protocol</strong>。STP 协议比较复杂，一开始很难看懂，但是其实这是一场血雨腥风的武林比武或者华山论剑，最终决出五岳盟主的方式。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411220139686.png" alt="image-20210411220139686"></p><p>在 STP 协议里面有很多概念，译名就非常拗口，但是我一作比喻，你很容易就明白了。</p><ul><li><strong>Root Bridge</strong>，也就是<strong>根交换机</strong>。这个比较容易理解，可以比喻为“掌门”交换机，是某棵树的老大，是掌门，最大的大哥。</li><li><strong>Designated Bridges</strong>，有的翻译为<strong>指定交换机</strong>。这个比较难理解，可以想像成一个“小弟”，对于树来说，就是一棵树的树枝。所谓“指定”的意思是，我拜谁做大哥，其他交换机通过这个交换机到达根交换机，也就相当于拜他做了大哥。这里注意是树枝，不是叶子，因为叶子往往是主机。</li><li><strong>Bridge Protocol Data Units （BPDU） ，网桥协议数据单元</strong>。可以比喻为“相互比较实力”的协议。行走江湖，比的就是武功，拼的就是实力。当两个交换机碰见的时候，也就是相连的时候，就需要互相比一比内力了。BPDU 只有掌门能发，已经隶属于某个掌门的交换机只能传达掌门的指示。</li><li><strong>Priority Vector，优先级向量</strong>。可以比喻为实力 （值越小越牛）。实力是啥？就是一组 ID 数目，[Root Bridge ID, Root Path Cost, Bridge ID, and Port ID]。为什么这样设计呢？这是因为要看怎么来比实力。先看 Root Bridge ID。拿出老大的 ID 看看，发现掌门一样，那就是师兄弟；再比 Root Path Cost，也即我距离我的老大的距离，也就是拿和掌门关系比，看同一个门派内谁和老大关系铁；最后比 Bridge ID，比我自己的 ID，拿自己的本事比。</li></ul><h2 id="4、STP-的工作过程是怎样的？"><a href="#4、STP-的工作过程是怎样的？" class="headerlink" title="4、STP 的工作过程是怎样的？"></a>4、STP 的工作过程是怎样的？</h2><p>接下来，我们来看 STP 的工作过程。</p><p>一开始，江湖纷争，异常混乱。大家都觉得自己是掌门，谁也不服谁。于是，所有的交换机都认为自己是掌门，每个网桥都被分配了一个 ID。这个 ID 里由管理员分配的优先级，当然网络管理员知道哪些交换机贵，哪些交换机好，就会给它们分配高的优先级。这种交换机生下来武功就很高，起步就是乔峰。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411220534957.png" alt="image-20210411220534957"></p><p>既然都是掌门，互相都连着网线，就互相发送 BPDU 来比功夫呗。这一比就发现，有人是岳不群，有人是封不平，赢的接着当掌门，输的就只好做小弟了。当掌门的还会继续发 BPDU，而输的人就没有机会了。它们只有在收到掌门发的 BPDU 的时候，转发一下，表示服从命令。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411220614317.png" alt="image-20210411220614317"></p><p>数字表示优先级。就像这个图，5 和 6 碰见了，6 的优先级低，所以乖乖做小弟。于是一个小门派形成，5 是掌门，6 是小弟。其他诸如 1-7、2-8、3-4 这样的小门派，也诞生了。于是江湖出现了很多小的门派，小的门派，接着合并。合并的过程会出现以下四种情形，我分别来介绍。</p><p><strong>情形一：掌门遇到掌门</strong></p><p>当 5 碰到了 1，掌门碰见掌门，1 觉得自己是掌门，5 也刚刚跟别人 PK 完成为掌门。这俩掌门比较功夫，最终 1 胜出。于是输掉的掌门 5 就会率领所有的小弟归顺。结果就是 1 成为大掌门。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411220845625.png" alt="image-20210411220845625"></p><p><strong>情形二：同门相遇</strong></p><p>同门相遇可以是掌门与自己的小弟相遇，这说明存在“环”了。这个小弟已经通过其他门路拜在你门下，结果你还不认识，就 PK 了一把。结果掌门发现这个小弟功夫不错，不应该级别这么低，就把它招到门下亲自带，那这个小弟就相当于升职了。</p><p>我们再来看，假如 1 和 6 相遇。6 原来就拜在 1 的门下，只不过 6 的上司是 5，5 的上司是 1。1 发现，6 距离我才只有 2，比从 5 这里过来的 5（=4+1）近多了，那 6 就直接汇报给我吧。于是，5 和 6 分别汇报给 1。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411221012891.png" alt="image-20210411221012891"></p><p>同门相遇还可以是小弟相遇。这个时候就要比较谁和掌门的关系近，当然近的当大哥。刚才 5 和 6 同时汇报给 1 了，后来 5 和 6 在比较功夫的时候发现，5 你直接汇报给 1 距离是 4，如果 5 汇报给 6 再汇报给 1，距离只有 2+1=3，所以 5 干脆拜 6 为上司。</p><p><strong>情形三：掌门与其他帮派小弟相遇</strong></p><p>小弟拿本帮掌门和这个掌门比较，赢了，这个掌门拜入门来。输了，会拜入新掌门，并且逐渐拉拢和自己连接的兄弟，一起弃暗投明。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411221127092.png" alt="image-20210411221127092"></p><p>例如，2 和 7 相遇，虽然 7 是小弟，2 是掌门。就个人武功而言，2 比 7 强，但是 7 的掌门是 1，比 2 牛，所以没办法，2 要拜入 7 的门派，并且连同自己的小弟都一起拜入。</p><p><strong>情形四：不同门小弟相遇</strong></p><p>各自拿掌门比较，输了的拜入赢的门派，并且逐渐将与自己连接的兄弟弃暗投明。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411221228387.png" alt="image-20210411221228387"></p><p>例如，5 和 4 相遇。虽然 4 的武功好于 5，但是 5 的掌门是 1，比 4 牛，于是 4 拜入 5 的门派。后来当 3 和 4 相遇的时候，3 发现 4 已经叛变了，4 说我现在老大是 1，比你牛，要不你也来吧，于是 3 也拜入 1。</p><p>最终，生成一棵树，武林一统，天下太平。但是天下大势，分久必合，合久必分，天下统一久了，也会有相应的问题。</p><h2 id="5、如何解决广播问题和安全问题？"><a href="#5、如何解决广播问题和安全问题？" class="headerlink" title="5、如何解决广播问题和安全问题？"></a>5、如何解决广播问题和安全问题？</h2><p>毕竟机器多了，交换机也多了，就算交换机比 Hub 智能一些，但是还是难免有广播的问题，一大波机器，相关的部门、不相关的部门，广播一大堆，性能就下来了。就像一家公司，创业的时候，一二十个人，坐在一个会议室，有事情大家讨论一下，非常方便。但是如果变成了 50 个人，全在一个会议室里面吵吵，就会乱得不得了。</p><p>你们公司有不同的部门，有的部门需要保密的，比如人事部门，肯定要讨论升职加薪的事儿。由于在同一个广播域里面，很多包都会在一个局域网里面飘啊飘，碰到了一个会抓包的程序员，就能抓到这些包，如果没有加密，就能看到这些敏感信息了。还是上面的例子，50 个人在一个会议室里面七嘴八舌地讨论，其中有两个 HR，那他们讨论的问题，肯定被其他人偷偷听走了。</p><p>那咋办，分部门，分会议室呗。那我们就来看看怎么分。有两种分的方法:</p><ul><li>一个是<strong>物理隔离</strong>。每个部门设一个单独的会议室，对应到网络方面，就是每个部门有单独的交换机，配置单独的子网，这样部门之间的沟通就需要路由器了。路由器咱们还没讲到，以后再说。这样的问题在于，有的部门人多，有的部门人少。人少的部门慢慢人会变多，人多的部门也可能人越变越少。如果每个部门有单独的交换机，口多了浪费，少了又不够用。</li><li>另外一种方式是<strong>虚拟隔离</strong>，就是用我们常说的 <strong>VLAN，或者叫虚拟局域网</strong>。使用 VLAN，一个交换机上会连属于多个局域网的机器，那交换机怎么区分哪个机器属于哪个局域网呢？</li></ul><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411221537611.png" alt="image-20210411221537611"></p><p>我们只需要在原来的二层的头上加一个 TAG，里面有一个 VLAN ID，一共 12 位。为什么是 12 位呢？因为 12 位可以划分 4096 个 VLAN。这样是不是还不够啊。现在的情况证明，目前云计算厂商里面绝对不止 4096 个用户。当然每个用户需要一个 VLAN 了啊，怎么办呢，这个我们在后面的章节再说。</p><p>如果我们买的交换机是支持 VLAN 的，当这个交换机把二层的头取下来的时候，就能够识别这个 VLAN ID。这样只有相同 VLAN 的包，才会互相转发，不同 VLAN 的包，是看不到的。这样广播问题和安全问题就都能够解决了。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411221706542.png" alt="image-20210411221706542"></p><p>我们可以设置交换机每个口所属的 VLAN。如果某个口坐的是程序员，他们属于 VLAN 10；如果某个口坐的是人事，他们属于 VLAN 20；如果某个口坐的是财务，他们属于 VLAN 30。这样，财务发的包，交换机只会转发到 VLAN 30 的口上。程序员啊，你就监听 VLAN 10 吧，里面除了代码，啥都没有。</p><p>而且对于交换机来讲，每个 VLAN 的口都是可以重新设置的。一个财务走了，把他所在座位的口从 VLAN 30 移除掉，来了一个程序员，坐在财务的位置上，就把这个口设置为 VLAN 10，十分灵活。</p><p>有人会问交换机之间怎么连接呢？将两个交换机连接起来的口应该设置成什么 VLAN 呢？对于支持 VLAN 的交换机，有一种口叫作 <strong>Trunk 口</strong>。它可以转发属于任何 VLAN 的口。交换机之间可以通过这种口相互连接。</p><p>好了，解决这么多交换机连接在一起的问题，办公室的问题似乎搞定了。然而这只是一般复杂的场景，因为你能接触到的网络，到目前为止，不管是你的台式机，还是笔记本所连接的网络，对于带宽、高可用等都要求不高。就算出了问题，一会儿上不了网，也不会有什么大事。</p><p>我们在宿舍、学校或者办公室，经常会访问一些网站，这些网站似乎永远不会“挂掉”。那是因为这些网站都生活在一个叫做数据中心的地方，那里的网络世界更加复杂。在后面的章节，我会为你详细讲解。</p><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>好了，这节就到这里，我们这里来总结一下：</p><ul><li>当交换机的数目越来越多的时候，会遭遇环路问题，让网络包迷路，这就需要使用 STP 协议，通过华山论剑比武的方式，将有环路的图变成没有环路的树，从而解决环路问题。</li><li>交换机数目多会面临隔离问题，可以通过 VLAN 形成虚拟局域网，从而解决广播问题和安全问题。</li></ul><h2 id="7、思考问题？"><a href="#7、思考问题？" class="headerlink" title="7、思考问题？"></a>7、思考问题？</h2><p>1、STP 协议能够很好地解决环路问题，但是也有它的缺点，你能举几个例子吗？</p><p>答案：</p><ul><li>stp中如果有掌门死掉了，又得全部重选一次，用的时间比较长，期间网络就会中断的</li><li>stp中，一个是某个交换机状态发生变化的时候，整个树需要重新构建，另一个是被破开的环的链路被浪费了</li><li>STP 对于跨地域甚至跨国组织的网络支持，就很难做了，计算量摆着呢。</li></ul><p>STP 的主要问题在于，当拓扑发生变化，新的配置消息要经过一定的时延才能传播到整个网络。</p><p>由于整个交换网络只有一棵生成树，在网络规模比较大的时候会导致较长的收敛时间，拓扑改变的影响面也较大，当链路被阻塞后将不承载任何流量，造成了极大带宽浪费。</p><p>2、在一个比较大的网络中，如果两台机器不通，你知道应该用什么方式调试吗？</p><p>ping 加抓包工具，如 wireshark</p><p>3 、第一张图中，机器三是如何同时链接两台交换机？</p><p>作者回复: 赞，我以为不会有人问这个问题的，哈哈，老的局域网都是连到线上的，所以延续了这个图，为了准确，这里面中间的局域网可以认为是一个非直连的，例如中间隐藏了交换机等细节的，为了说明这个理论而简化。</p><p>（我也想到这个问题，想了一会就知道应该是集线器hub。上节课讲的宿舍里3台电脑用hub连接的例子。多个电脑组成一个lan。lan可能由多个hub口连接，其中两个hub再连接不同的交换机就行了。隐藏了hub）</p><p>4、图一和图二有点看不懂，图里的交换机和PC 是物理设备，这个LAN 是什么？不是应该交换机和PC 直接用一根线相连么？</p><p>作者回复: 这是个虚指的局域网，不一定直连，里面可以隐藏一些设备，例如hub，交换机</p><p>5、有一次办公室断网，排查时候发现路由器某一个部门的端口的灯在狂闪，拔掉后恢复正常。然后去那个部门排查才发现他们插错了口，形成了环路导致广播风暴。</p><p>6、每台交换机的武力值是什么样的？</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411223243174.png" alt="image-20210411223243174"></p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411223259387.png" alt="image-20210411223259387"></p><p>当一台交换机加入或者离开网络的时候，都会造成网络拓扑变化，这个时候检测到拓扑变化的网桥会通知根网桥，根网桥会通知所有的网桥拓扑发生变化。</p><p>网桥的 ID 是由网桥优先级和网桥 MAC 地址组成的，网桥 ID 最小的将成为网络中的根桥。默认配置下，网桥优先级都一样，默认优先级是 32768。这个时候 MAC 地址最小的网桥成为根网桥。但是如果你想设置某台为根网桥，就配置更小的优先级即可。</p><p>在优先级向量里面，Root Bridge ID 就是根网桥的 ID，Bridge ID 是网桥的 ID，Port ID 就是一个网桥上有多个端口，端口的 ID。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411223320044.png" alt="image-20210411223320044"></p><p>按照 RFC 的定义，ROOT PATH COST 是和出口带宽相关的，具体的数据如下：</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/d606b2c9f636ea3bc5694ac95d51f7b9.jpg" alt="img"></p><p>7、第一张图中，机器三是如何同时链接两台交换机的？图中的 LAN 指的是什么？</p><p>在这一节中，这两张图引起了困惑</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/a57a66bf97d326fd0b1355a0ba844e85.png" alt="img"></p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/92450a4c1d7f261a3fbf06a12d621d17.png" alt="img"></p><p>本来是为了讲二层的原理，做了个抽象的图，结果引起了大家的疑问，所以这里需要重新阐述一下。</p><p>首先，这里的 LAN1、LAN2、LAN 3 的说法的确不准确，因为通过网桥或者交换机连接，它们还是属于一个 LAN，其实这是三个物理网络，通过网桥或者交换机连接起来，形成一个二层的 LAN。</p><p>对于一层，也即物理层的设备，主要使用集线器（Hub），这里我们就用 Hub 将物理层连接起来。于是我新画了两个图。</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/ea499064396aa5078b9fe9cd5f4fcc48.png" alt="img"></p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/7d0ec3b857e7c85bba8aefc340a86ce5.png" alt="img"></p><p>在这里，我用 Hub 将不同的机器连接在一起，形成一个物理段，而非 LAN。</p><p>8、在 MAC 地址已经学习的情况下，ARP 会广播到没有 IP 的物理段吗？</p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411223722699.png" alt="image-20210411223722699"></p><p><img src="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/image-20210411223815819.png" alt="image-20210411223815819"></p><p>首先谢谢这两位同学指出错误，这里 ARP 的目标地址是广播的，所以无论是否进行地址学习，都会广播，而对于某个 MAC 的访问，在没有地址学习的时候，是转发到所有的端口的，学习之后，只会转发到有这个 MAC 的端口。</p><p>9、有些交换机的规格说明中说自己支持802.1Q VLAN 和 Port-based VLAN，这两个有什么区别？</p><p>所谓 Port-based VLAN，一般只在一台交换机上起作用，比如一台交换机，10 个口，1、3、5、7、9 属于 VLAN 10。1 发出的包，只有 3、5、7、9 能够收到，但是从这些口转发出去的包头中，并不带 VLAN ID。</p><p>而 802.1Q 的 VLAN，出了交换机也起作用，也就是说，一旦打上某个 VLAN，则出去的包都带这个 VLAN，也需要链路上的交换机能够识别这个 VLAN，进行转发。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从物理层到MAC层：如何在宿舍里自己组网玩联机游戏？</title>
      <link href="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/"/>
      <url>/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/</url>
      
        <content type="html"><![CDATA[<p>上一节，我们见证了 IP 地址的诞生，或者说是整个操作系统的诞生。一旦机器有了 IP，就 可以在网络的环境里和其他的机器展开沟通了。 </p><p>大学宿舍里。 我们宿舍四个人，大一的时候学校不让上网，不给开通网络。但是，宿舍有一个人比较有 钱，率先买了一台电脑。那买了电脑干什么呢？ </p><p>首先，有单机游戏可以打，比如说《拳皇》。两个人用一个键盘，照样打得火热。后来有第 二个人买了电脑，那两台电脑能不能连接起来呢？你会说，当然能啊，买个路由器不就行 了。 </p><p>现在一台家用路由器非常便宜，一百多块的事情。以前路由器绝对是奢侈品。一直到大四，我们宿舍都没有买路由器。可能是因为那时候技术没有现在这么发达，导致我对网络技 术的认知是逐渐深入的，而且每一层都是实实在在接触到的。 </p><h2 id="1、第一层（物理层）"><a href="#1、第一层（物理层）" class="headerlink" title="1、第一层（物理层）"></a>1、第一层（物理层）</h2><p>使用路由器，是在第三层上。我们先从第一层物理层开始说。 </p><p>物理层能折腾啥？现在的同学可能想不到，我们当时去学校配电脑的地方买网线，卖网线的师傅都会问，你的网线是要电脑连电脑啊，还是电脑连网口啊？ </p><p>我们要的是电脑连电脑。这种方式就是一根网线，有两个头。一头插在一台电脑的网卡上， 另一头插在另一台电脑的网卡上。但是在当时，普通的网线这样是通不了的，所以水晶头要 做交叉线，用的就是所谓的 1－3、2－6 交叉接法。</p><p>水晶头的第 1、2 和第 3、6 脚，它们分别起着收、发信号的作用。将一端的 1 号和 3 号 线、2 号和 6 号线互换一下位置，就能够在物理层实现一端发送的信号，另一端能收到。 </p><p>当然电脑连电脑，除了网线要交叉，还需要配置这两台电脑的 IP 地址、子网掩码和默认网 关。这三个概念上一节详细描述过了。要想两台电脑能够通信，这三项必须配置成为一个网 络，可以一个是 192.168.0.1/24，另一个是 192.168.0.2/24，否则是不通的。 </p><p>这里我想问你一个问题，两台电脑之间的网络包，包含 MAC 层吗？当然包含，要完整。IP 层要封装了 MAC 层才能将包放入物理层。 到此为止，两台电脑已经构成了一个最小的<strong>局域网，也即 LAN</strong>。可以玩联机局域网游戏啦！ </p><p>等到第三个哥们也买了一台电脑，怎么把三台电脑连在一起呢？ </p><p>先别说交换机，当时交换机也贵。有一个叫做 <strong>Hub</strong> 的东西，也就是<strong>集线器</strong>。这种设备有多 个口，可以将宿舍里的多台电脑连接起来。但是，和交换机不同，集线器没有大脑，它完全在物理层工作。它会将自己收到的每一个字节，都复制到其他端口上去。这是第一层物理层 联通的方案。</p><h2 id="2、第二层（数据链路层）"><a href="#2、第二层（数据链路层）" class="headerlink" title="2、第二层（数据链路层）"></a>2、第二层（数据链路层）</h2><p>你可能已经发现问题了。Hub 采取的是广播的模式，如果每一台电脑发出的包，宿舍的每个电脑都能收到，那就麻烦了。这就需要解决几个问题：</p><ol><li>这个包是发给谁的？谁应该接收？</li><li>大家都在发，会不会产生混乱？</li><li>有没有谁先发、谁后发的规则？如果发送的时候出现了错误，怎么办？</li></ol><p>这几个问题，都是第二层，数据链路层，也即 MAC 层要解决的问题。<strong>MAC 的全称是 Medium Access Control，即媒体访问控制。控制什么呢？其实就是控制在往媒体上发数据的时候，谁先发、谁后发的问题。防止发生混乱。这解决的是第二个问题。这个问题中的规则，学名叫多路访问。</strong>有很多算法可以解决这个问题。就像车管所管束马路上跑的车，能想的办法都想过了。</p><p>比如接下来这三种方式：</p><ul><li>方式一：分多个车道。每个车一个车道，你走你的，我走我的。这在计算机网络里叫作信道划分；</li><li>方式二：今天单号出行，明天双号出行，轮着来。这在计算机网络里叫作轮流协议；</li><li>方式三：不管三七二十一，有事儿先出门，发现特堵，就回去。错过高峰再出。我们叫作随机接入协议。著名的以太网，用的就是这个方式。</li></ul><p>解决了第二个问题，就是解决了媒体接入控制的问题，MAC 的问题也就解决好了。这和 MAC 地址没什么关系。</p><p>接下来要解决第一个问题：发给谁，谁接收？这里用到一个物理地址，叫作<strong>链路层地址。但是因为第二层主要解决媒体接入控制的问题，所以它常被称为MAC 地址</strong>。</p><p>解决第一个问题就牵扯到第二层的<strong>网络包格式</strong>。对于以太网，第二层的最开始，就是目标的 MAC 地址和源的 MAC 地址。</p><p><img src="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/8072e4885b0cbc6cb5384ea84d487e41.jpg" alt="img"></p><p>接下来是<strong>类型</strong>，大部分的类型是 IP 数据包，然后 IP 里面包含 TCP、UDP，以及 HTTP 等，这都是里层封装的事情。</p><p>有了这个目标 MAC 地址，数据包在链路上广播，MAC 的网卡才能发现，这个包是给它的。MAC 的网卡把包收进来，然后打开 IP 包，发现 IP 地址也是自己的，再打开 TCP 包，发现端口是自己，也就是 80，而 nginx 就是监听 80。于是将请求提交给 nginx，nginx 返回一个网页。然后将网页需要发回请求的机器。然后层层封装，最后到 MAC 层。因为来的时候有源 MAC 地址，返回的时候，源 MAC 就变成了目标 MAC，再返给请求的机器。</p><p>对于以太网，第二层的最后面是 <strong>CRC，也就是循环冗余检测</strong>。通过 XOR 异或的算法，来计算整个包是否在发送的过程中出现了错误，主要解决第三个问题。</p><p>这里还有一个没有解决的问题，当源机器知道目标机器的时候，可以将目标地址放入包里面，如果不知道呢？一个广播的网络里面接入了 N 台机器，我怎么知道每个 MAC 地址是谁呢？这就是 <strong>ARP 协议</strong>，也就是已知 IP 地址，求 MAC 地址的协议。</p><p><img src="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/image-20210411205249396.png" alt="image-20210411205249396"></p><p>在一个局域网里面，当知道了 IP 地址，不知道 MAC 怎么办呢？靠“吼”。</p><p><img src="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/image-20210411205339891.png" alt="image-20210411205339891"></p><p>广而告之，发送一个广播包，谁是这个 IP 谁来回答。具体询问和回答的报文就像下面这样：</p><p><img src="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/image-20210411210223895.png" alt="image-20210411210223895"></p><p>为了避免每次都用 ARP 请求，机器本地也会进行 ARP 缓存。当然机器会不断地上线下线，IP 也可能会变，所以 ARP 的 MAC 地址缓存过一段时间就会过期。</p><h2 id="3、局域网"><a href="#3、局域网" class="headerlink" title="3、局域网"></a>3、局域网</h2><p>好了，至此我们宿舍四个电脑就组成了一个局域网。用 Hub 连接起来，就可以玩局域网版的《魔兽争霸》了。</p><p><img src="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/33d180e376439ca10e3f126eb2e36bac.jpg" alt="img"></p><p>打开游戏，进入“局域网选项”，选择一张地图，点击“创建游戏”，就可以进入这张地图的房间中。等同一个局域网里的其他小伙伴加入后，游戏就可以开始了。</p><p>这种组网的方法，对一个宿舍来说没有问题，但是一旦机器数目增多，问题就出现了。因为 Hub 是广播的，不管某个接口是否需要，所有的 Bit 都会被发送出去，然后让主机来判断是不是需要。这种方式路上的车少就没问题，车一多，产生冲突的概率就提高了。而且把不需要的包转发过去，纯属浪费。看来 Hub 这种不管三七二十一都转发的设备是不行了，需要点儿智能的。因为每个口都只连接一台电脑，这台电脑又不怎么换 IP 和 MAC 地址，只要记住这台电脑的 MAC 地址，如果目标 MAC 地址不是这台电脑的，这个口就不用转发了。</p><p>谁能知道目标 MAC 地址是否就是连接某个口的电脑的 MAC 地址呢？这就需要一个能把 MAC 头拿下来，检查一下目标 MAC 地址，然后<strong>根据策略转发的设备</strong>，按第二节课中讲过的，这个设备显然是个二层设备，我们称为<strong>交换机</strong>。</p><p>交换机怎么知道每个口的电脑的 MAC 地址呢？这需要交换机会学习。</p><p>一台 MAC1 电脑将一个包发送给另一台 MAC2 电脑，当这个包到达交换机的时候，一开始交换机也不知道 MAC2 的电脑在哪个口，所以没办法，它只能将包转发给除了来的那个口之外的其他所有的口。但是，这个时候，交换机会干一件非常聪明的事情，就是交换机会记住，MAC1 是来自一个明确的口。以后有包的目的地址是 MAC1 的，直接发送到这个口就可以了。</p><p>当交换机作为一个关卡一样，过了一段时间之后，就有了整个网络的一个结构了，这个时候，基本上不用广播了，全部可以准确转发。当然，每个机器的 IP 地址会变，所在的口也会变，因而交换机上的学习的结果，我们称为<strong>转发表</strong>，是有一个过期时间的。</p><p>有了交换机，一般来说，你接个几十台、上百台机器打游戏，应该没啥问题。你可以组个战队了。能上网了，就可以玩网游了。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>好了，今天的内容差不多了，我们来总结一下，有三个重点需要你记住：</p><ul><li>第一，MAC 层是用来解决多路访问的堵车问题的；</li><li>第二，ARP 是通过吼的方式来寻找目标 MAC 地址的，吼完之后记住一段时间，这个叫作缓存；</li><li>第三，交换机是有 MAC 地址学习能力的，学完了它就知道谁在哪儿了，不用广播了。</li></ul><h2 id="5、思考问题？"><a href="#5、思考问题？" class="headerlink" title="5、思考问题？"></a>5、思考问题？</h2><p>1、在二层中我们讲了 ARP 协议，即已知 IP 地址求 MAC；还有一种 RARP 协议，即已知 MAC 求 IP 的，你知道它可以用来干什么吗？</p><p>答案：</p><p>之前有无盘工作站，即没有硬盘的机器，无法持久化ip地址到本地，但有网卡，所以可以用RARP协议来获取IP地址。RARP可以用于局域网管理员想指定机器IP（与机器绑定，不可变），又不想每台机器去设置静态IP的情况，可以在RARP服务器上配置MAC和IP对应的ARP表，不过获取每台机器的MAC地址，好像也挺麻烦的。这个协议现在应该用得不多了吧，都用BOOTP或者DHCP了。</p><p>2、如果一个局域网里面有多个交换机，ARP 广播的模式会出现什么问题呢？</p><p>环路的问题:</p><p>ARP广播时，交换机会将一个端口收到的包转发到其它所有的端口上。比如数据包经过交换机A到达交换机B，交换机B又将包复制为多份广播出去。<br>如果整个局域网存在一个环路，使得数据包又重新回到了最开始的交换机A，这个包又会被A再次复制多份广播出去。如此循环，数据包会不停得转发，而且越来越多，最终占满带宽，或者使解析协议的硬件过载，行成广播风暴。</p><p>问题和解决方案:</p><p>Hub：<br>1.一个广播域，一个冲突域。<br>2.传输数据的过程中易产生冲突，带宽利用率不高<br>Switch：<br>1.在划分vlan的前提下可以实现多个广播域，每个接口都是一个单独的冲突域<br>2.通过自我学习的方法可以构建出CAM表，并基于CAM进行转发数据。<br>3.支持生成树算法。可以构建出物理有环，逻辑无环的网络，网络冗余和数据传输效率都甩Hub好几条街。SW是目前组网的基本设备之一。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP与PXE：IP是怎么来的，又是怎么没的？</title>
      <link href="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/"/>
      <url>/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/</url>
      
        <content type="html"><![CDATA[<p>上一节，我们讲了 IP 的一些基本概念。如果需要和其他机器通讯，我们就需要一个通讯地址，我们需要给网卡配置这么一个地址。</p><h2 id="1、如何配置-IP-地址？"><a href="#1、如何配置-IP-地址？" class="headerlink" title="1、如何配置 IP 地址？"></a>1、如何配置 IP 地址？</h2><p>那如何配置呢？如果有相关的知识和积累，你可以用命令行自己配置一个地址。可以使用 ifconfig，也可以使用 ip addr。设置好了以后，用这两个命令，将网卡 up 一下，就可以开始工作了。</p><ul><li><p>使用 net-tools：</p><pre><code>$ sudo ifconfig eth1 10.0.0.1/24$ sudo ifconfig eth1 up</code></pre></li><li><p>使用 iproute2：</p><pre><code>$ sudo ip addr add 10.0.0.1/24 dev eth1$ sudo ip link set up eth1</code></pre></li></ul><p>你可能会问了，自己配置这个自由度太大了吧，我是不是配置什么都可以？如果配置一个和谁都不搭边的地址呢？例如，旁边的机器都是 192.168.1.x，我非得配置一个 16.158.23.6，会出现什么现象呢？</p><p>不会出现任何现象，就是包发不出去呗。为什么发不出去呢？我来举例说明。</p><p>192.168.1.6 就在你这台机器的旁边，甚至是在同一个交换机上，而你把机器的地址设为了 16.158.23.6。在这台机器上，你企图去 ping 192.168.1.6，你觉得只要将包发出去，同一个交换机的另一台机器马上就能收到，对不对？可是 Linux 系统不是这样的，它没你想的那么智能。你用肉眼看到那台机器就在旁边，它则需要根据自己的逻辑进行处理。</p><p>还记得我们在第二节说过的原则吗？<strong>只要是在网络上跑的包，都是完整的，可以有下层没上层，绝对不可能有上层没下层</strong>。所以，你看着它有自己的源 IP 地址 16.158.23.6，也有目标 IP 地址 192.168.1.6，但是包发不出去，这是因为 MAC 层还没填。</p><p>自己的 MAC 地址自己知道，这个容易。但是目标 MAC 填什么呢？是不是填 192.168.1.6 这台机器的 MAC 地址呢？当然不是。Linux 首先会判断，要去的这个地址和我是一个网段的吗，或者和我的一个网卡是同一网段的吗？只有是一个网段的，它才会发送 ARP 请求，获取 MAC 地址。如果发现不是呢？</p><p><strong>Linux 默认的逻辑是，如果这是一个跨网段的调用，它便不会直接将包发送到网络上，而是企图将包发送到网关。</strong></p><p>如果你配置了网关的话，Linux 会获取网关的 MAC 地址，然后将包发出去。对于 192.168.1.6 这台机器来讲，虽然路过它家门的这个包，目标 IP 是它，但是无奈 MAC 地址不是它的，所以它的网卡是不会把包收进去的。</p><p>如果没有配置网关呢？那包压根就发不出去。如果将网关配置为 192.168.1.6 呢？不可能，Linux 不会让你配置成功的，因为网关要和当前的网络至少一个网卡是同一个网段的，怎么可能 16.158.23.6 的网关是 192.168.1.6 呢？</p><p>所以，当你需要手动配置一台机器的网络 IP 时，一定要好好问问你的网络管理员。如果在机房里面，要去网络管理员那里申请，让他给你分配一段正确的 IP 地址。当然，真正配置的时候，一定不是直接用命令配置的，而是放在一个配置文件里面。<strong>不同系统的配置文件格式不同，但是无非就是 CIDR、子网掩码、广播地址和网关地址。</strong></p><h2 id="2、动态主机配置协议（DHCP）"><a href="#2、动态主机配置协议（DHCP）" class="headerlink" title="2、动态主机配置协议（DHCP）"></a>2、动态主机配置协议（DHCP）</h2><p>原来配置 IP 有这么多门道儿啊。你可能会问了，配置了 IP 之后一般不能变的，配置一个服务端的机器还可以，但是如果是客户端的机器呢？我抱着一台笔记本电脑在公司里走来走去，或者白天来晚上走，每次使用都要配置 IP 地址，那可怎么办？还有人事、行政等非技术人员，如果公司所有的电脑都需要 IT 人员配置，肯定忙不过来啊。</p><p>因此，我们需要有一个自动配置的协议，也就是<strong>动态主机配置协议（Dynamic Host Configuration Protocol），简称 DHCP</strong>。</p><p>有了这个协议，网络管理员就轻松多了。他只需要配置一段共享的 IP 地址。每一台新接入的机器都通过 DHCP 协议，来这个共享的 IP 地址里申请，然后自动配置好就可以了。等人走了，或者用完了，还回去，这样其他的机器也能用。所以说，<strong>如果是数据中心里面的服务器，IP 一旦配置好，基本不会变，这就相当于买房自己装修。DHCP 的方式就相当于租房。你不用装修，都是帮你配置好的。你暂时用一下，用完退租就可以了。</strong></p><h2 id="3、解析-DHCP-的工作方式"><a href="#3、解析-DHCP-的工作方式" class="headerlink" title="3、解析 DHCP 的工作方式"></a>3、解析 DHCP 的工作方式</h2><p>当一台机器新加入一个网络的时候，肯定一脸懵，啥情况都不知道，只知道自己的 MAC 地址。怎么办？先吼一句，我来啦，有人吗？这时候的沟通基本靠“吼”。这一步，我们称为 <strong>DHCP Discover</strong>。</p><p>新来的机器使用 IP 地址 0.0.0.0 发送了一个广播包，目的 IP 地址为 255.255.255.255。广播包封装了 UDP，UDP 封装了 BOOTP。其实 DHCP 是 BOOTP 的增强版，但是如果你去抓包的话，很可能看到的名称还是 BOOTP 协议。</p><p>在这个广播包里面，新人大声喊：我是新来的（Boot request），我的 MAC 地址是这个，我还没有 IP，谁能给租给我个 IP 地址！格式就像这样：</p><p><img src="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/image-20210407142644125.png" alt="image-20210407142644125"></p><p>如果一个网络管理员在网络里面配置了 <strong>DHCP Server</strong> 的话，他就相当于这些 IP 的管理员。他立刻能知道来了一个“新人”。这个时候，我们可以体会 MAC 地址唯一的重要性了。当一台机器带着自己的 MAC 地址加入一个网络的时候，MAC 是它唯一的身份，如果连这个都重复了，就没办法配置了。</p><p>只有 MAC 唯一，IP 管理员才能知道这是一个新人，需要租给它一个 IP 地址，这个过程我们称为 <strong>DHCP Offer</strong>。同时，DHCP Server 为此客户保留为它提供的 IP 地址，从而不会为其他 DHCP 客户分配此 IP 地址。</p><p>DHCP Offer 的格式就像这样，里面有给新人分配的地址。</p><p><img src="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/image-20210407142754550.png" alt="image-20210407142754550"></p><p>DHCP Server 仍然使用广播地址作为目的地址，因为，此时请求分配 IP 的新人还没有自己的 IP。DHCP Server 回复说，我分配了一个可用的 IP 给你，你看如何？除此之外，服务器还发送了子网掩码、网关和 IP 地址租用期等信息。</p><p>新来的机器很开心，它的“吼”得到了回复，并且有人愿意租给它一个 IP 地址了，这意味着它可以在网络上立足了。当然更令人开心的是，如果有多个 DHCP Server，这台新机器会收到多个 IP 地址，简直受宠若惊。</p><p>它会选择其中一个 DHCP Offer，一般是最先到达的那个，并且会向网络发送一个 DHCP Request 广播数据包，包中包含客户端的 MAC 地址、接受的租约中的 IP 地址、提供此租约的 DHCP 服务器地址等，并告诉所有 DHCP Server 它将接受哪一台服务器提供的 IP 地址，告诉其他 DHCP 服务器，谢谢你们的接纳，并请求撤销它们提供的 IP 地址，以便提供给下一个 IP 租用请求者。</p><p><img src="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/image-20210407142907711.png" alt="image-20210407142907711"></p><p>此时，由于还没有得到 DHCP Server 的最后确认，客户端仍然使用 0.0.0.0 为源 IP 地址、255.255.255.255 为目标地址进行广播。在 BOOTP 里面，接受某个 DHCP Server 的分配的 IP。</p><p>当 DHCP Server 接收到客户机的 DHCP request 之后，会广播返回给客户机一个 DHCP ACK 消息包，表明已经接受客户机的选择，并将这一 IP 地址的合法租用信息和其他的配置信息都放入该广播包，发给客户机，欢迎它加入网络大家庭。</p><p><img src="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/image-20210407142949676.png" alt="image-20210407142949676"></p><p>最终租约达成的时候，还是需要广播一下，让大家都知道。</p><h2 id="4、IP-地址的收回和续租"><a href="#4、IP-地址的收回和续租" class="headerlink" title="4、IP 地址的收回和续租"></a>4、IP 地址的收回和续租</h2><p>既然是租房子，就是有租期的。租期到了，管理员就要将 IP 收回。如果不用的话，收回就收回了。就像你租房子一样，如果还要续租的话，不能到了时间再续租，而是要提前一段时间给房东说。DHCP 也是这样。</p><p>客户机会在租期过去 50% 的时候，直接向为其提供 IP 地址的 DHCP Server 发送 DHCP request 消息包。客户机接收到该服务器回应的 DHCP ACK 消息包，会根据包中所提供的新的租期以及其他已经更新的 TCP/IP 参数，更新自己的配置。这样，IP 租用更新就完成了。</p><p>好了，一切看起来完美。DHCP 协议大部分人都知道，但是其实里面隐藏着一个细节，很多人可能不会去注意。接下来，我就讲一个有意思的事情：网络管理员不仅能自动分配 IP 地址，还能帮你自动安装操作系统！</p><h2 id="5、预启动执行环境（PXE）"><a href="#5、预启动执行环境（PXE）" class="headerlink" title="5、预启动执行环境（PXE）"></a>5、预启动执行环境（PXE）</h2><p>普通的笔记本电脑，一般不会有这种需求。因为你拿到电脑时，就已经有操作系统了，即便你自己重装操作系统，也不是很麻烦的事情。但是，在数据中心里就不一样了。数据中心里面的管理员可能一下子就拿到几百台空的机器，一个个安装操作系统，会累死的。</p><p>所以管理员希望的不仅仅是自动分配 IP 地址，还要自动安装系统。装好系统之后自动分配 IP 地址，直接启动就能用了，这样当然最好了！</p><p>这事儿其实仔细一想，还是挺有难度的。安装操作系统，应该有个光盘吧。数据中心里不能用光盘吧，想了一个办法就是，可以将光盘里面要安装的操作系统放在一个服务器上，让客户端去下载。但是客户端放在哪里呢？它怎么知道去哪个服务器上下载呢？客户端总得安装在一个操作系统上呀，可是这个客户端本来就是用来安装操作系统的呀？</p><p>其实，这个过程和操作系统启动的过程有点儿像。首先，启动 BIOS。这是一个特别小的小系统，只能干特别小的一件事情。其实就是读取硬盘的 MBR 启动扇区，将 GRUB 启动起来；然后将权力交给 GRUB，GRUB 加载内核、加载作为根文件系统的 initramfs 文件；然后将权力交给内核；最后内核启动，初始化整个操作系统。</p><p>那我们安装操作系统的过程，只能插在 BIOS 启动之后了。因为没安装系统之前，连启动扇区都没有。因而这个过程叫做<strong>预启动执行环境（Pre-boot Execution Environment），简称 PXE</strong>。</p><p>PXE 协议分为客户端和服务器端，由于还没有操作系统，只能先把客户端放在 BIOS 里面。当计算机启动时，BIOS 把 PXE 客户端调入内存里面，就可以连接到服务端做一些操作了。</p><p>首先，PXE 客户端自己也需要有个 IP 地址。因为 PXE 的客户端启动起来，就可以发送一个 DHCP 的请求，让 DHCP Server 给它分配一个地址。PXE 客户端有了自己的地址，那它怎么知道 PXE 服务器在哪里呢？对于其他的协议，都好办，要有人告诉他。例如，告诉浏览器要访问的 IP 地址，或者在配置中告诉它；例如，微服务之间的相互调用。</p><p>但是 PXE 客户端启动的时候，啥都没有。好在 DHCP Server 除了分配 IP 地址以外，还可以做一些其他的事情。这里有一个 DHCP Server 的一个样例配置：</p><pre><code>ddns-update-style interim;ignore client-updates;allow booting;allow bootp;subnet 192.168.1.0 netmask 255.255.255.0{option routers 192.168.1.1;option subnet-mask 255.255.255.0;option time-offset -18000;default-lease-time 21600;max-lease-time 43200;range dynamic-bootp 192.168.1.240 192.168.1.250;filename &quot;pxelinux.0&quot;;next-server 192.168.1.180;}dhcp配置文件简单说明： ddns-update-style interim：动态dns的更新方式 ignore client-updates: 忽略客户端更新 subnet 192.168.134.0 netmask 255.255.255.0：子网信息，定义IP地址池，可以分配多个 option routers：默认网关地址 option subnet-mask：子网掩码 option domain-name：域名，搜索域 option domain-name-servers：dns服务器地址，多个使用“,”隔开，对于linux而言最多三个 range: 指定地址池可分配地址范围 default-lease-time：默认租约长度 max-lease-time：最大租约长度 host：定义保留地址</code></pre><p>按照上面的原理，默认的 DHCP Server 是需要配置的，无非是我们配置 IP 的时候所需要的 IP 地址段、子网掩码、网关地址、租期等。如果想使用 PXE，则需要配置 next-server，指向 PXE 服务器的地址，另外要配置初始启动文件 filename。(PXE能用的关键，就是DHCP 不仅能提供IP，还可以提供一些初始化最初的一些文件，方便这个新机器做一些事情，比如安装系统。 过程中还需要有一个支持新机器需下载的地方，就是TFTP服务器，去下载linux相关信息等。)</p><p>这样 PXE 客户端启动之后，发送 DHCP 请求之后，除了能得到一个 IP 地址，还可以知道 PXE 服务器在哪里，也可以知道如何从 PXE 服务器上下载某个文件，去初始化操作系统。</p><h2 id="5、解析-PXE-的工作过程"><a href="#5、解析-PXE-的工作过程" class="headerlink" title="5、解析 PXE 的工作过程"></a>5、解析 PXE 的工作过程</h2><p>接下来我们来详细看一下 PXE 的工作过程。</p><ul><li>首先，启动 PXE 客户端。第一步是通过 DHCP 协议告诉 DHCP Server，我刚来，一穷二白，啥都没有。DHCP Server 便租给它一个 IP 地址，同时也给它 PXE 服务器的地址、启动文件 pxelinux.0。</li><li>其次，PXE 客户端知道要去 PXE 服务器下载这个文件后，就可以初始化机器。于是便开始下载，下载的时候使用的是 TFTP 协议。所以 PXE 服务器上，往往还需要有一个 TFTP 服务器。PXE 客户端向 TFTP 服务器请求下载这个文件，TFTP 服务器说好啊，于是就将这个文件传给它。</li><li>然后，PXE 客户端收到这个文件后，就开始执行这个文件。这个文件会指示 PXE 客户端，向 TFTP 服务器请求计算机的配置信息 pxelinux.cfg。TFTP 服务器会给 PXE 客户端一个配置文件，里面会说内核在哪里、initramfs 在哪里。PXE 客户端会请求这些文件。</li><li>最后，启动 Linux 内核。一旦启动了操作系统，以后就啥都好办了。</li></ul><p><img src="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/bbc2b660bba0ad00b5d1179db158498e.jpg" alt="img"></p><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>好了，这一节就到这里了。我来总结一下今天的内容：</p><ul><li>DHCP 协议主要是用来给客户租用 IP 地址，和房产中介很像，要商谈、签约、续租，广播还不能“抢单”；(DHCP协议的主要目的就是给新加入网络的机器分配IP地址用的。 DHCP协议只是将IP地址租给新加入网络的机器，等租期到了，DHCP Server 会将IP地址回收，然后此IP地址就有可能分发给新加入该网络的其他机器。)</li><li>DHCP 协议能给客户推荐“装修队”PXE，能够安装操作系统，这个在云计算领域大有用处。(DHCP协议能给机器推荐“装修队PXE”,这个PXE协议就是通过网络来安装操作系统的。 DHCP协议+ PXE 协议 这两个协议在云计算领域大有用处，可以在通过DHCP协议分配IP地址的时候，顺便把机器的操作系统给装了。特别的省时省力。)</li></ul><h2 id="7、思考问题？"><a href="#7、思考问题？" class="headerlink" title="7、思考问题？"></a>7、思考问题？</h2><p>1、PXE 协议可以用来安装操作系统，但是如果每次重启都安装操作系统，就会很麻烦。你知道如何使得第一次安装操作系统，后面就正常启动吗？</p><p>答案：</p><p>现在一般电脑的网卡几乎都支持PXE启动， PXE client 就在网卡的 ROM 中，当计算机引导时，BIOS 把 PXE client 调入内存执行。 安装完成后，将提示重新引导计算机。这个时候，在重新引导的过程中将BIOS修改回从硬盘启动就可以了。 2,进入BIOS设置页面，有一项PXE Boot to LAN，若设置为Enabled则表示计算机从网络启动，从PXE服务端下载配置文件和操作系统内核进行启动；若设置为Disabled则表示从本地启动，启动动BIOS后，会去寻找启动扇区，如果没有安装操作系统，就会找不到启动扇区，这个时候就启动不起来。</p><p>2、在DHCP网络里面，手动配置IP地址会冲突吗？(如果我手动配置了一个IP，dhcp Server会知道这个信息并不再分配这个IP吗？会的话具体怎样交互的呢？)</p><p>最近做了一些测试，测试内容是：在局域网内伪造了一个DHCP Server，发现新接入的电脑，主动广播Offer告知新电脑使用被分配出去的IP地址，测试发现如果那个已经被分配的IP的那台电脑是dhcp获取形式，新电脑很容易就把这个IP抢夺过来使用了！(两边都会提示ip冲突)，如果它是手动配置的IP，就没有办法抢夺多来使用，但是新电脑是不是有一瞬间可以使用，另外一台电脑有丢包的情况！那么DHCP或者系统是否有这个机制，当出现IP冲突的时候，主动发起新的IP申请，更换IP以解决冲突问题？这个机制或这类现象如何解释呢？</p><p>答案：</p><p>在一个 DHCP 网络里面，如果某一台机器手动配置了一个 IP 地址，并且在 DHCP 管理的网段里的话，DHCP 服务器是会将这个地址分配给其他机器的。一旦分配了，ARP 的时候，就会收到两个应答，IP 地址就冲突了。</p><p>当发生这种情况的时候，应该怎么办呢？DHCP 的过程虽然没有明确如何处理，但是 DHCP 的客户端和服务器都可以添加相应的机制来检测冲突。</p><ul><li>如果由客户端来检测冲突，一般情况是，客户端在接受分配的 IP 之前，先发送一个 ARP，看是否有应答，有就说明冲突了，于是发送一个 DHCPDECLINE，放弃这个 IP 地址。</li><li>如果由服务器来检测冲突，DHCP 服务器会发送 ping，来看某个 IP 是否已经被使用。如果被使用了，它就不再将这个 IP 分配给其他的客户端了。</li></ul><p>3、DHCP 的 Offer 和 ACK 应该是单播还是广播呢？</p><p>答案：</p><p>这个我们来看<a href="http://www.faqs.org/rfcs/rfc2131.html" target="_blank" rel="noopener">DHCP 的 RFC</a>，我截了个图放在这儿：</p><p><img src="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/5ba44ea86352594b78c30ce75cc123ba.jpg" alt="img"></p><p>这里面说了几个问题。</p><p>正常情况下，一旦有了 IP 地址，DHCP Server 还是希望通过单播的方式发送 OFFER 和 ACK。但是不幸的是，有的客户端协议栈的实现，如果还没有配置 IP 地址，就使用单播。协议栈是不接收这个包的，因为 OFFER 和 ACK 的时候，IP 地址还没有配置到网卡上。</p><p>所以，一切取决于客户端的协议栈的能力，如果没配置好 IP，就不能接收单播的包，那就将 BROADCAST 设为 1，以广播的形式进行交互。</p><p>如果客户端的协议栈实现很厉害，即便是没有配置好 IP，仍然能够接受单播的包，那就将 BROADCAST 位设置为 0，就以单播的形式交互。</p><p>4、DHCP 如何解决内网安全问题(内网地址的信任问题)？</p><p>答案：</p><p>其实 DHCP 协议的设计是基于内网互信的基础来设计的，而且是基于 UDP 协议。但是这里面的确是有风险的。例如一个普通用户无意地或者恶意地安装一台 DHCP 服务器，发放一些错误或者冲突的配置；再如，有恶意的用户发出很多的 DHCP 请求，让 DHCP 服务器给他分配大量的 IP。</p><ul><li>对于第一种情况，DHCP 服务器和二层网络都是由网管管理的，可以在交换机配置只有来自某个 DHCP 服务器的包才是可信的，其他全部丢弃。如果有 SDN，或者在云中，非法的 DHCP 包根本就拦截到虚拟机或者物理机的出口。</li><li>对于第二种情况，一方面进行监控，对 DHCP 报文进行限速，并且异常的端口可以关闭，一方面还是 SDN 或者在云中，除了被 SDN 管控端登记过的 IP 和 MAC 地址，其他的地址是不允许出现在虚拟机和物理机出口的，也就无法模拟大量的客户端。</li></ul><p>8、老师，你好~MAC地址是网络生产商写在网卡上的，相当于是写死的。但是iproute2里有命令可以修改网卡的MAC地址，是不是只有虚拟机上的系统的网卡可以修改，而物理网卡的MAC地址是不能修改的？</p><p>作者回复: 物理网卡可以改，但改的是系统里面的，不是硬件里面的</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查看ip地址？</title>
      <link href="/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/"/>
      <url>/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/</url>
      
        <content type="html"><![CDATA[<p>上一节结尾给你留的一个思考题是，你知道怎么查看 IP 地址吗？</p><p>当面试听到这个问题的时候，面试者常常会觉得走错了房间。我面试的是技术岗位啊，怎么问这么简单的问题？的确，即便没有专业学过计算机的人，只要倒腾过电脑，重装过系统，大多也会知道这个问题的答案：在 Windows 上是 ipconfig，在 Linux 上是 ifconfig。</p><p>那你知道在 Linux 上还有什么其他命令可以查看 IP 地址吗？答案是 ip addr。如果回答不上来这个问题，那你可能没怎么用过 Linux。</p><h2 id="1、ifconfig-和-ip-addr-的区别？"><a href="#1、ifconfig-和-ip-addr-的区别？" class="headerlink" title="1、ifconfig 和 ip addr 的区别？"></a>1、ifconfig 和 ip addr 的区别？</h2><p>你知道 ifconfig 和 ip addr 的区别吗？这是一个有关 net-tools 和 iproute2 的“历史”故事，这里暂时不用了解这么细，但这也是一个常考的知识点。</p><p>想象一下，你登录进入一个被裁剪过的非常小的 Linux 系统中，发现既没有 ifconfig 命令，也没有 ip addr 命令，你是不是感觉这个系统压根儿没法用？这个时候，你可以自行安装 net-tools 和 iproute2 这两个工具。当然，大多数时候这两个命令是系统自带的。安装好后，我们来运行一下 ip addr。不出意外，应该会输出下面的内容。</p><p><img src="/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/image-20210407102348854.png" alt="image-20210407102348854"></p><p>这个命令显示了这台机器上所有的网卡。大部分的网卡都会有一个 IP 地址，当然，这不是必须的。在后面的分享中，我们会遇到没有 IP 地址的情况。</p><p>IP 地址是一个网卡在网络世界的通讯地址，相当于我们现实世界的门牌号码。既然是门牌号码，不能大家都一样，不然就会起冲突。比方说，假如大家都叫六单元 1001 号，那快递就找不到地方了。所以，有时候咱们的电脑弹出网络地址冲突，出现上不去网的情况，多半是 IP 地址冲突了。</p><p>如上输出的结果，10.3.10.77 就是一个 IP 地址。这个地址被点分隔为四个部分，每个部分 8 个 bit，所以 IP 地址总共是 32 位。这样产生的 IP 地址的数量很快就不够用了。因为当时设计 IP 地址的时候，哪知道今天会有这么多的计算机啊！因为不够用，于是就有了 IPv6，也就是上面输出结果里面 inet6 fe80::2cf6:3bff:fe7b:3d94/64。这个有 128 位，现在看来是够了，但是未来的事情谁知道呢？</p><h2 id="2、IP地址的分类"><a href="#2、IP地址的分类" class="headerlink" title="2、IP地址的分类"></a>2、IP地址的分类</h2><p>本来 32 位的 IP 地址就不够，还被分成了 5 类。现在想想，当时分配地址的时候，真是太奢侈了。</p><p><img src="/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/image-20210407103031588.png" alt="image-20210407103031588"></p><p>在网络地址中，至少在当时设计的时候，对于 A、B、 C 类主要分两部分，前面一部分是网络号，后面一部分是主机号。这很好理解，大家都是六单元 1001 号，我是小区 A 的六单元 1001 号，而你是小区 B 的六单元 1001 号。</p><p>下面这个表格，详细地展示了 A、B、C 三类地址所能包含的主机的数量。在后文中，我也会多次借助这个表格来讲解。</p><p><img src="/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/image-20210407103124262.png" alt="image-20210407103124262"></p><p>这里面有个尴尬的事情，就是 C 类地址能包含的最大主机数量实在太少了，只有 254 个。当时设计的时候恐怕没想到，现在估计一个网吧都不够用吧。而 B 类地址能包含的最大主机数量又太多了。6 万多台机器放在一个网络下面，一般的企业基本达不到这个规模，闲着的地址就是浪费。</p><h2 id="3、-无类型域间选路（CIDR）"><a href="#3、-无类型域间选路（CIDR）" class="headerlink" title="3、 无类型域间选路（CIDR）"></a>3、 无类型域间选路（CIDR）</h2><p>于是有了一个折中的方式叫作<strong>无类型域间选路，简称 CIDR</strong>。这种方式打破了原来设计的几类地址的做法，将 32 位的 IP 地址一分为二，<strong>前面是网络号，后面是主机号</strong>。从哪里分呢？你如果注意观察的话可以看到，10.100.122.2/24，这个 IP 地址中有一个斜杠，斜杠后面有个数字 24。这种地址表示形式，就是 CIDR。后面 24 的意思是，32 位中，前 24 位是网络号，后 8 位是主机号。</p><p>伴随着 CIDR 存在的：</p><ul><li>一个是<strong>广播地址</strong>，10.100.122.255。如果发送这个地址，所有 10.100.122 网络里面的机器都可以收到。</li><li>另一个是<strong>子网掩码</strong>，255.255.255.0。</li></ul><p>网络号：前24位是网络号，即10.100.122</p><p>主机号：后8位是主机号，即2</p><h2 id="4、公有-IP-地址和私有-IP-地址"><a href="#4、公有-IP-地址和私有-IP-地址" class="headerlink" title="4、公有 IP 地址和私有 IP 地址"></a>4、公有 IP 地址和私有 IP 地址</h2><p>在日常的工作中，几乎不用划分 A 类、B 类或者 C 类，所以时间长了，很多人就忘记了这个分类，而只记得 CIDR。但是有一点还是要注意的，就是公有 IP 地址和私有 IP 地址。</p><p><img src="/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/image-20210407103739750.png" alt="image-20210407103739750"></p><p>我们继续看上面的表格。表格最右列是<strong>私有 IP 地址</strong>段。平时我们看到的数据中心里，办公室、家里或学校的 IP 地址，一般都是私有 IP 地址段。因为这些地址允许组织内部的 IT 人员自己管理、自己分配，而且可以重复。因此，你学校的某个私有 IP 地址段和我学校的可以是一样的。</p><p>这就像每个小区有自己的楼编号和门牌号，你们小区可以叫 6 栋，我们小区也叫 6 栋，没有任何问题。但是一旦出了小区，就需要使用公有 IP 地址。就像人民路 888 号，是国家统一分配的，不能两个小区都叫人民路 888 号。</p><p><strong>公有 IP 地址</strong>有个组织统一分配，你需要去买。如果你搭建一个网站，给你学校的人使用，让你们学校的 IT 人员给你一个 IP 地址就行。但是假如你要做一个类似网易 163 这样的网站，就需要有公有 IP 地址，这样全世界的人才能访问。</p><p>表格中的 192.168.0.x 是最常用的私有 IP 地址。你家里有 Wi-Fi，对应就会有一个 IP 地址。一般你家里地上网设备不会超过 256 个，所以 /24 基本就够了。有时候我们也能见到 /16 的 CIDR，这两种是最常见的，也是最容易理解的。</p><p>不需要将十进制转换为二进制 32 位，就能明显看出 192.168.0 是网络号，后面是主机号。而整个网络里面的第一个地址 192.168.0.1，往往就是你这个私有网络的出口地址。例如，你家里的电脑连接 Wi-Fi，Wi-Fi 路由器的地址就是 192.168.0.1，而 192.168.0.255 就是广播地址。一旦发送这个地址，整个 192.168.0 网络里面的所有机器都能收到。</p><p>但是也不总都是这样的情况。因此，其他情况往往就会很难理解，还容易出错。</p><p><strong>举例：一个容易“犯错”的 CIDR</strong></p><p>我们来看 16.158.165.91/22 这个 CIDR。求一下这个网络的第一个地址、子网掩码和广播地址。</p><p>你要是上来就写 16.158.165.1，那就大错特错了。/22 不是 8 的整数倍，不好办，只能先变成二进制来看。16.158 的部分不会动，它占了前 16 位。中间的 165，变为二进制为‭10100101‬。除了前面的 16 位，还剩 6 位。所以，这 8 位中前 6 位是网络号，16.158.&lt;101001&gt;，而 &lt;01&gt;.91 是机器号。第一个地址是 16.158.&lt;101001&gt;&lt;00&gt;.1，即 16.158.164.1。子网掩码是 255.255.&lt;111111&gt;&lt;00&gt;.0，即 255.255.252.0。广播地址为 16.158.&lt;101001&gt;&lt;11&gt;.255，即 16.158.167.255。</p><p>这五类地址中，还有一类 D 类是<strong>组播地址</strong>。使用这一类地址，属于某个组的机器都能收到。这有点类似在公司里面大家都加入了一个邮件组。发送邮件，加入这个组的都能收到。组播地址在后面讲述 VXLAN 协议的时候会提到。</p><p>讲了这么多，才讲了上面的输出结果中很小的一部分，是不是觉得原来并没有真的理解 ip addr 呢？我们接着来分析。</p><p>在 IP 地址的后面有个 scope，如果是 global，说明这张网卡是可以对外的，可以接收来自各个地方的包。如果是 host，说明这张网卡仅仅可以供本机相互通信。</p><p>lo 全称是 <strong>loopback，又称环回接口</strong>，往往会被分配到 127.0.0.1 这个地址。这个地址用于本机通信，经过内核处理后直接返回，不会在任何网络中出现。</p><h2 id="5、MAC-地址"><a href="#5、MAC-地址" class="headerlink" title="5、MAC 地址"></a>5、MAC 地址</h2><p>在 IP 地址的上一行是 link/ether 2e:f6:3b:7b:3d:94 brd ff:ff:ff:ff:ff:ff，这个被称为 <strong>MAC 地址</strong>，是一个网卡的物理地址，用十六进制，6 个 byte 表示。</p><p>MAC 地址是一个很容易让人“误解”的地址。因为 MAC 地址号称全局唯一，不会有两个网卡有相同的 MAC 地址，而且网卡自生产出来，就带着这个地址。很多人看到这里就会想，既然这样，整个互联网的通信，全部用 MAC 地址好了，只要知道了对方的 MAC 地址，就可以把信息传过去。</p><p>这样当然是不行的。 <strong>一个网络包要从一个地方传到另一个地方，除了要有确定的地址，还需要有定位功能。</strong> 而有门牌号码属性的 IP 地址，才是有远程定位功能的。例如，你去杭州市网商路 599 号 B 楼 6 层找刘超，你在路上问路，可能被问的人不知道 B 楼是哪个，但是可以给你指网商路怎么去。但是如果你问一个人，你知道这个身份证号的人在哪里吗？可想而知，没有人知道。</p><p><strong><em>MAC 地址更像是身份证，是一个唯一的标识。</em></strong>它的唯一性设计是为了组网的时候，不同的网卡放在一个网络里面的时候，可以不用担心冲突。从硬件角度，保证不同的网卡有不同的标识。</p><p>MAC 地址是有一定定位功能的，只不过范围非常有限。你可以根据 IP 地址，找到杭州市网商路 599 号 B 楼 6 层，但是依然找不到我，你就可以靠吼了，大声喊身份证 XXXX 的是哪位？我听到了，我就会站起来说，是我啊。但是如果你在上海，到处喊身份证 XXXX 的是哪位，我不在现场，当然不会回答，因为我在杭州不在上海。</p><p>所以，MAC 地址的通信范围比较小，局限在一个子网里面。例如，从 192.168.0.2/24 访问 192.168.0.3/24 是可以用 MAC 地址的。一旦跨子网，即从 192.168.0.2/24 到 192.168.1.2/24，MAC 地址就不行了，需要 IP 地址起作用了。</p><h2 id="6、网络设备的状态标识"><a href="#6、网络设备的状态标识" class="headerlink" title="6、网络设备的状态标识"></a>6、网络设备的状态标识</h2><p>解析完了 MAC 地址，我们再来看&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;是干什么的？这个叫做 <strong>net_device flags，网络设备的状态标识</strong>。</p><ul><li>UP 表示网卡处于启动的状态；</li><li>BROADCAST 表示这个网卡有广播地址，可以发送广播包；</li><li>MULTICAST 表示网卡可以发送多播包；</li><li>LOWER_UP 表示 L1 是启动的，也即网线插着呢。</li><li>MTU1500 是指什么意思呢？是哪一层的概念呢？最大传输单元 MTU 为 1500，这是以太网的默认值。</li></ul><p>上一节，我们讲过网络包是层层封装的。MTU 是二层 MAC 层的概念。MAC 层有 MAC 的头，以太网规定连 MAC 头带正文合起来，不允许超过 1500 个字节。正文里面有 IP 的头、TCP 的头、HTTP 的头。如果放不下，就需要分片来传输。</p><p>qdisc pfifo_fast 是什么意思呢？qdisc 全称是 <strong>queueing discipline，中文叫排队规则</strong>。内核如果需要通过某个网络接口发送数据包，它都需要按照为这个接口配置的 qdisc（排队规则）把数据包加入队列。</p><p>最简单的 qdisc 是 pfifo，它不对进入的数据包做任何的处理，数据包采用先入先出的方式通过队列。pfifo_fast 稍微复杂一些，它的队列包括三个波段（band）。在每个波段里面，使用先进先出规则。</p><p>三个波段（band）的优先级也不相同。band 0 的优先级最高，band 2 的最低。如果 band 0 里面有数据包，系统就不会处理 band 1 里面的数据包，band 1 和 band 2 之间也是一样。</p><p>数据包是按照<strong>服务类型（Type of Service，TOS）</strong>被分配到三个波段（band）里面的。TOS 是 IP 头里面的一个字段，代表了当前的包是高优先级的，还是低优先级的。</p><p>队列是个好东西，后面我们讲云计算中的网络的时候，会有很多用户共享一个网络出口的情况，这个时候如何排队，每个队列有多粗，队列处理速度应该怎么提升，我都会详细为你讲解。</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>怎么样，看起来很简单的一个命令，里面学问很大吧？通过这一节，希望你能记住以下的知识点，后面都能用得上：</p><ul><li>IP 是地址，有定位功能；MAC 是身份证，无定位功能；</li><li>CIDR 可以用来判断是不是本地人(CIDR 标注了哪几位是网络号，若网络号相同说明是本地人)；</li><li>IP 分公有的 IP 和私有的 IP。后面的章节中我会谈到“出国门”，就与这个有关。</li></ul><h2 id="8、思考问题？"><a href="#8、思考问题？" class="headerlink" title="8、思考问题？"></a>8、思考问题？</h2><p>1、最后，给你留两个思考题。你知道 net-tools 和 iproute2 的“历史”故事吗？</p><p>答案：</p><p>net-tools起源于BSD，自2001年起，Linux社区已经对其停止维护，而iproute2旨在取代net-tools，并提供了一些新功能。一些Linux发行版已经停止支持net-tools，只支持iproute2。<br>net-tools通过procfs(/proc)和ioctl系统调用去访问和改变内核网络配置，而iproute2则通过netlink套接字接口与内核通讯。<br>net-tools中工具的名字比较杂乱，而iproute2则相对整齐和直观，基本是ip命令加后面的子命令。<br>虽然取代意图很明显，但是这么多年过去了，net-tool依然还在被广泛使用，最好还是两套命令都掌握吧。</p><p>具体的对比，我这里推荐一篇文章<a href="https://linoxide.com/linux-command/use-ip-command-linux/，感兴趣的话可以看看。" target="_blank" rel="noopener">https://linoxide.com/linux-command/use-ip-command-linux/，感兴趣的话可以看看。</a></p><p>2、这一节讲的是如何查看 IP 地址，那你知道 IP 地址是怎么来的吗？</p><p>答案：</p><p>下一节内容</p><p>3、A、B、C 类地址的有效地址范围是多少？A B C类别表里A类数据有问题，应该是1:0:0:1-126:255:255:254，建议检查一下B类和C类</p><p>答案：</p><p>我在写的时候，没有考虑这么严谨，平时使用地址的时候，也是看个大概的范围。所以这里再回答一下。</p><p>A 类 IP 的地址第一个字段范围是 0～127，但是由于全 0 和全 1 的地址用作特殊用途，实际可指派的范围是 1～126。所以我仔细查了一下，如果较真的话，你在答考试题的时候可以说，A 类地址范围和 A 类有效地址范围。</p><p>4、网络号、IP 地址、子网掩码和广播地址的先后关系是什么？</p><p>答案：</p><p>当在一个数据中心或者一个办公室规划一个网络的时候，首先是网络管理员规划网段，一般是根据将来要容纳的机器数量来规划，一旦定了，以后就不好变了。</p><p>假如你在一个小公司里，总共就没几台机器，对于私有地址，一般选择 192.168.0.0/24 就可以了。这个时候先有的是网络号。192.168.0 就是网络号。有了网络号，子网掩码同时也就有了，就是前面都是网络号的是 1，其他的是 0，广播地址也有了，除了网络号之外都是 1。</p><p>当规划完网络的时候，一般这个网络里面的第一个、第二个地址被默认网关 DHCP 服务器占用，你自己创建的机器，只要和其他的不冲突就可以了，当然你也可以让 DHCP 服务自动配置。</p><p>规划网络原来都是网络管理员的事情。有了公有云之后，一般有个概念虚拟网络（VPC），鼠标一点就能创建一个网络，网络完全软件化了，任何人都可以做网络规划。</p><p>5、C类地址的主机数为什么是254个，不是256个？什么是网络地址和广播地址，其意义是什么？组播地址是做什么用的，能否介绍一下组播原理？</p><p>答案：</p><p>C 类地址的主机号 8 位，去掉 0 和 255，就只有 254 个了。</p><p>在《TCP/IP 详解》这本书里面，有两章讲了广播、多播以及 IGMP。广播和组播分为两个层面，其中 MAC 层有广播和组播对应的地址，IP 层也有自己的广播地址和组播地址。</p><p>广播相对比较简单，MAC 层的广播为 ff:ff:ff:ff:ff:ff，IP 层指向子网的广播地址为主机号为全 1 且有特定子网号的地址。</p><p>组播复杂一些，MAC 层中，当地址中最高字节的最低位设置为 1 时，表示该地址是一个组播地址，用十六进制可表示为 01:00:00:00:00:00。IP 层中，组播地址为 D 类 IP 地址，当 IP 地址为组播地址的时候，有一个算法可以计算出对应的 MAC 层地址。</p><p>多播进程将目的 IP 地址指明为多播地址，设备驱动程序将它转换为相应的以太网地址，然后把数据发送出去。这些接收进程必须通知它们的 IP 层，它们想接收的发给定多播地址的数据报，并且设备驱动程序必须能够接收这些多播帧。这个过程就是“加入一个多播组”。当多播跨越路由器的时候，需要通过 IGMP 协议告诉多播路由器，多播数据包应该如何转发。</p><p>6、MTU 1500如果是MAC头加报文的长度，那么如果http请求方法是post的话，报文body中含有内容，那么这个内容不是没有限制吗？岂不是到了二层的MAC这块会和MTU 1500这个限制冲突？</p><p>答案：</p><p>MTU（Maximum Transmission Unit，最大传输单元）是二层的一个定义。以以太网为例，MTU 为 1500 个 Byte，前面有 6 个 Byte 的目标 MAC 地址，6 个 Byte 的源 MAC 地址，2 个 Byte 的类型，后面有 4 个 Byte 的 CRC 校验，共 1518 个 Byte。（MTU 大小是不包含二层头部和尾部的，MTU 1500表示二层MAC帧大小不超过1518， MAC 头14 字节，尾4字节。可以抓包验证）</p><p>在 IP 层，一个 IP 数据报在以太网中传输，如果它的长度大于该 MTU 值，就要进行分片传输。如果不允许分片 DF，就会发送 ICMP 包，这个在ICMP那一节讲过。</p><p>在 TCP 层有个 MSS（Maximum Segment Size，最大分段大小），它等于 MTU 减去 IP 头，再减去 TCP 头。即在不分片的情况下，TCP 里面放的最大内容。</p><p>在 HTTP 层看来，它的 body 没有限制，而且在应用层看来，下层的 TCP 是一个流，可以一直发送，但其实是会被分成一个个段的。</p><p>7、请教一下：我阿里云的多台机器，有172.16.2.145 和172.16.3.28这两个是怎么联通的？</p><p>作者回复: 如果/16，就是一个网段的。如果是/24，则中间会有路由器</p><p>8、老师，你好~MAC地址是网络生产商写在网卡上的，相当于是写死的。但是iproute2里有命令可以修改网卡的MAC地址，是不是只有虚拟机上的系统的网卡可以修改，而物理网卡的MAC地址是不能修改的？</p><p>作者回复: 物理网卡可以改，但改的是系统里面的，不是硬件里面的</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库工具</title>
      <link href="/2020/03/11/databases-tools-all/"/>
      <url>/2020/03/11/databases-tools-all/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li><li><a href="/2020/04/11/databases-tools-01/" title="数据表结构导出md表格工具：mysql_markdown">数据表结构导出md表格工具：mysql_markdown</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂度分析</title>
      <link href="/2020/03/11/geek-time-data-structures-and-algorithms-01/"/>
      <url>/2020/03/11/geek-time-data-structures-and-algorithms-01/</url>
      
        <content type="html"><![CDATA[<h2 id="1、如何分析、统计算法的执行效率和资源消耗？"><a href="#1、如何分析、统计算法的执行效率和资源消耗？" class="headerlink" title="1、如何分析、统计算法的执行效率和资源消耗？"></a>1、如何分析、统计算法的执行效率和资源消耗？</h2><p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，<strong>执行效率是算法一个非常重要的考量指标。那如何来衡量你编写的算法代码的执行效率呢？(how)</strong>这里就要用到我们今天要讲的内容：<strong>时间、空间复杂度分析</strong>。</p><p>其实，只要讲到数据结构与算法，就一定离不开时间、空间复杂度分析。而且，我个人认为，<strong>复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半</strong>。</p><h3 id="1-1-为什么需要复杂度分析？"><a href="#1-1-为什么需要复杂度分析？" class="headerlink" title="1.1 为什么需要复杂度分析？"></a>1.1 为什么需要复杂度分析？</h3><p>你可能会有些疑惑，我把代码跑一遍，通过统计、监控，就能得到算法执行的时间和占用的内存大小。为什么还要做时间、空间复杂度分析呢？这种分析方法能比我实实在在跑一遍得到的数据更准确吗？</p><p>首先，我可以肯定地说，你这种评估算法执行效率的方法是正确的。很多数据结构和算法书籍还给这种方法起了一个名字，叫<strong>事后统计法</strong>。但是，这种统计方法有非常大的局限性。</p><p><strong>(1) 测试结果非常依赖测试环境</strong></p><p>测试环境中硬件的不同会对测试结果有很大的影响。比如，我们拿同样一段代码，分别用Intel Core i9 处理器和 Intel Core i3 处理器来运行，不用说，i9 处理器要比 i3 处理器执行的速度快很多。还有，比如原本在这台机器上 a 代码执行的速度比 b 代码要快，等我们换到另一台机器上时，可能会有截然相反的结果。</p><p><strong>(2) 测试结果受数据规模的影响很大</strong></p><p>后面我们会讲排序算法，我们先拿它举个例子。对同一个排序算法，待排序数据的有序度不一样，排序的执行时间就会有很大的差别。极端情况下，如果数据已经是有序的，那排序算法不需要做任何操作，执行时间就会非常短。除此之外，如果测试数据规模太小，测试结果可能无法真实地反应算法的性能。比如，对于小规模的数据排序，插入排序可能反倒会比快速排序要快！</p><p>所以，<strong>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法</strong>。这就是我们今天要讲的时间、空间复杂度分析方法。</p><h3 id="1-2-大O复杂度表示法"><a href="#1-2-大O复杂度表示法" class="headerlink" title="1.2 大O复杂度表示法"></a>1.2 大O复杂度表示法</h3><p>算法的执行效率，粗略地讲，就是算法代码执行的时间。但是，如何在不运行代码的情况下，用“肉眼”得到一段代码的执行时间呢？</p><p>这里有段非常简单的代码，求 1,2,3…n 的累加和。现在，我就带你一块来估算一下这段代码的执行时间。</p><pre><code>func cal(n int) int {    sum := 0    for i := 1; i &lt;= n;i++{        sum += i    }    return sum}</code></pre><p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据</strong>-<strong>运算</strong>-<strong>写数据</strong>。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢？</p><p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要2n*unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)*unit_time。可以看出来，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比</strong>。</p><p>按照这个分析思路，我们再来看这段代码</p><pre><code>func cal(n int) int {    sum := 0    for i ：= 0； i &lt;= n; i++ {        for j := 0; j &lt;= n; j++ {            sum = sum + i * j        }    }}</code></pre><p>我们依旧假设每个语句的执行时间是 unit_time。那这段代码的总执行时间 T(n) 是多少呢？第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n遍，需要 2n <em> unit_time 的执行时间，第 7、8 行代码循环执行了 n 遍，所以需要 2n \</em>unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n +2n+3)*unit_time。<br>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong>。<br>我们可以把这个规律总结成一个公式。注意，大 O 就要登场了！</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-01/image-20210321225607958.png" alt="image-20210321225607958"></p><p>我来具体解释一下这个公式。其中，T(n) 我们已经讲过了，它表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。  </p><p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n +2n+3)。这就是<strong>大O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic timecomplexity），简称<strong>时间复杂度</strong>。<br>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n )。  </p><h3 id="1-3-时间复杂度分析"><a href="#1-3-时间复杂度分析" class="headerlink" title="1.3 时间复杂度分析"></a>1.3 时间复杂度分析</h3><p>前面介绍了大 O 时间复杂度的由来和表示方法。现在我们来看下，如何分析一段代码的时间复杂度？我这儿有三个比较实用的方法可以分享给你。<br><strong>(1) 只关注循环执行次数最多的一段代码</strong></p><p>我刚才说了，大 O 这种复杂度表示方法只是表示一种变化趋势。我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，<strong>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了</strong>。这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。</p><p>为了便于你理解，我还拿前面的例子来说明。  </p><pre><code>func cal(n int) int {    sum := 0    for i := 0; i &lt;= n; i++ {        sum = sum + i    }    return sum}</code></pre><p>其中第 2、3 行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第 4、5 行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。<br><strong>(2) 加法法则：总复杂度等于量级最大的那段代码的复杂度</strong></p><p>我这里还有一段代码。你可以先试着分析一下，然后再往下看跟我的分析思路是否一样。  </p><pre><code>func cal(n int) int {    sum1 := 0    for p := 1; p &lt; 100; p++ {        sum1 = sum1 + p    }    sum2 := 0    for q := 1; q &lt; n; q++ {        sum2 = sum2 + q    }    sum3 := 0    for i := 1; i &lt;= n; i++ {        for j := 1; j &lt;= n; j++ {            sum3 = sum3 + i * j        }    }    return sum1 + sum2 + sum3}</code></pre><p>这个代码分为三部分，分别是求 sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。</p><p>第一段的时间复杂度是多少呢？这段代码循环执行了 100 次，所以是一个常量的执行时间，跟 n 的规模无关。<br>这里我要再强调一下，即便这段代码循环 10000 次、100000 次，只要是一个已知的数，跟n 无关，照样也是常量级的执行时间。当 n 无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉。因为它本身对增长趋势并没有影响。</p><p>那第二段代码和第三段代码的时间复杂度是多少呢？答案是 O(n) 和 O(n )，你应该能容易就分析出来，我就不啰嗦了。<br>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为O(n )。也就是说：<strong>总的时间复杂度就等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：<br>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n)))=O(max(f(n), g(n))).    </p><p><strong>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</strong><br>我刚讲了一个复杂度分析中的加法法则，这儿还有一个乘法法则。类比一下，你应该能“猜到”公式是什么样子的吧？<br>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么T(n)=T1(n)<em>T2(n)=O(f(n))</em>O(g(n))=O(f(n)<em>g(n)).<br>也就是说，假设 T1(n) = O(n)，T2(n) = O(n )，则 T1(n) </em> T2(n) = O(n )。落实到具体的代码上，我们可以把乘法法则看成是嵌套循环，我举个例子给你解释一下。  </p><pre><code>func cal(n int) int {    ret := 0    for i := 1; i &lt; n; i++ {        ret = ret + f(i)    }}func f(n int) int {    sum := 0    for i := 1; i &lt; n; i++ {        sum = sum + i    }    return sum}</code></pre><p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) <em> T2(n) = O(n</em>n) = O(n )。<br>我刚刚讲了三种复杂度的分析技巧。不过，你并不用刻意去记忆。实际上，复杂度分析这个东西关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招”。  </p><h3 id="1-4-几种常见时间复杂度实例分析"><a href="#1-4-几种常见时间复杂度实例分析" class="headerlink" title="1.4 几种常见时间复杂度实例分析"></a>1.4 几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。  </p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-01/image-20210321230918094.png" alt="image-20210321230918094"></p><p>对于刚罗列的复杂度量级，我们可以粗略地分为两类，<strong>多项式量级</strong>和<strong>非多项式量级</strong>。其中，非多项式量级只有两个：O(2 ) 和 O(n!)。<br>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。因此，关于 NP 时间复杂度我就不展开讲了。我们主要来看几种常见的<strong>多项式时间复杂度</strong>。<br><strong>(1) O(1)</strong></p><p>首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。  </p><pre><code>var i int = 8var j int = 6sum := i + j</code></pre><p>我稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong>。<br><strong>(2) O(logn)、O(nlogn)</strong></p><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。  </p><pre><code>i := 1for {    if i &lt;= n {        break    }    i = i * 2}</code></pre><p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。  </p><p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-01/image-20210321231431941.png" alt="image-20210321231431941"></p><p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2 =n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log n，所以，这段代码的时间复杂度就是O(log n)。<br>现在，我把代码稍微改下，你再看看，这段代码的时间复杂度是多少？  </p><pre><code>i := 1for {    if i &lt;= n {        break    }    i = i * 3}</code></pre><p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为 O(log n)。<br>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？  </p><p>我们知道，对数之间是可以互相转换的，log n 就等于 log 2 <em> log n，所以 O(log n) = O(C\</em> log n)，其中 C=log 2 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log n) 就等于 O(log n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。<br>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。  </p><p><strong>(3) O(m+n)、O(m*n)</strong><br>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度由两个数据的规模来决定。老规矩，先看代码！  </p><pre><code>func cal(m int, n int) int {    sum1 := 0    for i := 1; i &lt; m; i++ {        sum1 = sum1 + i    }    sum2 := 0    for j := 1; j &lt; n; j++ {        sum2 = sum2 + j    }    return sum1 + sum2}</code></pre><p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。<br>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) =O(f(m) + g(n))。但是乘法法则继续有效：T1(m)<em>T2(n) = O(f(m) </em> f(n))。  </p><h3 id="1-5-空间复杂度分析"><a href="#1-5-空间复杂度分析" class="headerlink" title="1.5 空间复杂度分析"></a>1.5 空间复杂度分析</h3><p>前面，咱们花了很长时间讲大 O 表示法和时间复杂度分析，理解了前面讲的内容，空间复杂度分析方法学起来就非常简单了。<br>前面我讲过，时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic spacecomplexity），表示算法的存储空间与数据规模之间的增长关系。<br>我还是拿具体的例子来给你说明。（这段代码有点“傻”，一般没人会这么写，我这么写只是为了方便给你解释。）  </p><pre><code>func print(n int) {}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络分层的真实含义是什么？</title>
      <link href="/2020/03/11/geek-time-interesting-talk-about-network-protocols-02/"/>
      <url>/2020/03/11/geek-time-interesting-talk-about-network-protocols-02/</url>
      
        <content type="html"><![CDATA[<p>长时间从事计算机网络相关的工作，我发现，计算机网络有一个显著的特点，就是这是一个不仅需要背诵，而且特别需要将原理烂熟于胸的学科。很多问题看起来懂了，但是就怕往细里问，一问就发现你懂得没有那么透彻。</p><p>我们上一节列了之后要讲的网络协议。这些协议本来没什么稀奇，每一本教科书都会讲，并且都要求你背下来。因为考试会考，面试会问。可以这么说，毕业了去找工作还答不出这类题目的，那你的笔试基本上也就挂了。</p><p>当你听到什么二层设备、三层设备、四层 LB 和七层 LB 中层的时候，是否有点一头雾水，不知道这些所谓的层，对应的各种协议具体要做什么“工作”？</p><h2 id="1、这四个问题你真的懂了吗？"><a href="#1、这四个问题你真的懂了吗？" class="headerlink" title="1、这四个问题你真的懂了吗？"></a>1、这四个问题你真的懂了吗？</h2><p>教科书或者老师往往会打一个十分不恰当的比喻：为什么网络要分层呀？因为不同的层次之间有不同的沟通方式，这个叫作协议。例如，一家公司也是分“层次”的，分总经理、经理、组长、员工。总经理之间有他们的沟通方式，经理和经理之间也有沟通方式，同理组长和员工。有没有听过类似的比喻？</p><p><strong>那么第一个问题来了。请问经理在握手的时候，员工在干什么？</strong></p><p>很多人听过 TCP 建立连接的<strong>三次握手协议</strong>，也会把它当知识点背诵。同理问你，TCP 在进行三次握手的时候，IP 层和 MAC 层对应都有什么操作呢？</p><p>除了上面这个不恰当的比喻，教科书还会列出每个层次所包含的协议，然后开始逐层地去讲这些协议。但是这些协议之间的关系呢？却很少有教科书会讲。学习第三层的时候会提到，<strong>IP 协议里面包含目标地址和源地址。第三层里往往还会学习路由协议</strong>。路由就像中转站，我们从原始地址 A 到目标地址 D，中间经过两个中转站 A-&gt;B-&gt;C-&gt;D，是通过路由转发的。</p><p><strong>那么第二个问题来了</strong>。</p><p>A 知道自己的下一个中转站是 B，那从 A 发出来的包，应该把 B 的 IP 地址放在哪里呢？B 知道自己的下一个中转站是 C，从 B 发出来的包，应该把 C 的 IP 地址放在哪里呢？如果放在 IP 协议中的目标地址，那包到了中转站，怎么知道最终的目的地址是 D 呢？</p><p>教科书不会通过场景化的例子，将网络包的生命周期讲出来，所以你就会很困惑，不知道这些协议实际的应用场景是什么。</p><p><strong>再问你一个问题</strong>。你一定经常听说二层设备、三层设备。二层设备处理的通常是 MAC 层的东西。那我发送一个 HTTP 的包，是在第七层工作的，那是不是不需要经过二层设备？或者即便经过了，二层设备也不处理呢？或者换一种问法，二层设备处理的包里，有没有 HTTP 层的内容呢？</p><p>最终，<strong>我想问你一个综合的问题</strong>。从你的电脑，通过 SSH 登录到公有云主机里面，都需要经历哪些过程？或者说你打开一个电商网站，都需要经历哪些过程？说得越详细越好。实际情况可能是，很多人回答不上来。尽管对每一层都很熟悉，但是知识点却串不起来。</p><p>上面的这些问题，有的在这一节就会有一个解释，有的则会贯穿我们整个课程。好在后面一节中我会举一个贯穿的例子，将很多层的细节讲过后，你很容易就能把这些知识点串起来。</p><h2 id="2、-网络为什么要分层？"><a href="#2、-网络为什么要分层？" class="headerlink" title="2、 网络为什么要分层？"></a>2、 网络为什么要分层？</h2><p>这里我们先探讨第一个问题，网络为什么要分层？因为，是个复杂的程序都要分层。</p><p>理解计算机网络中的概念，一个很好的角度是，想象网络包就是一段 Buffer，或者一块内存，是有格式的。同时，想象自己是一个处理网络包的程序，而且这个程序可以跑在电脑上，可以跑在服务器上，可以跑在交换机上，也可以跑在路由器上。你想象自己有很多的网口，从某个口拿进一个网络包来，用自己的程序处理一下，再从另一个网口发送出去。</p><p>当然网络包的格式很复杂，这个程序也很复杂。<strong>复杂的程序都要分层，这是程序设计的要求</strong>。比如，复杂的电商还会分数据库层、缓存层、Compose 层、Controller 层和接入层，每一层专注做本层的事情。</p><h2 id="3、程序是如何工作的？"><a href="#3、程序是如何工作的？" class="headerlink" title="3、程序是如何工作的？"></a>3、程序是如何工作的？</h2><p>我们可以简单地想象“你”这个程序的工作过程。</p><p><img src="/2020/03/11/geek-time-interesting-talk-about-network-protocols-02/5c00f6e610f533d17fb4ad7decacc776.jpg" alt="img"></p><p>当一个网络包从一个网口经过的时候，你看到了，首先先看看要不要请进来，处理一把。有的网口配置了混杂模式，凡是经过的，全部拿进来。</p><ol><li><p>拿进来以后，就要交给一段程序来处理。于是，你调用 process_layer2(buffer)。当然，这是一个假的函数。但是你明白其中的意思，知道肯定是有这么个函数的。那这个函数是干什么的呢？从 Buffer 中，摘掉二层的头，看一看，应该根据头里面的内容做什么操作。</p></li><li><p>假设你发现这个包的 MAC 地址和你的相符，那说明就是发给你的，于是需要调用 process_layer3(buffer)。这个时候，Buffer 里面往往就没有二层的头了，因为已经在上一个函数的处理过程中拿掉了，或者将开始的偏移量移动了一下。在这个函数里面，摘掉三层的头，看看到底是发送给自己的，还是希望自己转发出去的。</p></li><li><p>如何判断呢？如果 IP 地址不是自己的，那就应该转发出去；如果 IP 地址是自己的，那就是发给自己的。根据 IP 头里面的标示，拿掉三层的头，进行下一层的处理，到底是调用 process_tcp(buffer) 呢，还是调用 process_udp(buffer) 呢？</p><p>假设这个地址是 TCP 的，则会调用 process_tcp(buffer)。这时候，Buffer 里面没有三层的头，就需要查看四层的头，看这是一个发起，还是一个应答，又或者是一个正常的数据包，然后分别由不同的逻辑进行处理。如果是发起或者应答，接下来可能要发送一个回复包；如果是一个正常的数据包，就需要交给上层了。</p></li><li><p>交给谁呢？是不是有 process_http(buffer) 函数呢？没有的，如果你是一个网络包处理程序，你不需要有 process_http(buffer)，而是应该交给应用去处理。交给哪个应用呢？在四层的头里面有端口号，不同的应用监听不同的端口号。如果发现浏览器应用在监听这个端口，那你发给浏览器就行了。至于浏览器怎么处理，和你没有关系。浏览器自然是解析 HTML，显示出页面来。</p></li></ol><p>电脑的主人看到页面很开心，就点了鼠标。点击鼠标的动作被浏览器捕获。浏览器知道，又要发起另一个 HTTP 请求了，于是使用端口号，将请求发给了你。</p><ol><li>你应该调用 send_tcp(buffer)。不用说，Buffer 里面就是 HTTP 请求的内容。这个函数里面加一个 TCP 的头，记录下源端口号。浏览器会给你目的端口号，一般为 80 端口。</li><li>然后调用 send_layer3(buffer)。Buffer 里面已经有了 HTTP 的头和内容，以及 TCP 的头。在这个函数里面加一个 IP 的头，记录下源 IP 的地址和目标 IP 的地址。</li><li>然后调用 send_layer2(buffer)。Buffer 里面已经有了 HTTP 的头和内容、TCP 的头，以及 IP 的头。这个函数里面要加一下 MAC 的头，记录下源 MAC 地址，得到的就是本机器的 MAC 地址和目标的 MAC 地址。不过，这个还要看当前知道不知道，知道就直接加上；不知道的话，就要通过一定的协议处理过程，找到 MAC 地址。反正要填一个，不能空着。</li><li>万事俱备，只要 Buffer 里面的内容完整，就可以从网口发出去了，你作为一个程序的任务就算告一段落了。</li></ol><h2 id="4、层与层之间的关系"><a href="#4、层与层之间的关系" class="headerlink" title="4、层与层之间的关系"></a>4、层与层之间的关系</h2><p>知道了这个过程之后，我们再来看一下原来困惑的问题。</p><p>首先是分层的比喻。<strong>所有不能表示出层层封装含义的比喻，都是不恰当的</strong>。总经理握手，不需要员工在吧，总经理之间谈什么，不需要员工参与吧，但是网络世界不是这样的。正确的应该是，总经理之间沟通的时候，经理将总经理放在自己兜里，然后组长把经理放自己兜里，员工把组长放自己兜里，像套娃娃一样。那员工直接沟通，不带上总经理，就不恰当了。</p><p>现实生活中，往往是员工说一句，组长补充两句，然后经理补充两句，最后总经理再补充两句。但是在网络世界，应该是总经理说话，经理补充两句，组长补充两句，员工再补充两句。</p><p><strong>那 TCP 在三次握手的时候，IP 层和 MAC 层在做什么呢？</strong></p><p>当然是 TCP 发送每一个消息，都会带着 IP 层和 MAC 层了。因为，TCP 每发送一个消息，IP 层和 MAC 层的所有机制都要运行一遍。而你只看到 TCP 三次握手了，其实，IP 层和 MAC 层为此也忙活好久了。这里要记住一点：<strong><em>只要是在网络上跑的包，都是完整的。可以有下层没上层，绝对不可能有上层没下层</em></strong>。所以，<strong><em>对 TCP 协议来说，三次握手也好，重试也好，只要想发出去包，就要有 IP 层和 MAC 层，不然是发不出去的。</em></strong></p><p>经常有人会问这样一个问题，我都知道那台机器的 IP 地址了，直接发给他消息呗，要 MAC 地址干啥？这里的关键就是，没有 MAC 地址消息是发不出去的。</p><p>所以如果一个 HTTP 协议的包跑在网络上，它一定是完整的。无论这个包经过哪些设备，它都是完整的。所谓的二层设备、三层设备，都是这些设备上跑的程序不同而已。一个 HTTP 协议的包经过一个二层设备，二层设备收进去的是整个网络包。这里面 HTTP、TCP、 IP、 MAC 都有。什么叫二层设备呀，就是只把 MAC 头摘下来，看看到底是丢弃、转发，还是自己留着。那什么叫三层设备呢？就是把 MAC 头摘下来之后，再把 IP 头摘下来，看看到底是丢弃、转发，还是自己留着。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>总结一下今天的内容，理解网络协议的工作模式，有两个小窍门：</p><ul><li>始终想象自己是一个处理网络包的程序：如何拿到网络包，如何根据规则进行处理，如何发出去；</li><li>始终牢记一个原则：只要是在网络上跑的包，都是完整的。可以有下层没上层，绝对不可能有上层没下层。</li></ul><h2 id="6、思考问题？"><a href="#6、思考问题？" class="headerlink" title="6、思考问题？"></a>6、思考问题？</h2><p>1、如果你也觉得总经理和员工的比喻不恰当，你有更恰当的比喻吗？</p><p>答案：</p><p>(1) 很像发快递的过程(http，应用层)，你向顺丰下单(第一次请求)，顺丰接单(应答)，你向取件小伙联系(回应应答)，你将消息放进盒子里(开始封装请求，会话层)，快递员封装一层盒子贴上快递单带回快递点(传输层)，到快递点检查是否区域快件(网络层)，将快件交给运输车(链路层)，各个快递转运中心(物理层)，转运输车(链路层)，达到区域分发(网络层)，网点派送(传输层)，快递员方面签收(会话层)，拆开检查(表示层)，收到快递(应用层)。</p><p>2、要想学习网络协议，IP 这个概念是最最基本的，那你知道如何查看 IP 地址吗？</p><p>答案：</p><p>(1) 在 Windows 上是 ipconfig，在 Linux 上是 ifconfig (net-tools)</p><p>(2) ip addr (iproute2)</p><p>3、为什么要分层？</p><p>答案：</p><p>其实这是一个架构设计的通用问题，不仅仅是网络协议的问题。一旦涉及到复杂的逻辑，或者软件需求需要经常变动，一般都会通过分层来解决问题。</p><p>假如我们将所有的代码都写在一起，但是产品经理突然想调整一下界面，这背后的业务逻辑变不变，那要不要一起修改呢？所以会拆成两层，把 UI 层从业务逻辑中分离出来，调用 API 来进行组合。API 不变，仅仅界面变，是不是就不影响后台的代码了？</p><p>为什么要把一些原子的 API 放在基础服务层呢？将数据库、缓存、搜索引擎等，屏蔽到基础服务层以下，基础服务层之上的组合逻辑层、API 层都只能调用基础服务层的 API，不能直接访问数据库。比如我们要将 Oracle 切换成 MySQL。MySQL 有一个库，分库分表成为 4 个库。难道所有的代码都要修改吗？当然只要把基础服务层屏蔽，提供一致的接口就可以了。</p><p>网络协议也是这样的。有的想基于 TCP，自己不操心就能够保证到达；有的想自己实现可靠通信，不基于 TCP，而使用 UDP。一旦分了层就好办了，定制化后要依赖于下一层的接口，只要实现自己的逻辑就可以了。如果 TCP 的实现将所有的逻辑耦合在了整个七层，不用 TCP 的可靠传输机制都没有办法。</p><p>4、层级之间真实的调用方式是什么样的？</p><p>答案：</p><p>如果文中是一个逻辑图，这个问题其实已经到实现层面上来了，需要看 TCP/IP 的协议栈代码了。这里首先推荐一本书《深入理解 Linux 网络技术内幕》。</p><p>其实下层的协议知道上层协议的，因为在每一层的包头里面，都会有上一层是哪个协议的标识，所以不是一个回调函数，每一层的处理函数都会在操作系统启动的时候，注册到内核的一个数据结构里面，但是到某一层的时候，是通过判断到底是哪一层的哪一个协议，然后去找相应的处理函数去调用。</p><p>调用的大致过程我这里再讲一下。由于 TCP 比较复杂，我们以 UDP 为例子，其实发送的包就是一个 sk_buff 结构。这个在Socket那一节讲过。</p><pre><code>int udp_send_skb(struct sk_buff *skb, struct flowi4 *fl4)</code></pre><p>接着，UDP 层会调用 IP 层的函数。</p><pre><code>int ip_send_skb(struct net *net, struct sk_buff *skb)</code></pre><p>然后，IP 层通过路由判断，最终将包发给下一层。</p><pre><code>int ip_output(struct net *net, struct sock *sk, struct sk_buff *skb)</code></pre><p>发送的时候，要进行 ARP。如果有 MAC，则调用二层的函数，neigh 其实就是邻居系统，是二层的意思。</p><pre><code>int neigh_output(struct neighbour *n, struct sk_buff *skb)</code></pre><p>接收的时候，会调用这里的接收函数。</p><pre><code>int netif_receive_skb(struct sk_buff *skb)</code></pre><p>这个函数会根据是 ARP 或者 IP 等，选择调用不同的函数。如果是 IP 协议的话，就调用这里的函数。</p><pre><code>int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)</code></pre><p>这里也有路由判断。如果是本地的，则继续往上提交这个结构。</p><pre><code>int ip_local_deliver(struct sk_buff *skb)</code></pre><p>接着，还是根据 IP 头里面的协议号，来判断是什么协议，从而调用什么函数。下面这个是对 UDP 的调用。</p><pre><code>int udp_rcv(struct sk_buff *skb)</code></pre><p>5、什么情况下会有下层没上层？</p><p>答案：</p><p>有时候我们自己写应用的时候，不一定是直接调用应用层协议的接口，例如 HTTP 等，而是自己写 Socket 编程，来约定应用层的协议。再如，ping 也是一个应用，但是它没有用传输层的协议，而是用了 ICMP 的协议。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2020/03/11/geek-time-data-structures-and-algorithms-02/"/>
      <url>/2020/03/11/geek-time-data-structures-and-algorithms-02/</url>
      
        <content type="html"><![CDATA[<h1 id="数组：为什么很多编程语言中数组都是从0开始编号？"><a href="#数组：为什么很多编程语言中数组都是从0开始编号？" class="headerlink" title="数组：为什么很多编程语言中数组都是从0开始编号？"></a>数组：为什么很多编程语言中数组都是从0开始编号？</h1><p>说到数组，我想每个人都不陌生，甚至还会自信的说，它很简单啊。</p><p>是的，每一种编程语言基本都会有数组这种数据类型。不过，它不仅仅是一种编程语言中的数据类型，还是一种最基础的数据结构。尽管数组看起来非常基础、简单，但是我估计很多人并没有理解这个基础数据结构的精髓。</p><p>带着问题去思考、阅读，往往事半功倍，这里提出一个问题？</p><h2 id="开篇提问"><a href="#开篇提问" class="headerlink" title="开篇提问"></a>开篇提问</h2><p>在大部分编程语言中，数组都是从0开始编号的，但你是否想过，<strong>为什么数组要从0开始编号，而不是从1开始呢？</strong>从1开始不是更符合人类的思维习惯吗？</p><h2 id="1、如何实现随机访问数组？"><a href="#1、如何实现随机访问数组？" class="headerlink" title="1、如何实现随机访问数组？"></a>1、如何实现随机访问数组？</h2><p>什么是数组？<strong>数组(Array)是一种线性表数据结构，它用一组连续的内存空间来存储一组具有相同类型的数据。</strong></p><p>这个定义里有几个关键词，理解了这几个关键词，我想你就能彻底掌握数组的概念了。</p><ol><li><p><strong>线性表(Linear List)</strong>。顾名思义，<strong>线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。</strong>其实除了数组，链表、队列、栈等也是线性表结构。</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-02/image-20210323201603388.png" alt="image-20210323201603388"></p><p>与线性表相对立的概念是非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-02/image-20210323202345805.png" alt="image-20210323202345805"></p></li><li><p><strong>连续的内存空间和相同类型的数据。</strong>正是因为这两个限制，数组才有了一个堪称“杀手锏”的特性：“随机访问”。但是有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p></li></ol><p>数组会利用<strong>索引</strong>来记录每个元素在数组中的位置，且在大多数编程语言中，索引是从0开始的。我们可以根据数组中的索引快速访问数组中的元素。事实上，<strong>这里的索引其实就是内存地址</strong>。</p><p>说到数据的访问，那你知道数组是如何实现根据下标随机访问数组元素的吗？</p><p>我们拿一个长度为10的int类型的数组var a [10]int来举例。在我画的这个图中，计算机给数组a[10]分配了一块连续内存空间1000~1039,其中，内存块的首地址为base_address = 1000。</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-02/image-20210323223140347.png" alt="image-20210323223140347"></p><p>我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式计算出该元素的内存地址：</p><pre><code>a[i]_address = base_address + i * data_type_size </code></pre><p>其中data_type_size表示数组中每个元素的大小。数组中存储的时int类型数据，所有data_type_size就是4个字节。</p><p>这里我要特别纠正一个“错误”。我在面试的时候，常常会问数组和链表的区别，很多人都回答说，“链表适合插入、删除，时间复杂度 O(1)；数组适合查找，查找时间复杂度为O(1)”。</p><p>实际上，这种表述是不准确的。数组是适合查找操作，但是查找的间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，<strong>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)</strong>。</p><h2 id="2、数组低效的“插入”和“删除”"><a href="#2、数组低效的“插入”和“删除”" class="headerlink" title="2、数组低效的“插入”和“删除”"></a>2、数组低效的“插入”和“删除”</h2><p>前面概念部分我们提到，数组为了保持内存数据的连续性，会导致插入、删除这两个操作比较低效。现在我们来详细说一下，究竟为什么会导致低效？又有哪些改进方法呢？</p><h3 id="2-1-数组的插入操作"><a href="#2-1-数组的插入操作" class="headerlink" title="2.1 数组的插入操作"></a>2.1 数组的插入操作</h3><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。那插入操作的时间复杂度是多少呢？你可以自己先试着分析一下。</p><p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。</p><p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p><p>为了更好地理解，我们举一个例子。假设数组 a[10] 中存储了如下 5 个元素：a，b，c，d，e。</p><p>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2] 赋值为 x即可。最后，数组中的元素如下： a，b，x，d，e，c。</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-02/image-20210323224642315.png" alt="image-20210323224642315"></p><p><strong>利用这种处理技巧，在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为O(1)。这个处理思想在快排中也会用到</strong>。</p><h3 id="2-2-数组的删除操作"><a href="#2-2-数组的删除操作" class="headerlink" title="2.2 数组的删除操作"></a>2.2 数组的删除操作</h3><p>跟插入数据类似，如果我们要删除第k个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p><p>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</p><p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p><p>我们继续来看例子。数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</p><p><img src="/2020/03/11/geek-time-data-structures-and-algorithms-02/image-20210323225145513.png" alt="image-20210323225145513"></p><p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p><p>如果你了解 JVM，你会发现，这不就是 <strong>JVM 标记清除垃圾回收算法</strong>的核心思想吗？没错，数据结构和算法的魅力就在于此，<strong>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的</strong>。如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。</p><h2 id="3、警惕数组访问越界问题"><a href="#3、警惕数组访问越界问题" class="headerlink" title="3、警惕数组访问越界问题"></a>3、警惕数组访问越界问题</h2><p>了解了数组的几个基本操作后，我们来聊聊数组访问越界的问题。</p><p>首先，我请你来分析一下这段 Go 语言代码的运行结果:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Golang本身就会做越界检查，会报出<code>panic: runtime error: index out of range</code>错误。</p><h2 id="4、容器能否完全替代数组？"><a href="#4、容器能否完全替代数组？" class="headerlink" title="4、容器能否完全替代数组？"></a>4、容器能否完全替代数组？</h2><p>针对数组类型，很多语言都提供了容器，比如 Java 中的 ArrayList、Golang 中的slice。在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p><p>如果你是 Golang 工程师，几乎天天都在用 slice，对它应该非常熟悉。那它与数组相比，到底有哪些优势呢？</p><p>我个人觉得，slice 最大的优势就是<strong>可以将很多数组操作的细节封装起来</strong>。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是<strong>支持动态扩容</strong>。</p><p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p><p>如果使用slice，我们就完全不需要关心底层的扩容逻辑，slice 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p><p>不过，这里需要注意一点，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好<strong>在创建 slice 的时候事先指定数据大小</strong>。</p><p>比如我们要从数据库中取出 10000 条数据放入 slice。我们看下面这几行代码，你会发现，相比之下，事先指定数据大小可以省掉很多次内存申请和数据搬移操作。</p><pre class="line-numbers language-go"><code class="language-go">users <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">,</span> <span class="token number">10000</span>，<span class="token number">10000</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。</p><ol start="2"><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 slice 提供的大部分方法，也可以直接使用数组。</li><li>还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。</li></ol><p>我总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p><h2 id="解答开篇提问"><a href="#解答开篇提问" class="headerlink" title="解答开篇提问"></a>解答开篇提问</h2><p>现在我们来思考开篇的问题：为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1开始呢？</p><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用 a 来表示数组的首地址，a[0] 就是偏移为 0 的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，所以计算 a[k] 的内存地址只需要用这个公式：</p><pre><code> a[k]_address = base_address + k * type_size</code></pre><p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就会变为：</p><pre><code>a[k]_address = base_address + (k-1)*type_size</code></pre><p>对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p><p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</p><p>不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。</p><p>C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从0 开始计数的习惯。实际上，很多语言中数组也并不是从 0 开始计数的，比如 Matlab。甚至还有一些语言支持负数下标，比如 Python。</p><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p>我们今天学习了数组。它可以说是最基础、最简单的数据结构了。数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p><h2 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h2><ol><li>前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，回顾下你理解的标记清除垃圾回收算法。</li><li>前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？</li></ol><p>解答1：</p><p><a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/" target="_blank" rel="noopener">Golang垃圾收集器</a></p><p>解答2：</p><p>二维数组内存寻址：</p><p>对于m*n的数组，a[i][j](i &lt; m, j &lt; n)的地址为：</p><pre><code>address = base_address + (i * n + j)* type_size</code></pre><h2 id="数组算法刷题"><a href="#数组算法刷题" class="headerlink" title="数组算法刷题"></a>数组算法刷题</h2><a href="/2020/03/11/leetcode-all/" title="leetcode列表分类">leetcode列表分类</a>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux磁盘命令df</title>
      <link href="/2020/03/11/linux-cmd-disk-df/"/>
      <url>/2020/03/11/linux-cmd-disk-df/</url>
      
        <content type="html"><![CDATA[<pre><code>sed -n 1p取结果的第一行root@ceph6:~# df -k |grep /dev/sda | sed -n 1p/dev/sda       15501613664 605347028 14114956276   5% /hdd_ZL261LZD</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux网络命令</title>
      <link href="/2020/03/11/linux-cmd-network-info/"/>
      <url>/2020/03/11/linux-cmd-network-info/</url>
      
        <content type="html"><![CDATA[<h2 id="如何查看网口类型"><a href="#如何查看网口类型" class="headerlink" title="如何查看网口类型"></a>如何查看网口类型</h2><pre><code>// 使用ethtool enp14s0f0,通过下面输出可以看到speed那一行，表示万兆网还是千兆网root@ceph2:~# ifconfig enp14s0f0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.3.7.35  netmask 255.255.0.0  broadcast 10.3.255.255        ether b8:ce:f6:0b:fe:d0  txqueuelen 1000  (Ethernet)        RX packets 77323525  bytes 108203715386 (108.2 GB)        RX errors 0  dropped 6499  overruns 0  frame 0        TX packets 75530400  bytes 100311118002 (100.3 GB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0enp14s0f1: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        ether b8:ce:f6:0b:fe:d1  txqueuelen 1000  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0enp15s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.3.6.35  netmask 255.255.0.0  broadcast 10.3.255.255        ether 00:e0:4a:68:1c:1f  txqueuelen 1000  (Ethernet)        RX packets 5772357  bytes 8245209397 (8.2 GB)        RX errors 0  dropped 1190  overruns 0  frame 0        TX packets 3017758  bytes 3723847625 (3.7 GB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0        device memory 0xfaf00000-faffffff  enp16s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        ether 00:e0:4a:68:1c:20  txqueuelen 1000  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0        device memory 0xfac00000-facfffff  enp17s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        ether 00:e0:4a:68:1c:21  txqueuelen 1000  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0        device memory 0xfa900000-fa9fffff  enp18s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        ether 00:e0:4a:68:1c:22  txqueuelen 1000  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0        device memory 0xfa600000-fa6fffff  lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;        loop  txqueuelen 1000  (Local Loopback)        RX packets 157730  bytes 69140496 (69.1 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 157730  bytes 69140496 (69.1 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0root@ceph2:~# ethtool enp14s0f0Settings for enp14s0f0:    Supported ports: [ FIBRE ]    Supported link modes:   1000baseKX/Full                             10000baseKR/Full     Supported pause frame use: Symmetric    Supports auto-negotiation: Yes    Supported FEC modes: None BaseR    Advertised link modes:  1000baseKX/Full                             10000baseKR/Full     Advertised pause frame use: Symmetric    Advertised auto-negotiation: Yes    Advertised FEC modes: None    Speed: 10000Mb/s    Duplex: Full    Port: FIBRE    PHYAD: 0    Transceiver: internal    Auto-negotiation: on    Supports Wake-on: d    Wake-on: d    Current message level: 0x00000004 (4)                   link    Link detected: yesroot@ceph2:~# ethtool enp15s0Settings for enp15s0:    Supported ports: [ TP ]    Supported link modes:   10baseT/Half 10baseT/Full                             100baseT/Half 100baseT/Full                             1000baseT/Full     Supported pause frame use: Symmetric    Supports auto-negotiation: Yes    Supported FEC modes: Not reported    Advertised link modes:  10baseT/Half 10baseT/Full                             100baseT/Half 100baseT/Full                             1000baseT/Full     Advertised pause frame use: Symmetric    Advertised auto-negotiation: Yes    Advertised FEC modes: Not reported    Speed: 1000Mb/s    Duplex: Full    Port: Twisted Pair    PHYAD: 1    Transceiver: internal    Auto-negotiation: on    MDI-X: off (auto)    Supports Wake-on: pumbg    Wake-on: g    Current message level: 0x00000007 (7)                   drv probe link    Link detected: yesroot@ceph2:~# </code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac上必装的软件</title>
      <link href="/2020/03/11/mac-software/"/>
      <url>/2020/03/11/mac-software/</url>
      
        <content type="html"><![CDATA[<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><a href="https://ezip.awehunt.com/" target="_blank" rel="noopener">Maczip：压缩软件</a></li><li><a href="https://typora.io/" target="_blank" rel="noopener">Typora：md文档软件</a></li><li><a href="https://github.com/yanue/V2rayU" target="_blank" rel="noopener">V2rayU：翻墙软件</a></li><li><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">VSCode：编辑器</a></li><li><a href>Microsoft Remote Desktop：远程连接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置vscode 远程开发+ 免密登录</title>
      <link href="/2020/03/11/vscode-remote-ssh/"/>
      <url>/2020/03/11/vscode-remote-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vscode安装插件"><a href="#1-vscode安装插件" class="headerlink" title="1 vscode安装插件"></a>1 vscode安装插件</h2><p>安装Remote - SSH插件<img src="/2020/03/11/vscode-remote-ssh/image-20210318115124130.png" alt="image-20210318115124130"></p><h2 id="2-把window的公钥配置到server端"><a href="#2-把window的公钥配置到server端" class="headerlink" title="2 把window的公钥配置到server端"></a>2 把window的公钥配置到server端</h2><ol><li>复制C:\Users\Administrator.ssh\id_rsa.pub里的内容</li><li>server端在~/.ssh/目录创建authorized_keys文件，并把上面的公钥内容复制到这个文件里</li></ol><h2 id="3-在vscode中配置免密远程连接"><a href="#3-在vscode中配置免密远程连接" class="headerlink" title="3 在vscode中配置免密远程连接"></a>3 在vscode中配置免密远程连接</h2><p>Ctrl+Shift+p<img src="/2020/03/11/vscode-remote-ssh/image-20210318120210683.png" alt="image-20210318120210683"></p><p><img src="/2020/03/11/vscode-remote-ssh/image-20210318120344308.png" alt="image-20210318120344308"></p><pre><code>// IdentityFile的路径（也就是windows私钥在本机的所在位置）Host ArsServer    HostName 192.168.1.212    User bill    IdentityFile &quot;C:\Users\Administrator\.ssh\id_rsa&quot;</code></pre><p>这时候再用vscode登录server就不用输入密码了！</p>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows上必装的软件</title>
      <link href="/2020/03/11/windows-software/"/>
      <url>/2020/03/11/windows-software/</url>
      
        <content type="html"><![CDATA[<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><p><a href="https://ezip.awehunt.com/" target="_blank" rel="noopener">Maczip：压缩软件</a></p></li><li><p><a href="https://typora.io/" target="_blank" rel="noopener">Typora：md文档软件</a></p></li><li><p><a href="https://github.com/yanue/V2rayU" target="_blank" rel="noopener">V2rayU：翻墙软件</a></p></li><li><p><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">VSCode：编辑器</a></p></li><li><p><a href="https://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyond Compare 4：文件对比工具</a></p></li><li><p><a href="https://www.postman.com/" target="_blank" rel="noopener">Postman：接口测试工具</a></p></li><li><p><a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener">Wireshark：抓包工具</a></p></li><li><p><a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">Xshell 6：远程连接工具</a></p></li><li><p><a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">Xftp6：远程传输文件工具</a></p></li><li><p><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">Notpad++：文本编辑器</a></p></li><li><p><a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">Everything：快速查找工具</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode列表分类</title>
      <link href="/2020/03/11/leetcode-all/"/>
      <url>/2020/03/11/leetcode-all/</url>
      
        <content type="html"><![CDATA[<h2 id="1、leetcode题目列表"><a href="#1、leetcode题目列表" class="headerlink" title="1、leetcode题目列表"></a>1、leetcode题目列表</h2><table><thead><tr><th align="center">No.</th><th align="left">Title</th><th align="center">Solution</th><th align="center">Acceptance</th><th align="center">Difficulty</th><th align="center">Frequency</th></tr></thead><tbody><tr><td align="center">0001</td><td align="left">Two Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0001.Two-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">46.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0002</td><td align="left">Add Two Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0002.Add-Two-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">35.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0003</td><td align="left">Longest Substring Without Repeating Characters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0003.Longest-Substring-Without-Repeating-Characters" target="_blank" rel="noopener">Go</a></td><td align="center">31.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0004</td><td align="left">Median of Two Sorted Arrays</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0004.Median-of-Two-Sorted-Arrays" target="_blank" rel="noopener">Go</a></td><td align="center">31.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0005</td><td align="left">Longest Palindromic Substring</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0005.Longest-Palindromic-Substring" target="_blank" rel="noopener">Go</a></td><td align="center">30.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0006</td><td align="left">ZigZag Conversion</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0006.ZigZag-Conversion" target="_blank" rel="noopener">Go</a></td><td align="center">38.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0007</td><td align="left">Reverse Integer</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0007.Reverse-Integer" target="_blank" rel="noopener">Go</a></td><td align="center">25.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0008</td><td align="left">String to Integer (atoi)</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0008.String-to-Integer-(atoi)" target="_blank" rel="noopener">Go</a></td><td align="center">15.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0009</td><td align="left">Palindrome Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0009.Palindrome-Number" target="_blank" rel="noopener">Go</a></td><td align="center">49.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0010</td><td align="left">Regular Expression Matching</td><td align="center"></td><td align="center">27.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0011</td><td align="left">Container With Most Water</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0011.Container-With-Most-Water" target="_blank" rel="noopener">Go</a></td><td align="center">52.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0012</td><td align="left">Integer to Roman</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0012.Integer-to-Roman" target="_blank" rel="noopener">Go</a></td><td align="center">57.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0013</td><td align="left">Roman to Integer</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0013.Roman-to-Integer" target="_blank" rel="noopener">Go</a></td><td align="center">56.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0014</td><td align="left">Longest Common Prefix</td><td align="center"></td><td align="center">36.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0015</td><td align="left">3Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0015.3Sum" target="_blank" rel="noopener">Go</a></td><td align="center">28.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0016</td><td align="left">3Sum Closest</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0016.3Sum-Closest" target="_blank" rel="noopener">Go</a></td><td align="center">46.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0017</td><td align="left">Letter Combinations of a Phone Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0017.Letter-Combinations-of-a-Phone-Number" target="_blank" rel="noopener">Go</a></td><td align="center">49.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0018</td><td align="left">4Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0018.4Sum" target="_blank" rel="noopener">Go</a></td><td align="center">35.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0019</td><td align="left">Remove Nth Node From End of List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0019.Remove-Nth-Node-From-End-of-List" target="_blank" rel="noopener">Go</a></td><td align="center">35.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0020</td><td align="left">Valid Parentheses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0020.Valid-Parentheses" target="_blank" rel="noopener">Go</a></td><td align="center">39.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0021</td><td align="left">Merge Two Sorted Lists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0021.Merge-Two-Sorted-Lists" target="_blank" rel="noopener">Go</a></td><td align="center">56.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0022</td><td align="left">Generate Parentheses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0022.Generate-Parentheses" target="_blank" rel="noopener">Go</a></td><td align="center">65.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0023</td><td align="left">Merge k Sorted Lists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0023.Merge-k-Sorted-Lists" target="_blank" rel="noopener">Go</a></td><td align="center">42.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0024</td><td align="left">Swap Nodes in Pairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0024.Swap-Nodes-in-Pairs" target="_blank" rel="noopener">Go</a></td><td align="center">53.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0025</td><td align="left">Reverse Nodes in k-Group</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0025.Reverse-Nodes-in-k-Group" target="_blank" rel="noopener">Go</a></td><td align="center">45.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0026</td><td align="left">Remove Duplicates from Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0026.Remove-Duplicates-from-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">46.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0027</td><td align="left">Remove Element</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0027.Remove-Element" target="_blank" rel="noopener">Go</a></td><td align="center">49.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0028</td><td align="left">Implement strStr()</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0028.Implement-strStr()" target="_blank" rel="noopener">Go</a></td><td align="center">35.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0029</td><td align="left">Divide Two Integers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0029.Divide-Two-Integers" target="_blank" rel="noopener">Go</a></td><td align="center">16.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0030</td><td align="left">Substring with Concatenation of All Words</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0030.Substring-with-Concatenation-of-All-Words" target="_blank" rel="noopener">Go</a></td><td align="center">26.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0031</td><td align="left">Next Permutation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0031.Next-Permutation" target="_blank" rel="noopener">Go</a></td><td align="center">33.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0032</td><td align="left">Longest Valid Parentheses</td><td align="center"></td><td align="center">29.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0033</td><td align="left">Search in Rotated Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0033.Search-in-Rotated-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">36.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0034</td><td align="left"><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">Find First and Last Position of Element in Sorted Array</a></td><td align="center"><a href="https://billbliu.github.io/2020/03/25/leetcode-0034-find-first-and-last-position-of-element-in-sorted-array/">Go</a></td><td align="center">37.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0035</td><td align="left">Search Insert Position</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0035.Search-Insert-Position" target="_blank" rel="noopener">Go</a></td><td align="center">42.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0036</td><td align="left">Valid Sudoku</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0036.Valid-Sudoku" target="_blank" rel="noopener">Go</a></td><td align="center">50.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0037</td><td align="left">Sudoku Solver</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0037.Sudoku-Solver" target="_blank" rel="noopener">Go</a></td><td align="center">46.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0038</td><td align="left">Count and Say</td><td align="center"></td><td align="center">46.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0039</td><td align="left">Combination Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0039.Combination-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">59.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0040</td><td align="left">Combination Sum II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0040.Combination-Sum-II" target="_blank" rel="noopener">Go</a></td><td align="center">50.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0041</td><td align="left">First Missing Positive</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0041.First-Missing-Positive" target="_blank" rel="noopener">Go</a></td><td align="center">33.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0042</td><td align="left">Trapping Rain Water</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0042.Trapping-Rain-Water" target="_blank" rel="noopener">Go</a></td><td align="center">51.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0043</td><td align="left">Multiply Strings</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0043.Multiply-Strings" target="_blank" rel="noopener">Go</a></td><td align="center">35.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0044</td><td align="left">Wildcard Matching</td><td align="center"></td><td align="center">25.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0045</td><td align="left">Jump Game II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0045.Jump-Game-II" target="_blank" rel="noopener">Go</a></td><td align="center">31.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0046</td><td align="left">Permutations</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0046.Permutations" target="_blank" rel="noopener">Go</a></td><td align="center">66.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0047</td><td align="left">Permutations II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0047.Permutations-II" target="_blank" rel="noopener">Go</a></td><td align="center">49.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0048</td><td align="left">Rotate Image</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0048.Rotate-Image" target="_blank" rel="noopener">Go</a></td><td align="center">60.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0049</td><td align="left">Group Anagrams</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0049.Group-Anagrams" target="_blank" rel="noopener">Go</a></td><td align="center">59.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0050</td><td align="left">Pow(x, n)</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0050.Pow(x,-n)" target="_blank" rel="noopener">Go</a></td><td align="center">31.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0051</td><td align="left">N-Queens</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0051.N-Queens" target="_blank" rel="noopener">Go</a></td><td align="center">49.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0052</td><td align="left">N-Queens II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0052.N-Queens-II" target="_blank" rel="noopener">Go</a></td><td align="center">60.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0053</td><td align="left">Maximum Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0053.Maximum-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">47.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0054</td><td align="left">Spiral Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0054.Spiral-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">36.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0055</td><td align="left">Jump Game</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0055.Jump-Game" target="_blank" rel="noopener">Go</a></td><td align="center">35.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0056</td><td align="left">Merge Intervals</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0056.Merge-Intervals" target="_blank" rel="noopener">Go</a></td><td align="center">41.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0057</td><td align="left">Insert Interval</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0057.Insert-Interval" target="_blank" rel="noopener">Go</a></td><td align="center">35.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0058</td><td align="left">Length of Last Word</td><td align="center"></td><td align="center">33.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0059</td><td align="left">Spiral Matrix II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0059.Spiral-Matrix-II" target="_blank" rel="noopener">Go</a></td><td align="center">58.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0060</td><td align="left">Permutation Sequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0060.Permutation-Sequence" target="_blank" rel="noopener">Go</a></td><td align="center">39.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0061</td><td align="left">Rotate List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0061.Rotate-List" target="_blank" rel="noopener">Go</a></td><td align="center">31.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0062</td><td align="left">Unique Paths</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0062.Unique-Paths" target="_blank" rel="noopener">Go</a></td><td align="center">56.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0063</td><td align="left">Unique Paths II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0063.Unique-Paths-II" target="_blank" rel="noopener">Go</a></td><td align="center">35.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0064</td><td align="left">Minimum Path Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0064.Minimum-Path-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">56.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0065</td><td align="left">Valid Number</td><td align="center"></td><td align="center">16.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0066</td><td align="left">Plus One</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0066.Plus-One" target="_blank" rel="noopener">Go</a></td><td align="center">42.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0067</td><td align="left">Add Binary</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0067.Add-Binary" target="_blank" rel="noopener">Go</a></td><td align="center">47.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0068</td><td align="left">Text Justification</td><td align="center"></td><td align="center">29.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0069</td><td align="left">Sqrt(x)</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0069.Sqrt(x)" target="_blank" rel="noopener">Go</a></td><td align="center">35.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0070</td><td align="left">Climbing Stairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0070.Climbing-Stairs" target="_blank" rel="noopener">Go</a></td><td align="center">48.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0071</td><td align="left">Simplify Path</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0071.Simplify-Path" target="_blank" rel="noopener">Go</a></td><td align="center">34.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0072</td><td align="left">Edit Distance</td><td align="center"></td><td align="center">46.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0073</td><td align="left">Set Matrix Zeroes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0073.Set-Matrix-Zeroes" target="_blank" rel="noopener">Go</a></td><td align="center">44.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0074</td><td align="left">Search a 2D Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0074.Search-a-2D-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">38.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0075</td><td align="left">Sort Colors</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0075.Sort-Colors" target="_blank" rel="noopener">Go</a></td><td align="center">49.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0076</td><td align="left">Minimum Window Substring</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0076.Minimum-Window-Substring" target="_blank" rel="noopener">Go</a></td><td align="center">36.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0077</td><td align="left">Combinations</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0077.Combinations" target="_blank" rel="noopener">Go</a></td><td align="center">57.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0078</td><td align="left">Subsets</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0078.Subsets" target="_blank" rel="noopener">Go</a></td><td align="center">65.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0079</td><td align="left">Word Search</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0079.Word-Search" target="_blank" rel="noopener">Go</a></td><td align="center">37.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0080</td><td align="left">Remove Duplicates from Sorted Array II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0080.Remove-Duplicates-from-Sorted-Array-II" target="_blank" rel="noopener">Go</a></td><td align="center">46.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0081</td><td align="left">Search in Rotated Sorted Array II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0081.Search-in-Rotated-Sorted-Array-II" target="_blank" rel="noopener">Go</a></td><td align="center">33.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0082</td><td align="left">Remove Duplicates from Sorted List II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0082.Remove-Duplicates-from-Sorted-List-II" target="_blank" rel="noopener">Go</a></td><td align="center">39.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0083</td><td align="left">Remove Duplicates from Sorted List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0083.Remove-Duplicates-from-Sorted-List" target="_blank" rel="noopener">Go</a></td><td align="center">46.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0084</td><td align="left">Largest Rectangle in Histogram</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0084.Largest-Rectangle-in-Histogram" target="_blank" rel="noopener">Go</a></td><td align="center">37.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0085</td><td align="left">Maximal Rectangle</td><td align="center"></td><td align="center">39.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0086</td><td align="left">Partition List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0086.Partition-List" target="_blank" rel="noopener">Go</a></td><td align="center">43.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0087</td><td align="left">Scramble String</td><td align="center"></td><td align="center">34.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0088</td><td align="left">Merge Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0088.Merge-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">40.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0089</td><td align="left">Gray Code</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0089.Gray-Code" target="_blank" rel="noopener">Go</a></td><td align="center">50.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0090</td><td align="left">Subsets II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0090.Subsets-II" target="_blank" rel="noopener">Go</a></td><td align="center">49.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0091</td><td align="left">Decode Ways</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0091.Decode-Ways" target="_blank" rel="noopener">Go</a></td><td align="center">26.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0092</td><td align="left">Reverse Linked List II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0092.Reverse-Linked-List-II" target="_blank" rel="noopener">Go</a></td><td align="center">40.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0093</td><td align="left">Restore IP Addresses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0093.Restore-IP-Addresses" target="_blank" rel="noopener">Go</a></td><td align="center">37.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0094</td><td align="left">Binary Tree Inorder Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0094.Binary-Tree-Inorder-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">66.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0095</td><td align="left">Unique Binary Search Trees II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0095.Unique-Binary-Search-Trees-II" target="_blank" rel="noopener">Go</a></td><td align="center">42.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0096</td><td align="left">Unique Binary Search Trees</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0096.Unique-Binary-Search-Trees" target="_blank" rel="noopener">Go</a></td><td align="center">54.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0097</td><td align="left">Interleaving String</td><td align="center"></td><td align="center">32.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0098</td><td align="left">Validate Binary Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0098.Validate-Binary-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">28.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0099</td><td align="left">Recover Binary Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0099.Recover-Binary-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">42.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0100</td><td align="left">Same Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0100.Same-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">54.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0101</td><td align="left">Symmetric Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0101.Symmetric-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">48.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0102</td><td align="left">Binary Tree Level Order Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0102.Binary-Tree-Level-Order-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">56.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0103</td><td align="left">Binary Tree Zigzag Level Order Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0103.Binary-Tree-Zigzag-Level-Order-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">50.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0104</td><td align="left">Maximum Depth of Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0104.Maximum-Depth-of-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">68.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0105</td><td align="left">Construct Binary Tree from Preorder and Inorder Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">52.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0106</td><td align="left">Construct Binary Tree from Inorder and Postorder Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">49.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0107</td><td align="left">Binary Tree Level Order Traversal II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0107.Binary-Tree-Level-Order-Traversal-II" target="_blank" rel="noopener">Go</a></td><td align="center">55.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0108</td><td align="left">Convert Sorted Array to Binary Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0108.Convert-Sorted-Array-to-Binary-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">60.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0109</td><td align="left">Convert Sorted List to Binary Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0109.Convert-Sorted-List-to-Binary-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">50.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0110</td><td align="left">Balanced Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0110.Balanced-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">44.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0111</td><td align="left">Minimum Depth of Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0111.Minimum-Depth-of-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">39.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0112</td><td align="left">Path Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0112.Path-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">42.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0113</td><td align="left">Path Sum II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0113.Path-Sum-II" target="_blank" rel="noopener">Go</a></td><td align="center">49.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0114</td><td align="left">Flatten Binary Tree to Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0114.Flatten-Binary-Tree-to-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">52.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0115</td><td align="left">Distinct Subsequences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0115.Distinct-Subsequences" target="_blank" rel="noopener">Go</a></td><td align="center">39.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0116</td><td align="left">Populating Next Right Pointers in Each Node</td><td align="center"></td><td align="center">49.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0117</td><td align="left">Populating Next Right Pointers in Each Node II</td><td align="center"></td><td align="center">42.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0118</td><td align="left">Pascal’s Triangle</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0118.Pascal's-Triangle" target="_blank" rel="noopener">Go</a></td><td align="center">55.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0119</td><td align="left">Pascal’s Triangle II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0119.Pascal's-Triangle-II" target="_blank" rel="noopener">Go</a></td><td align="center">52.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0120</td><td align="left">Triangle</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0120.Triangle" target="_blank" rel="noopener">Go</a></td><td align="center">45.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0121</td><td align="left">Best Time to Buy and Sell Stock</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Go</a></td><td align="center">51.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0122</td><td align="left">Best Time to Buy and Sell Stock II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0122.Best-Time-to-Buy-and-Sell-Stock-II" target="_blank" rel="noopener">Go</a></td><td align="center">58.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0123</td><td align="left">Best Time to Buy and Sell Stock III</td><td align="center"></td><td align="center">40.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0124</td><td align="left">Binary Tree Maximum Path Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0124.Binary-Tree-Maximum-Path-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">35.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0125</td><td align="left">Valid Palindrome</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0125.Valid-Palindrome" target="_blank" rel="noopener">Go</a></td><td align="center">38.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0126</td><td align="left">Word Ladder II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0126.Word-Ladder-II" target="_blank" rel="noopener">Go</a></td><td align="center">23.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0127</td><td align="left">Word Ladder</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0127.Word-Ladder" target="_blank" rel="noopener">Go</a></td><td align="center">32.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0128</td><td align="left">Longest Consecutive Sequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0128.Longest-Consecutive-Sequence" target="_blank" rel="noopener">Go</a></td><td align="center">46.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0129</td><td align="left">Sum Root to Leaf Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0129.Sum-Root-to-Leaf-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">51.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0130</td><td align="left">Surrounded Regions</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0130.Surrounded-Regions" target="_blank" rel="noopener">Go</a></td><td align="center">29.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0131</td><td align="left">Palindrome Partitioning</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0131.Palindrome-Partitioning" target="_blank" rel="noopener">Go</a></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0132</td><td align="left">Palindrome Partitioning II</td><td align="center"></td><td align="center">31.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0133</td><td align="left">Clone Graph</td><td align="center"></td><td align="center">39.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0134</td><td align="left">Gas Station</td><td align="center"></td><td align="center">41.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0135</td><td align="left">Candy</td><td align="center"></td><td align="center">33.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0136</td><td align="left">Single Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0136.Single-Number" target="_blank" rel="noopener">Go</a></td><td align="center">66.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0137</td><td align="left">Single Number II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0137.Single-Number-II" target="_blank" rel="noopener">Go</a></td><td align="center">54.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0138</td><td align="left">Copy List with Random Pointer</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0138.Copy-List-with-Random-Pointer" target="_blank" rel="noopener">Go</a></td><td align="center">41.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0139</td><td align="left">Word Break</td><td align="center"></td><td align="center">41.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0140</td><td align="left">Word Break II</td><td align="center"></td><td align="center">35.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0141</td><td align="left">Linked List Cycle</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0141.Linked-List-Cycle" target="_blank" rel="noopener">Go</a></td><td align="center">43.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0142</td><td align="left">Linked List Cycle II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0142.Linked-List-Cycle-II" target="_blank" rel="noopener">Go</a></td><td align="center">39.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0143</td><td align="left">Reorder List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0143.Reorder-List" target="_blank" rel="noopener">Go</a></td><td align="center">40.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0144</td><td align="left">Binary Tree Preorder Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0144.Binary-Tree-Preorder-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">57.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0145</td><td align="left">Binary Tree Postorder Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0145.Binary-Tree-Postorder-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">57.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0146</td><td align="left">LRU Cache</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0146.LRU-Cache" target="_blank" rel="noopener">Go</a></td><td align="center">36.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0147</td><td align="left">Insertion Sort List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0147.Insertion-Sort-List" target="_blank" rel="noopener">Go</a></td><td align="center">44.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0148</td><td align="left">Sort List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0148.Sort-List" target="_blank" rel="noopener">Go</a></td><td align="center">46.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0149</td><td align="left">Max Points on a Line</td><td align="center"></td><td align="center">17.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0150</td><td align="left">Evaluate Reverse Polish Notation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0150.Evaluate-Reverse-Polish-Notation" target="_blank" rel="noopener">Go</a></td><td align="center">38.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0151</td><td align="left">Reverse Words in a String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0151.Reverse-Words-in-a-String" target="_blank" rel="noopener">Go</a></td><td align="center">24.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0152</td><td align="left">Maximum Product Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0152.Maximum-Product-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">32.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0153</td><td align="left">Find Minimum in Rotated Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0153.Find-Minimum-in-Rotated-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">46.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0154</td><td align="left">Find Minimum in Rotated Sorted Array II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0154.Find-Minimum-in-Rotated-Sorted-Array-II" target="_blank" rel="noopener">Go</a></td><td align="center">42.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0155</td><td align="left">Min Stack</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0155.Min-Stack" target="_blank" rel="noopener">Go</a></td><td align="center">46.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0156</td><td align="left">Binary Tree Upside Down</td><td align="center"></td><td align="center">56.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0157</td><td align="left">Read N Characters Given Read4</td><td align="center"></td><td align="center">37.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0158</td><td align="left">Read N Characters Given Read4 II - Call multiple times</td><td align="center"></td><td align="center">37.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0159</td><td align="left">Longest Substring with At Most Two Distinct Characters</td><td align="center"></td><td align="center">50.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0160</td><td align="left">Intersection of Two Linked Lists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0160.Intersection-of-Two-Linked-Lists" target="_blank" rel="noopener">Go</a></td><td align="center">44.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0161</td><td align="left">One Edit Distance</td><td align="center"></td><td align="center">33.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0162</td><td align="left">Find Peak Element</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0162.Find-Peak-Element" target="_blank" rel="noopener">Go</a></td><td align="center">44.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0163</td><td align="left">Missing Ranges</td><td align="center"></td><td align="center">27.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0164</td><td align="left">Maximum Gap</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0164.Maximum-Gap" target="_blank" rel="noopener">Go</a></td><td align="center">37.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0165</td><td align="left">Compare Version Numbers</td><td align="center"></td><td align="center">30.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0166</td><td align="left">Fraction to Recurring Decimal</td><td align="center"></td><td align="center">22.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0167</td><td align="left">Two Sum II - Input array is sorted</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0167.Two-Sum-II---Input-array-is-sorted" target="_blank" rel="noopener">Go</a></td><td align="center">55.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0168</td><td align="left">Excel Sheet Column Title</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0168.Excel-Sheet-Column-Title" target="_blank" rel="noopener">Go</a></td><td align="center">31.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0169</td><td align="left">Majority Element</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0169.Majority-Element" target="_blank" rel="noopener">Go</a></td><td align="center">60.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0170</td><td align="left">Two Sum III - Data structure design</td><td align="center"></td><td align="center">35.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0171</td><td align="left">Excel Sheet Column Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0171.Excel-Sheet-Column-Number" target="_blank" rel="noopener">Go</a></td><td align="center">57.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0172</td><td align="left">Factorial Trailing Zeroes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0172.Factorial-Trailing-Zeroes" target="_blank" rel="noopener">Go</a></td><td align="center">38.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0173</td><td align="left">Binary Search Tree Iterator</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0173.Binary-Search-Tree-Iterator" target="_blank" rel="noopener">Go</a></td><td align="center">60.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0174</td><td align="left">Dungeon Game</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0174.Dungeon-Game" target="_blank" rel="noopener">Go</a></td><td align="center">33.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0175</td><td align="left">Combine Two Tables</td><td align="center"></td><td align="center">64.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0176</td><td align="left">Second Highest Salary</td><td align="center"></td><td align="center">33.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0177</td><td align="left">Nth Highest Salary</td><td align="center"></td><td align="center">33.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0178</td><td align="left">Rank Scores</td><td align="center"></td><td align="center">50.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0179</td><td align="left">Largest Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0179.Largest-Number" target="_blank" rel="noopener">Go</a></td><td align="center">30.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0180</td><td align="left">Consecutive Numbers</td><td align="center"></td><td align="center">42.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0181</td><td align="left">Employees Earning More Than Their Managers</td><td align="center"></td><td align="center">60.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0182</td><td align="left">Duplicate Emails</td><td align="center"></td><td align="center">64.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0183</td><td align="left">Customers Who Never Order</td><td align="center"></td><td align="center">57.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0184</td><td align="left">Department Highest Salary</td><td align="center"></td><td align="center">40.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0185</td><td align="left">Department Top Three Salaries</td><td align="center"></td><td align="center">39.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0186</td><td align="left">Reverse Words in a String II</td><td align="center"></td><td align="center">45.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0187</td><td align="left">Repeated DNA Sequences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0187.Repeated-DNA-Sequences" target="_blank" rel="noopener">Go</a></td><td align="center">41.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0188</td><td align="left">Best Time to Buy and Sell Stock IV</td><td align="center"></td><td align="center">29.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0189</td><td align="left">Rotate Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0189.Rotate-Array" target="_blank" rel="noopener">Go</a></td><td align="center">36.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0190</td><td align="left">Reverse Bits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0190.Reverse-Bits" target="_blank" rel="noopener">Go</a></td><td align="center">42.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0191</td><td align="left">Number of 1 Bits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0191.Number-of-1-Bits" target="_blank" rel="noopener">Go</a></td><td align="center">54.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0192</td><td align="left">Word Frequency</td><td align="center"></td><td align="center">25.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0193</td><td align="left">Valid Phone Numbers</td><td align="center"></td><td align="center">25.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0194</td><td align="left">Transpose File</td><td align="center"></td><td align="center">24.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0195</td><td align="left">Tenth Line</td><td align="center"></td><td align="center">32.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0196</td><td align="left">Delete Duplicate Emails</td><td align="center"></td><td align="center">45.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0197</td><td align="left">Rising Temperature</td><td align="center"></td><td align="center">40.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0198</td><td align="left">House Robber</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0198.House-Robber" target="_blank" rel="noopener">Go</a></td><td align="center">43.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0199</td><td align="left">Binary Tree Right Side View</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0199.Binary-Tree-Right-Side-View" target="_blank" rel="noopener">Go</a></td><td align="center">56.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0200</td><td align="left">Number of Islands</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0200.Number-of-Islands" target="_blank" rel="noopener">Go</a></td><td align="center">49.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0201</td><td align="left">Bitwise AND of Numbers Range</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0201.Bitwise-AND-of-Numbers-Range" target="_blank" rel="noopener">Go</a></td><td align="center">39.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0202</td><td align="left">Happy Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0202.Happy-Number" target="_blank" rel="noopener">Go</a></td><td align="center">51.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0203</td><td align="left">Remove Linked List Elements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0203.Remove-Linked-List-Elements" target="_blank" rel="noopener">Go</a></td><td align="center">39.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0204</td><td align="left">Count Primes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0204.Count-Primes" target="_blank" rel="noopener">Go</a></td><td align="center">32.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0205</td><td align="left">Isomorphic Strings</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0205.Isomorphic-Strings" target="_blank" rel="noopener">Go</a></td><td align="center">40.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0206</td><td align="left">Reverse Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0206.Reverse-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">65.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0207</td><td align="left">Course Schedule</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0207.Course-Schedule" target="_blank" rel="noopener">Go</a></td><td align="center">44.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0208</td><td align="left">Implement Trie (Prefix Tree)</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0208.Implement-Trie-(Prefix-Tree)" target="_blank" rel="noopener">Go</a></td><td align="center">52.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0209</td><td align="left">Minimum Size Subarray Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0209.Minimum-Size-Subarray-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">39.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0210</td><td align="left">Course Schedule II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0210.Course-Schedule-II" target="_blank" rel="noopener">Go</a></td><td align="center">42.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0211</td><td align="left">Design Add and Search Words Data Structure</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0211.Design-Add-and-Search-Words-Data-Structure" target="_blank" rel="noopener">Go</a></td><td align="center">40.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0212</td><td align="left">Word Search II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0212.Word-Search-II" target="_blank" rel="noopener">Go</a></td><td align="center">37.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0213</td><td align="left">House Robber II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0213.House-Robber-II" target="_blank" rel="noopener">Go</a></td><td align="center">37.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0214</td><td align="left">Shortest Palindrome</td><td align="center"></td><td align="center">30.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0215</td><td align="left">Kth Largest Element in an Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0215.Kth-Largest-Element-in-an-Array" target="_blank" rel="noopener">Go</a></td><td align="center">58.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0216</td><td align="left">Combination Sum III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0216.Combination-Sum-III" target="_blank" rel="noopener">Go</a></td><td align="center">60.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0217</td><td align="left">Contains Duplicate</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0217.Contains-Duplicate" target="_blank" rel="noopener">Go</a></td><td align="center">56.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0218</td><td align="left">The Skyline Problem</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0218.The-Skyline-Problem" target="_blank" rel="noopener">Go</a></td><td align="center">36.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0219</td><td align="left">Contains Duplicate II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0219.Contains-Duplicate-II" target="_blank" rel="noopener">Go</a></td><td align="center">38.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0220</td><td align="left">Contains Duplicate III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0220.Contains-Duplicate-III" target="_blank" rel="noopener">Go</a></td><td align="center">21.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0221</td><td align="left">Maximal Square</td><td align="center"></td><td align="center">39.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0222</td><td align="left">Count Complete Tree Nodes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0222.Count-Complete-Tree-Nodes" target="_blank" rel="noopener">Go</a></td><td align="center">49.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0223</td><td align="left">Rectangle Area</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0223.Rectangle-Area" target="_blank" rel="noopener">Go</a></td><td align="center">38.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0224</td><td align="left">Basic Calculator</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0224.Basic-Calculator" target="_blank" rel="noopener">Go</a></td><td align="center">38.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0225</td><td align="left">Implement Stack using Queues</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0225.Implement-Stack-using-Queues" target="_blank" rel="noopener">Go</a></td><td align="center">47.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0226</td><td align="left">Invert Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0226.Invert-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0227</td><td align="left">Basic Calculator II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0227.Basic-Calculator-II" target="_blank" rel="noopener">Go</a></td><td align="center">38.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0228</td><td align="left">Summary Ranges</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0228.Summary-Ranges" target="_blank" rel="noopener">Go</a></td><td align="center">42.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0229</td><td align="left">Majority Element II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0229.Majority-Element-II" target="_blank" rel="noopener">Go</a></td><td align="center">38.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0230</td><td align="left">Kth Smallest Element in a BST</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0230.Kth-Smallest-Element-in-a-BST" target="_blank" rel="noopener">Go</a></td><td align="center">62.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0231</td><td align="left">Power of Two</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0231.Power-of-Two" target="_blank" rel="noopener">Go</a></td><td align="center">43.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0232</td><td align="left">Implement Queue using Stacks</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0232.Implement-Queue-using-Stacks" target="_blank" rel="noopener">Go</a></td><td align="center">52.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0233</td><td align="left">Number of Digit One</td><td align="center"></td><td align="center">31.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0234</td><td align="left">Palindrome Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0234.Palindrome-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">40.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0235</td><td align="left">Lowest Common Ancestor of a Binary Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0235.Lowest-Common-Ancestor-of-a-Binary-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">51.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0236</td><td align="left">Lowest Common Ancestor of a Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0236.Lowest-Common-Ancestor-of-a-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">49.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0237</td><td align="left">Delete Node in a Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0237.Delete-Node-in-a-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0238</td><td align="left">Product of Array Except Self</td><td align="center"></td><td align="center">61.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0239</td><td align="left">Sliding Window Maximum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0239.Sliding-Window-Maximum" target="_blank" rel="noopener">Go</a></td><td align="center">44.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0240</td><td align="left">Search a 2D Matrix II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0240.Search-a-2D-Matrix-II" target="_blank" rel="noopener">Go</a></td><td align="center">45.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0241</td><td align="left">Different Ways to Add Parentheses</td><td align="center"></td><td align="center">57.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0242</td><td align="left">Valid Anagram</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0242.Valid-Anagram" target="_blank" rel="noopener">Go</a></td><td align="center">58.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0243</td><td align="left">Shortest Word Distance</td><td align="center"></td><td align="center">62.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0244</td><td align="left">Shortest Word Distance II</td><td align="center"></td><td align="center">54.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0245</td><td align="left">Shortest Word Distance III</td><td align="center"></td><td align="center">56.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0246</td><td align="left">Strobogrammatic Number</td><td align="center"></td><td align="center">46.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0247</td><td align="left">Strobogrammatic Number II</td><td align="center"></td><td align="center">48.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0248</td><td align="left">Strobogrammatic Number III</td><td align="center"></td><td align="center">40.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0249</td><td align="left">Group Shifted Strings</td><td align="center"></td><td align="center">58.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0250</td><td align="left">Count Univalue Subtrees</td><td align="center"></td><td align="center">53.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0251</td><td align="left">Flatten 2D Vector</td><td align="center"></td><td align="center">46.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0252</td><td align="left">Meeting Rooms</td><td align="center"></td><td align="center">55.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0253</td><td align="left">Meeting Rooms II</td><td align="center"></td><td align="center">47.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0254</td><td align="left">Factor Combinations</td><td align="center"></td><td align="center">47.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0255</td><td align="left">Verify Preorder Sequence in Binary Search Tree</td><td align="center"></td><td align="center">46.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0256</td><td align="left">Paint House</td><td align="center"></td><td align="center">53.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0257</td><td align="left">Binary Tree Paths</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0257.Binary-Tree-Paths" target="_blank" rel="noopener">Go</a></td><td align="center">53.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0258</td><td align="left">Add Digits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0258.Add-Digits" target="_blank" rel="noopener">Go</a></td><td align="center">58.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0259</td><td align="left">3Sum Smaller</td><td align="center"></td><td align="center">49.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0260</td><td align="left">Single Number III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0260.Single-Number-III" target="_blank" rel="noopener">Go</a></td><td align="center">65.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0261</td><td align="left">Graph Valid Tree</td><td align="center"></td><td align="center">43.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0262</td><td align="left">Trips and Users</td><td align="center"></td><td align="center">35.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0263</td><td align="left">Ugly Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0263.Ugly-Number" target="_blank" rel="noopener">Go</a></td><td align="center">41.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0264</td><td align="left">Ugly Number II</td><td align="center"></td><td align="center">42.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0265</td><td align="left">Paint House II</td><td align="center"></td><td align="center">45.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0266</td><td align="left">Palindrome Permutation</td><td align="center"></td><td align="center">62.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0267</td><td align="left">Palindrome Permutation II</td><td align="center"></td><td align="center">37.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0268</td><td align="left"><a href="https://leetcode.com/problems/missing-number/" target="_blank" rel="noopener">Missing Number</a></td><td align="center"><a href="https://billbliu.github.io/2020/03/25/leetcode-0268-missing-number/">Go</a></td><td align="center">55.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0269</td><td align="left">Alien Dictionary</td><td align="center"></td><td align="center">33.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0270</td><td align="left">Closest Binary Search Tree Value</td><td align="center"></td><td align="center">50.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0271</td><td align="left">Encode and Decode Strings</td><td align="center"></td><td align="center">32.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0272</td><td align="left">Closest Binary Search Tree Value II</td><td align="center"></td><td align="center">52.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0273</td><td align="left">Integer to English Words</td><td align="center"></td><td align="center">28.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0274</td><td align="left">H-Index</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0274.H-Index" target="_blank" rel="noopener">Go</a></td><td align="center">36.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0275</td><td align="left">H-Index II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0275.H-Index-II" target="_blank" rel="noopener">Go</a></td><td align="center">36.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0276</td><td align="left">Paint Fence</td><td align="center"></td><td align="center">39.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0277</td><td align="left">Find the Celebrity</td><td align="center"></td><td align="center">43.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0278</td><td align="left">First Bad Version</td><td align="center"></td><td align="center">37.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0279</td><td align="left">Perfect Squares</td><td align="center"></td><td align="center">49.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0280</td><td align="left">Wiggle Sort</td><td align="center"></td><td align="center">64.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0281</td><td align="left">Zigzag Iterator</td><td align="center"></td><td align="center">59.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0282</td><td align="left">Expression Add Operators</td><td align="center"></td><td align="center">36.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0283</td><td align="left">Move Zeroes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0283.Move-Zeroes" target="_blank" rel="noopener">Go</a></td><td align="center">58.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0284</td><td align="left">Peeking Iterator</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0284.Peeking-Iterator" target="_blank" rel="noopener">Go</a></td><td align="center">50.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0285</td><td align="left">Inorder Successor in BST</td><td align="center"></td><td align="center">43.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0286</td><td align="left">Walls and Gates</td><td align="center"></td><td align="center">56.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0287</td><td align="left">Find the Duplicate Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0287.Find-the-Duplicate-Number" target="_blank" rel="noopener">Go</a></td><td align="center">57.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0288</td><td align="left">Unique Word Abbreviation</td><td align="center"></td><td align="center">23.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0289</td><td align="left">Game of Life</td><td align="center"></td><td align="center">58.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0290</td><td align="left">Word Pattern</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0290.Word-Pattern" target="_blank" rel="noopener">Go</a></td><td align="center">38.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0291</td><td align="left">Word Pattern II</td><td align="center"></td><td align="center">44.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0292</td><td align="left">Nim Game</td><td align="center"></td><td align="center">55.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0293</td><td align="left">Flip Game</td><td align="center"></td><td align="center">61.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0294</td><td align="left">Flip Game II</td><td align="center"></td><td align="center">50.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0295</td><td align="left">Find Median from Data Stream</td><td align="center"></td><td align="center">47.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0296</td><td align="left">Best Meeting Point</td><td align="center"></td><td align="center">58.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0297</td><td align="left">Serialize and Deserialize Binary Tree</td><td align="center"></td><td align="center">50.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0298</td><td align="left">Binary Tree Longest Consecutive Sequence</td><td align="center"></td><td align="center">48.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0299</td><td align="left">Bulls and Cows</td><td align="center"></td><td align="center">44.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0300</td><td align="left">Longest Increasing Subsequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0300.Longest-Increasing-Subsequence" target="_blank" rel="noopener">Go</a></td><td align="center">44.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0301</td><td align="left">Remove Invalid Parentheses</td><td align="center"></td><td align="center">44.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0302</td><td align="left">Smallest Rectangle Enclosing Black Pixels</td><td align="center"></td><td align="center">52.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0303</td><td align="left">Range Sum Query - Immutable</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0303.Range-Sum-Query---Immutable" target="_blank" rel="noopener">Go</a></td><td align="center">47.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0304</td><td align="left">Range Sum Query 2D - Immutable</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0304.Range-Sum-Query-2D---Immutable" target="_blank" rel="noopener">Go</a></td><td align="center">40.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0305</td><td align="left">Number of Islands II</td><td align="center"></td><td align="center">39.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0306</td><td align="left">Additive Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0306.Additive-Number" target="_blank" rel="noopener">Go</a></td><td align="center">29.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0307</td><td align="left">Range Sum Query - Mutable</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0307.Range-Sum-Query---Mutable" target="_blank" rel="noopener">Go</a></td><td align="center">36.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0308</td><td align="left">Range Sum Query 2D - Mutable</td><td align="center"></td><td align="center">37.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0309</td><td align="left">Best Time to Buy and Sell Stock with Cooldown</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0309.Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" target="_blank" rel="noopener">Go</a></td><td align="center">48.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0310</td><td align="left">Minimum Height Trees</td><td align="center"></td><td align="center">34.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0311</td><td align="left">Sparse Matrix Multiplication</td><td align="center"></td><td align="center">64.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0312</td><td align="left">Burst Balloons</td><td align="center"></td><td align="center">53.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0313</td><td align="left">Super Ugly Number</td><td align="center"></td><td align="center">46.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0314</td><td align="left">Binary Tree Vertical Order Traversal</td><td align="center"></td><td align="center">47.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0315</td><td align="left">Count of Smaller Numbers After Self</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0315.Count-of-Smaller-Numbers-After-Self" target="_blank" rel="noopener">Go</a></td><td align="center">42.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0316</td><td align="left">Remove Duplicate Letters</td><td align="center"></td><td align="center">39.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0317</td><td align="left">Shortest Distance from All Buildings</td><td align="center"></td><td align="center">42.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0318</td><td align="left">Maximum Product of Word Lengths</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0318.Maximum-Product-of-Word-Lengths" target="_blank" rel="noopener">Go</a></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0319</td><td align="left">Bulb Switcher</td><td align="center"></td><td align="center">45.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0320</td><td align="left">Generalized Abbreviation</td><td align="center"></td><td align="center">53.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0321</td><td align="left">Create Maximum Number</td><td align="center"></td><td align="center">27.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0322</td><td align="left">Coin Change</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0322.Coin-Change" target="_blank" rel="noopener">Go</a></td><td align="center">37.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0323</td><td align="left">Number of Connected Components in an Undirected Graph</td><td align="center"></td><td align="center">58.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0324</td><td align="left">Wiggle Sort II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0324.Wiggle-Sort-II" target="_blank" rel="noopener">Go</a></td><td align="center">30.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0325</td><td align="left">Maximum Size Subarray Sum Equals k</td><td align="center"></td><td align="center">47.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0326</td><td align="left">Power of Three</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0326.Power-of-Three" target="_blank" rel="noopener">Go</a></td><td align="center">42.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0327</td><td align="left">Count of Range Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0327.Count-of-Range-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">36.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0328</td><td align="left">Odd Even Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0328.Odd-Even-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">57.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0329</td><td align="left">Longest Increasing Path in a Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0329.Longest-Increasing-Path-in-a-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">45.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0330</td><td align="left">Patching Array</td><td align="center"></td><td align="center">35.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0331</td><td align="left">Verify Preorder Serialization of a Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0331.Verify-Preorder-Serialization-of-a-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">41.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0332</td><td align="left">Reconstruct Itinerary</td><td align="center"></td><td align="center">38.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0333</td><td align="left">Largest BST Subtree</td><td align="center"></td><td align="center">38.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0334</td><td align="left">Increasing Triplet Subsequence</td><td align="center"></td><td align="center">40.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0335</td><td align="left">Self Crossing</td><td align="center"></td><td align="center">28.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0336</td><td align="left">Palindrome Pairs</td><td align="center"></td><td align="center">34.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0337</td><td align="left">House Robber III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0337.House-Robber-III" target="_blank" rel="noopener">Go</a></td><td align="center">52.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0338</td><td align="left">Counting Bits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0338.Counting-Bits" target="_blank" rel="noopener">Go</a></td><td align="center">70.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0339</td><td align="left">Nested List Weight Sum</td><td align="center"></td><td align="center">76.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0340</td><td align="left">Longest Substring with At Most K Distinct Characters</td><td align="center"></td><td align="center">45.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0341</td><td align="left">Flatten Nested List Iterator</td><td align="center"></td><td align="center">54.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0342</td><td align="left">Power of Four</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0342.Power-of-Four" target="_blank" rel="noopener">Go</a></td><td align="center">41.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0343</td><td align="left">Integer Break</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0343.Integer-Break" target="_blank" rel="noopener">Go</a></td><td align="center">51.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0344</td><td align="left">Reverse String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0344.Reverse-String" target="_blank" rel="noopener">Go</a></td><td align="center">70.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0345</td><td align="left">Reverse Vowels of a String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0345.Reverse-Vowels-of-a-String" target="_blank" rel="noopener">Go</a></td><td align="center">45.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0346</td><td align="left">Moving Average from Data Stream</td><td align="center"></td><td align="center">73.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0347</td><td align="left">Top K Frequent Elements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0347.Top-K-Frequent-Elements" target="_blank" rel="noopener">Go</a></td><td align="center">62.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0348</td><td align="left">Design Tic-Tac-Toe</td><td align="center"></td><td align="center">55.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0349</td><td align="left">Intersection of Two Arrays</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0349.Intersection-of-Two-Arrays" target="_blank" rel="noopener">Go</a></td><td align="center">65.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0350</td><td align="left">Intersection of Two Arrays II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0350.Intersection-of-Two-Arrays-II" target="_blank" rel="noopener">Go</a></td><td align="center">52.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0351</td><td align="left">Android Unlock Patterns</td><td align="center"></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0352</td><td align="left">Data Stream as Disjoint Intervals</td><td align="center"></td><td align="center">48.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0353</td><td align="left">Design Snake Game</td><td align="center"></td><td align="center">36.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0354</td><td align="left">Russian Doll Envelopes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0354.Russian-Doll-Envelopes" target="_blank" rel="noopener">Go</a></td><td align="center">36.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0355</td><td align="left">Design Twitter</td><td align="center"></td><td align="center">31.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0356</td><td align="left">Line Reflection</td><td align="center"></td><td align="center">33.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0357</td><td align="left">Count Numbers with Unique Digits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0357.Count-Numbers-with-Unique-Digits" target="_blank" rel="noopener">Go</a></td><td align="center">48.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0358</td><td align="left">Rearrange String k Distance Apart</td><td align="center"></td><td align="center">35.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0359</td><td align="left">Logger Rate Limiter</td><td align="center"></td><td align="center">72.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0360</td><td align="left">Sort Transformed Array</td><td align="center"></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0361</td><td align="left">Bomb Enemy</td><td align="center"></td><td align="center">46.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0362</td><td align="left">Design Hit Counter</td><td align="center"></td><td align="center">65.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0363</td><td align="left">Max Sum of Rectangle No Larger Than K</td><td align="center"></td><td align="center">38.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0364</td><td align="left">Nested List Weight Sum II</td><td align="center"></td><td align="center">63.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0365</td><td align="left">Water and Jug Problem</td><td align="center"></td><td align="center">31.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0366</td><td align="left">Find Leaves of Binary Tree</td><td align="center"></td><td align="center">72.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0367</td><td align="left">Valid Perfect Square</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0367.Valid-Perfect-Square" target="_blank" rel="noopener">Go</a></td><td align="center">42.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0368</td><td align="left">Largest Divisible Subset</td><td align="center"></td><td align="center">38.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0369</td><td align="left">Plus One Linked List</td><td align="center"></td><td align="center">59.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0370</td><td align="left">Range Addition</td><td align="center"></td><td align="center">63.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0371</td><td align="left">Sum of Two Integers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0371.Sum-of-Two-Integers" target="_blank" rel="noopener">Go</a></td><td align="center">50.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0372</td><td align="left">Super Pow</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0372.Super-Pow" target="_blank" rel="noopener">Go</a></td><td align="center">36.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0373</td><td align="left">Find K Pairs with Smallest Sums</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0373.Find-K-Pairs-with-Smallest-Sums" target="_blank" rel="noopener">Go</a></td><td align="center">37.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0374</td><td align="left">Guess Number Higher or Lower</td><td align="center"></td><td align="center">44.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0375</td><td align="left">Guess Number Higher or Lower II</td><td align="center"></td><td align="center">42.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0376</td><td align="left">Wiggle Subsequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0376.Wiggle-Subsequence" target="_blank" rel="noopener">Go</a></td><td align="center">42.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0377</td><td align="left">Combination Sum IV</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0378</td><td align="left">Kth Smallest Element in a Sorted Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0378.Kth-Smallest-Element-in-a-Sorted-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">56.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0379</td><td align="left">Design Phone Directory</td><td align="center"></td><td align="center">48.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0380</td><td align="left">Insert Delete GetRandom O(1)</td><td align="center"></td><td align="center">49.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0381</td><td align="left">Insert Delete GetRandom O(1) - Duplicates allowed</td><td align="center"></td><td align="center">34.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0382</td><td align="left">Linked List Random Node</td><td align="center"></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0383</td><td align="left">Ransom Note</td><td align="center"></td><td align="center">53.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0384</td><td align="left">Shuffle an Array</td><td align="center"></td><td align="center">54.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0385</td><td align="left">Mini Parser</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0385.Mini-Parser" target="_blank" rel="noopener">Go</a></td><td align="center">34.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0386</td><td align="left">Lexicographical Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0386.Lexicographical-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">54.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0387</td><td align="left">First Unique Character in a String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0387.First-Unique-Character-in-a-String" target="_blank" rel="noopener">Go</a></td><td align="center">53.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0388</td><td align="left">Longest Absolute File Path</td><td align="center"></td><td align="center">43.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0389</td><td align="left">Find the Difference</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0389.Find-the-Difference" target="_blank" rel="noopener">Go</a></td><td align="center">57.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0390</td><td align="left">Elimination Game</td><td align="center"></td><td align="center">45.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0391</td><td align="left">Perfect Rectangle</td><td align="center"></td><td align="center">31.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0392</td><td align="left">Is Subsequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0392.Is-Subsequence" target="_blank" rel="noopener">Go</a></td><td align="center">49.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0393</td><td align="left">UTF-8 Validation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0393.UTF-8-Validation" target="_blank" rel="noopener">Go</a></td><td align="center">38.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0394</td><td align="left">Decode String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0394.Decode-String" target="_blank" rel="noopener">Go</a></td><td align="center">52.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0395</td><td align="left">Longest Substring with At Least K Repeating Characters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0395.Longest-Substring-with-At-Least-K-Repeating-Characters" target="_blank" rel="noopener">Go</a></td><td align="center">43.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0396</td><td align="left">Rotate Function</td><td align="center"></td><td align="center">36.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0397</td><td align="left">Integer Replacement</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0397.Integer-Replacement" target="_blank" rel="noopener">Go</a></td><td align="center">33.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0398</td><td align="left">Random Pick Index</td><td align="center"></td><td align="center">58.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0399</td><td align="left">Evaluate Division</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0399.Evaluate-Division" target="_blank" rel="noopener">Go</a></td><td align="center">54.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0400</td><td align="left">Nth Digit</td><td align="center"></td><td align="center">32.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0401</td><td align="left">Binary Watch</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0401.Binary-Watch" target="_blank" rel="noopener">Go</a></td><td align="center">48.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0402</td><td align="left">Remove K Digits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0402.Remove-K-Digits" target="_blank" rel="noopener">Go</a></td><td align="center">28.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0403</td><td align="left">Frog Jump</td><td align="center"></td><td align="center">41.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0404</td><td align="left">Sum of Left Leaves</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0404.Sum-of-Left-Leaves" target="_blank" rel="noopener">Go</a></td><td align="center">52.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0405</td><td align="left">Convert a Number to Hexadecimal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0405.Convert-a-Number-to-Hexadecimal" target="_blank" rel="noopener">Go</a></td><td align="center">44.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0406</td><td align="left">Queue Reconstruction by Height</td><td align="center"></td><td align="center">68.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0407</td><td align="left">Trapping Rain Water II</td><td align="center"></td><td align="center">44.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0408</td><td align="left">Valid Word Abbreviation</td><td align="center"></td><td align="center">31.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0409</td><td align="left">Longest Palindrome</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0409.Longest-Palindrome" target="_blank" rel="noopener">Go</a></td><td align="center">52.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0410</td><td align="left">Split Array Largest Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0410.Split-Array-Largest-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">46.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0411</td><td align="left">Minimum Unique Word Abbreviation</td><td align="center"></td><td align="center">37.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0412</td><td align="left">Fizz Buzz</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0412.Fizz-Buzz" target="_blank" rel="noopener">Go</a></td><td align="center">63.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0413</td><td align="left">Arithmetic Slices</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0413.Arithmetic-Slices" target="_blank" rel="noopener">Go</a></td><td align="center">60.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0414</td><td align="left">Third Maximum Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0414.Third-Maximum-Number" target="_blank" rel="noopener">Go</a></td><td align="center">30.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0415</td><td align="left">Add Strings</td><td align="center"></td><td align="center">48.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0416</td><td align="left">Partition Equal Subset Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0416.Partition-Equal-Subset-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">44.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0417</td><td align="left">Pacific Atlantic Water Flow</td><td align="center"></td><td align="center">42.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0418</td><td align="left">Sentence Screen Fitting</td><td align="center"></td><td align="center">33.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0419</td><td align="left">Battleships in a Board</td><td align="center"></td><td align="center">71.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0420</td><td align="left">Strong Password Checker</td><td align="center"></td><td align="center">14.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0421</td><td align="left">Maximum XOR of Two Numbers in an Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0421.Maximum-XOR-of-Two-Numbers-in-an-Array" target="_blank" rel="noopener">Go</a></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0422</td><td align="left">Valid Word Square</td><td align="center"></td><td align="center">38.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0423</td><td align="left">Reconstruct Original Digits from English</td><td align="center"></td><td align="center">47.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0424</td><td align="left">Longest Repeating Character Replacement</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0424.Longest-Repeating-Character-Replacement" target="_blank" rel="noopener">Go</a></td><td align="center">48.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0425</td><td align="left">Word Squares</td><td align="center"></td><td align="center">50.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0426</td><td align="left">Convert Binary Search Tree to Sorted Doubly Linked List</td><td align="center"></td><td align="center">61.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0427</td><td align="left">Construct Quad Tree</td><td align="center"></td><td align="center">62.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0428</td><td align="left">Serialize and Deserialize N-ary Tree</td><td align="center"></td><td align="center">61.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0429</td><td align="left">N-ary Tree Level Order Traversal</td><td align="center"></td><td align="center">66.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0430</td><td align="left">Flatten a Multilevel Doubly Linked List</td><td align="center"></td><td align="center">56.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0431</td><td align="left">Encode N-ary Tree to Binary Tree</td><td align="center"></td><td align="center">74.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0432</td><td align="left">All O`one Data Structure</td><td align="center"></td><td align="center">33.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0433</td><td align="left">Minimum Genetic Mutation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0433.Minimum-Genetic-Mutation" target="_blank" rel="noopener">Go</a></td><td align="center">43.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0434</td><td align="left">Number of Segments in a String</td><td align="center"></td><td align="center">37.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0435</td><td align="left">Non-overlapping Intervals</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0435.Non-overlapping-Intervals" target="_blank" rel="noopener">Go</a></td><td align="center">43.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0436</td><td align="left">Find Right Interval</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0436.Find-Right-Interval" target="_blank" rel="noopener">Go</a></td><td align="center">48.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0437</td><td align="left">Path Sum III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0437.Path-Sum-III" target="_blank" rel="noopener">Go</a></td><td align="center">48.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0438</td><td align="left">Find All Anagrams in a String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0438.Find-All-Anagrams-in-a-String" target="_blank" rel="noopener">Go</a></td><td align="center">45.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0439</td><td align="left">Ternary Expression Parser</td><td align="center"></td><td align="center">56.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0440</td><td align="left">K-th Smallest in Lexicographical Order</td><td align="center"></td><td align="center">29.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0441</td><td align="left">Arranging Coins</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0441.Arranging-Coins" target="_blank" rel="noopener">Go</a></td><td align="center">42.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0442</td><td align="left">Find All Duplicates in an Array</td><td align="center"></td><td align="center">69.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0443</td><td align="left">String Compression</td><td align="center"></td><td align="center">43.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0444</td><td align="left">Sequence Reconstruction</td><td align="center"></td><td align="center">23.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0445</td><td align="left">Add Two Numbers II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0445.Add-Two-Numbers-II" target="_blank" rel="noopener">Go</a></td><td align="center">56.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0446</td><td align="left">Arithmetic Slices II - Subsequence</td><td align="center"></td><td align="center">33.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0447</td><td align="left">Number of Boomerangs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0447.Number-of-Boomerangs" target="_blank" rel="noopener">Go</a></td><td align="center">52.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0448</td><td align="left">Find All Numbers Disappeared in an Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0448.Find-All-Numbers-Disappeared-in-an-Array" target="_blank" rel="noopener">Go</a></td><td align="center">56.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0449</td><td align="left">Serialize and Deserialize BST</td><td align="center"></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0450</td><td align="left">Delete Node in a BST</td><td align="center"></td><td align="center">45.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0451</td><td align="left">Sort Characters By Frequency</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0451.Sort-Characters-By-Frequency" target="_blank" rel="noopener">Go</a></td><td align="center">64.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0452</td><td align="left">Minimum Number of Arrows to Burst Balloons</td><td align="center"></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0453</td><td align="left">Minimum Moves to Equal Array Elements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0453.Minimum-Moves-to-Equal-Array-Elements" target="_blank" rel="noopener">Go</a></td><td align="center">50.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0454</td><td align="left">4Sum II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0454.4Sum-II" target="_blank" rel="noopener">Go</a></td><td align="center">54.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0455</td><td align="left">Assign Cookies</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0455.Assign-Cookies" target="_blank" rel="noopener">Go</a></td><td align="center">50.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0456</td><td align="left">132 Pattern</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0456.132-Pattern" target="_blank" rel="noopener">Go</a></td><td align="center">30.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0457</td><td align="left">Circular Array Loop</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0457.Circular-Array-Loop" target="_blank" rel="noopener">Go</a></td><td align="center">30.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0458</td><td align="left">Poor Pigs</td><td align="center"></td><td align="center">54.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0459</td><td align="left">Repeated Substring Pattern</td><td align="center"></td><td align="center">43.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0460</td><td align="left">LFU Cache</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0460.LFU-Cache" target="_blank" rel="noopener">Go</a></td><td align="center">36.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0461</td><td align="left">Hamming Distance</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0461.Hamming-Distance" target="_blank" rel="noopener">Go</a></td><td align="center">73.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0462</td><td align="left">Minimum Moves to Equal Array Elements II</td><td align="center"></td><td align="center">54.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0463</td><td align="left">Island Perimeter</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0463.Island-Perimeter" target="_blank" rel="noopener">Go</a></td><td align="center">66.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0464</td><td align="left">Can I Win</td><td align="center"></td><td align="center">29.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0465</td><td align="left">Optimal Account Balancing</td><td align="center"></td><td align="center">48.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0466</td><td align="left">Count The Repetitions</td><td align="center"></td><td align="center">28.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0467</td><td align="left">Unique Substrings in Wraparound String</td><td align="center"></td><td align="center">36.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0468</td><td align="left">Validate IP Address</td><td align="center"></td><td align="center">25.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0469</td><td align="left">Convex Polygon</td><td align="center"></td><td align="center">37.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0470</td><td align="left">Implement Rand10() Using Rand7()</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0470.Implement-Rand10()-Using-Rand7()" target="_blank" rel="noopener">Go</a></td><td align="center">46.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0471</td><td align="left">Encode String with Shortest Length</td><td align="center"></td><td align="center">49.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0472</td><td align="left">Concatenated Words</td><td align="center"></td><td align="center">43.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0473</td><td align="left">Matchsticks to Square</td><td align="center"></td><td align="center">38.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0474</td><td align="left">Ones and Zeroes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0474.Ones-and-Zeroes" target="_blank" rel="noopener">Go</a></td><td align="center">43.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0475</td><td align="left">Heaters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0475.Heaters" target="_blank" rel="noopener">Go</a></td><td align="center">33.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0476</td><td align="left">Number Complement</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0476.Number-Complement" target="_blank" rel="noopener">Go</a></td><td align="center">65.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0477</td><td align="left">Total Hamming Distance</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0477.Total-Hamming-Distance" target="_blank" rel="noopener">Go</a></td><td align="center">50.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0478</td><td align="left">Generate Random Point in a Circle</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0478.Generate-Random-Point-in-a-Circle" target="_blank" rel="noopener">Go</a></td><td align="center">39.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0479</td><td align="left">Largest Palindrome Product</td><td align="center"></td><td align="center">29.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0480</td><td align="left">Sliding Window Median</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0480.Sliding-Window-Median" target="_blank" rel="noopener">Go</a></td><td align="center">38.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0481</td><td align="left">Magical String</td><td align="center"></td><td align="center">48.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0482</td><td align="left">License Key Formatting</td><td align="center"></td><td align="center">43.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0483</td><td align="left">Smallest Good Base</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0483.Smallest-Good-Base" target="_blank" rel="noopener">Go</a></td><td align="center">36.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0484</td><td align="left">Find Permutation</td><td align="center"></td><td align="center">64.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0485</td><td align="left">Max Consecutive Ones</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0485.Max-Consecutive-Ones" target="_blank" rel="noopener">Go</a></td><td align="center">52.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0486</td><td align="left">Predict the Winner</td><td align="center"></td><td align="center">48.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0487</td><td align="left">Max Consecutive Ones II</td><td align="center"></td><td align="center">48.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0488</td><td align="left">Zuma Game</td><td align="center"></td><td align="center">38.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0489</td><td align="left">Robot Room Cleaner</td><td align="center"></td><td align="center">72.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0490</td><td align="left">The Maze</td><td align="center"></td><td align="center">52.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0491</td><td align="left">Increasing Subsequences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0491.Increasing-Subsequences" target="_blank" rel="noopener">Go</a></td><td align="center">47.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0492</td><td align="left">Construct the Rectangle</td><td align="center"></td><td align="center">50.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0493</td><td align="left">Reverse Pairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0493.Reverse-Pairs" target="_blank" rel="noopener">Go</a></td><td align="center">27.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0494</td><td align="left">Target Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0494.Target-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">45.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0495</td><td align="left">Teemo Attacking</td><td align="center"></td><td align="center">56.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0496</td><td align="left">Next Greater Element I</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0496.Next-Greater-Element-I" target="_blank" rel="noopener">Go</a></td><td align="center">65.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0497</td><td align="left">Random Point in Non-overlapping Rectangles</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0497.Random-Point-in-Non-overlapping-Rectangles" target="_blank" rel="noopener">Go</a></td><td align="center">39.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0498</td><td align="left">Diagonal Traverse</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0498.Diagonal-Traverse" target="_blank" rel="noopener">Go</a></td><td align="center">50.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0499</td><td align="left">The Maze III</td><td align="center"></td><td align="center">42.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0500</td><td align="left">Keyboard Row</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0500.Keyboard-Row" target="_blank" rel="noopener">Go</a></td><td align="center">65.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0501</td><td align="left">Find Mode in Binary Search Tree</td><td align="center"></td><td align="center">43.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0502</td><td align="left">IPO</td><td align="center"></td><td align="center">41.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0503</td><td align="left">Next Greater Element II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0503.Next-Greater-Element-II" target="_blank" rel="noopener">Go</a></td><td align="center">58.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0504</td><td align="left">Base 7</td><td align="center"></td><td align="center">46.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0505</td><td align="left">The Maze II</td><td align="center"></td><td align="center">48.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0506</td><td align="left">Relative Ranks</td><td align="center"></td><td align="center">51.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0507</td><td align="left">Perfect Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0507.Perfect-Number" target="_blank" rel="noopener">Go</a></td><td align="center">36.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0508</td><td align="left">Most Frequent Subtree Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0508.Most-Frequent-Subtree-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">59.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0509</td><td align="left">Fibonacci Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0509.Fibonacci-Number" target="_blank" rel="noopener">Go</a></td><td align="center">67.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0510</td><td align="left">Inorder Successor in BST II</td><td align="center"></td><td align="center">60.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0511</td><td align="left">Game Play Analysis I</td><td align="center"></td><td align="center">81.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0512</td><td align="left">Game Play Analysis II</td><td align="center"></td><td align="center">56.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0513</td><td align="left">Find Bottom Left Tree Value</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0513.Find-Bottom-Left-Tree-Value" target="_blank" rel="noopener">Go</a></td><td align="center">62.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0514</td><td align="left">Freedom Trail</td><td align="center"></td><td align="center">44.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0515</td><td align="left">Find Largest Value in Each Tree Row</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0515.Find-Largest-Value-in-Each-Tree-Row" target="_blank" rel="noopener">Go</a></td><td align="center">62.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0516</td><td align="left">Longest Palindromic Subsequence</td><td align="center"></td><td align="center">55.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0517</td><td align="left">Super Washing Machines</td><td align="center"></td><td align="center">38.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0518</td><td align="left">Coin Change 2</td><td align="center"></td><td align="center">51.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0519</td><td align="left">Random Flip Matrix</td><td align="center"></td><td align="center">37.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0520</td><td align="left">Detect Capital</td><td align="center"></td><td align="center">54.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0521</td><td align="left">Longest Uncommon Subsequence I</td><td align="center"></td><td align="center">58.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0522</td><td align="left">Longest Uncommon Subsequence II</td><td align="center"></td><td align="center">34.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0523</td><td align="left">Continuous Subarray Sum</td><td align="center"></td><td align="center">24.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0524</td><td align="left">Longest Word in Dictionary through Deleting</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0524.Longest-Word-in-Dictionary-through-Deleting" target="_blank" rel="noopener">Go</a></td><td align="center">50.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0525</td><td align="left">Contiguous Array</td><td align="center"></td><td align="center">43.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0526</td><td align="left">Beautiful Arrangement</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0526.Beautiful-Arrangement" target="_blank" rel="noopener">Go</a></td><td align="center">62.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0527</td><td align="left">Word Abbreviation</td><td align="center"></td><td align="center">56.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0528</td><td align="left">Random Pick with Weight</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0528.Random-Pick-with-Weight" target="_blank" rel="noopener">Go</a></td><td align="center">44.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0529</td><td align="left">Minesweeper</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0529.Minesweeper" target="_blank" rel="noopener">Go</a></td><td align="center">61.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0530</td><td align="left">Minimum Absolute Difference in BST</td><td align="center"></td><td align="center">55.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0531</td><td align="left">Lonely Pixel I</td><td align="center"></td><td align="center">59.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0532</td><td align="left">K-diff Pairs in an Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0532.K-diff-Pairs-in-an-Array" target="_blank" rel="noopener">Go</a></td><td align="center">35.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0533</td><td align="left">Lonely Pixel II</td><td align="center"></td><td align="center">48.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0534</td><td align="left">Game Play Analysis III</td><td align="center"></td><td align="center">79.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0535</td><td align="left">Encode and Decode TinyURL</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0535.Encode-and-Decode-TinyURL" target="_blank" rel="noopener">Go</a></td><td align="center">82.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0536</td><td align="left">Construct Binary Tree from String</td><td align="center"></td><td align="center">51.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0537</td><td align="left">Complex Number Multiplication</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0537.Complex-Number-Multiplication" target="_blank" rel="noopener">Go</a></td><td align="center">68.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0538</td><td align="left">Convert BST to Greater Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0538.Convert-BST-to-Greater-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">59.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0539</td><td align="left">Minimum Time Difference</td><td align="center"></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0540</td><td align="left">Single Element in a Sorted Array</td><td align="center"></td><td align="center">57.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0541</td><td align="left">Reverse String II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0541.Reverse-String-II" target="_blank" rel="noopener">Go</a></td><td align="center">49.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0542</td><td align="left">01 Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0542.01-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">41.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0543</td><td align="left">Diameter of Binary Tree</td><td align="center"></td><td align="center">49.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0544</td><td align="left">Output Contest Matches</td><td align="center"></td><td align="center">75.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0545</td><td align="left">Boundary of Binary Tree</td><td align="center"></td><td align="center">40.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0546</td><td align="left">Remove Boxes</td><td align="center"></td><td align="center">44.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0547</td><td align="left">Number of Provinces</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0547.Number-of-Provinces" target="_blank" rel="noopener">Go</a></td><td align="center">60.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0548</td><td align="left">Split Array with Equal Sum</td><td align="center"></td><td align="center">48.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0549</td><td align="left">Binary Tree Longest Consecutive Sequence II</td><td align="center"></td><td align="center">47.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0550</td><td align="left">Game Play Analysis IV</td><td align="center"></td><td align="center">45.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0551</td><td align="left">Student Attendance Record I</td><td align="center"></td><td align="center">46.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0552</td><td align="left">Student Attendance Record II</td><td align="center"></td><td align="center">37.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0553</td><td align="left">Optimal Division</td><td align="center"></td><td align="center">57.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0554</td><td align="left">Brick Wall</td><td align="center"></td><td align="center">50.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0555</td><td align="left">Split Concatenated Strings</td><td align="center"></td><td align="center">42.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0556</td><td align="left">Next Greater Element III</td><td align="center"></td><td align="center">33.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0557</td><td align="left">Reverse Words in a String III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0557.Reverse-Words-in-a-String-III" target="_blank" rel="noopener">Go</a></td><td align="center">72.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0558</td><td align="left">Logical OR of Two Binary Grids Represented as Quad-Trees</td><td align="center"></td><td align="center">45.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0559</td><td align="left">Maximum Depth of N-ary Tree</td><td align="center"></td><td align="center">69.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0560</td><td align="left">Subarray Sum Equals K</td><td align="center"></td><td align="center">43.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0561</td><td align="left">Array Partition I</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0561.Array-Partition-I" target="_blank" rel="noopener">Go</a></td><td align="center">73.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0562</td><td align="left">Longest Line of Consecutive One in Matrix</td><td align="center"></td><td align="center">46.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0563</td><td align="left">Binary Tree Tilt</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0563.Binary-Tree-Tilt" target="_blank" rel="noopener">Go</a></td><td align="center">53.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0564</td><td align="left">Find the Closest Palindrome</td><td align="center"></td><td align="center">20.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0565</td><td align="left">Array Nesting</td><td align="center"></td><td align="center">56.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0566</td><td align="left">Reshape the Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0566.Reshape-the-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">61.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0567</td><td align="left">Permutation in String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0567.Permutation-in-String" target="_blank" rel="noopener">Go</a></td><td align="center">44.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0568</td><td align="left">Maximum Vacation Days</td><td align="center"></td><td align="center">41.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0569</td><td align="left">Median Employee Salary</td><td align="center"></td><td align="center">62.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0570</td><td align="left">Managers with at Least 5 Direct Reports</td><td align="center"></td><td align="center">66.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0571</td><td align="left">Find Median Given Frequency of Numbers</td><td align="center"></td><td align="center">45.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0572</td><td align="left">Subtree of Another Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0572.Subtree-of-Another-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">44.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0573</td><td align="left">Squirrel Simulation</td><td align="center"></td><td align="center">54.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0574</td><td align="left">Winning Candidate</td><td align="center"></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0575</td><td align="left">Distribute Candies</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0575.Distribute-Candies" target="_blank" rel="noopener">Go</a></td><td align="center">64.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0576</td><td align="left">Out of Boundary Paths</td><td align="center"></td><td align="center">36.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0577</td><td align="left">Employee Bonus</td><td align="center"></td><td align="center">71.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0578</td><td align="left">Get Highest Answer Rate Question</td><td align="center"></td><td align="center">41.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0579</td><td align="left">Find Cumulative Salary of an Employee</td><td align="center"></td><td align="center">38.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0580</td><td align="left">Count Student Number in Departments</td><td align="center"></td><td align="center">52.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0581</td><td align="left">Shortest Unsorted Continuous Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0581.Shortest-Unsorted-Continuous-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">32.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0582</td><td align="left">Kill Process</td><td align="center"></td><td align="center">63.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0583</td><td align="left">Delete Operation for Two Strings</td><td align="center"></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0584</td><td align="left">Find Customer Referee</td><td align="center"></td><td align="center">74.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0585</td><td align="left">Investments in 2016</td><td align="center"></td><td align="center">57.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0586</td><td align="left">Customer Placing the Largest Number of Orders</td><td align="center"></td><td align="center">75.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0587</td><td align="left">Erect the Fence</td><td align="center"></td><td align="center">36.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0588</td><td align="left">Design In-Memory File System</td><td align="center"></td><td align="center">46.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0589</td><td align="left">N-ary Tree Preorder Traversal</td><td align="center"></td><td align="center">73.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0590</td><td align="left">N-ary Tree Postorder Traversal</td><td align="center"></td><td align="center">73.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0591</td><td align="left">Tag Validator</td><td align="center"></td><td align="center">34.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0592</td><td align="left">Fraction Addition and Subtraction</td><td align="center"></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0593</td><td align="left">Valid Square</td><td align="center"></td><td align="center">43.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0594</td><td align="left">Longest Harmonious Subsequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0594.Longest-Harmonious-Subsequence" target="_blank" rel="noopener">Go</a></td><td align="center">51.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0595</td><td align="left">Big Countries</td><td align="center"></td><td align="center">78.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0596</td><td align="left">Classes More Than 5 Students</td><td align="center"></td><td align="center">38.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0597</td><td align="left">Friend Requests I: Overall Acceptance Rate</td><td align="center"></td><td align="center">41.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0598</td><td align="left">Range Addition II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0598.Range-Addition-II" target="_blank" rel="noopener">Go</a></td><td align="center">50.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0599</td><td align="left">Minimum Index Sum of Two Lists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0599.Minimum-Index-Sum-of-Two-Lists" target="_blank" rel="noopener">Go</a></td><td align="center">51.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0600</td><td align="left">Non-negative Integers without Consecutive Ones</td><td align="center"></td><td align="center">34.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0601</td><td align="left">Human Traffic of Stadium</td><td align="center"></td><td align="center">45.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0602</td><td align="left">Friend Requests II: Who Has the Most Friends</td><td align="center"></td><td align="center">57.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0603</td><td align="left">Consecutive Available Seats</td><td align="center"></td><td align="center">66.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0604</td><td align="left">Design Compressed String Iterator</td><td align="center"></td><td align="center">38.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0605</td><td align="left">Can Place Flowers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0605.Can-Place-Flowers" target="_blank" rel="noopener">Go</a></td><td align="center">31.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0606</td><td align="left">Construct String from Binary Tree</td><td align="center"></td><td align="center">55.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0607</td><td align="left">Sales Person</td><td align="center"></td><td align="center">65.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0608</td><td align="left">Tree Node</td><td align="center"></td><td align="center">69.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0609</td><td align="left">Find Duplicate File in System</td><td align="center"></td><td align="center">61.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0610</td><td align="left">Triangle Judgement</td><td align="center"></td><td align="center">68.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0611</td><td align="left">Valid Triangle Number</td><td align="center"></td><td align="center">49.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0612</td><td align="left">Shortest Distance in a Plane</td><td align="center"></td><td align="center">61.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0613</td><td align="left">Shortest Distance in a Line</td><td align="center"></td><td align="center">79.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0614</td><td align="left">Second Degree Follower</td><td align="center"></td><td align="center">32.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0615</td><td align="left">Average Salary: Departments VS Company</td><td align="center"></td><td align="center">52.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0616</td><td align="left">Add Bold Tag in String</td><td align="center"></td><td align="center">44.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0617</td><td align="left">Merge Two Binary Trees</td><td align="center"></td><td align="center">75.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0618</td><td align="left">Students Report By Geography</td><td align="center"></td><td align="center">60.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0619</td><td align="left">Biggest Single Number</td><td align="center"></td><td align="center">45.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0620</td><td align="left">Not Boring Movies</td><td align="center"></td><td align="center">70.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0621</td><td align="left">Task Scheduler</td><td align="center"></td><td align="center">52.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0622</td><td align="left">Design Circular Queue</td><td align="center"></td><td align="center">45.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0623</td><td align="left">Add One Row to Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0623.Add-One-Row-to-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">53.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0624</td><td align="left">Maximum Distance in Arrays</td><td align="center"></td><td align="center">39.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0625</td><td align="left">Minimum Factorization</td><td align="center"></td><td align="center">32.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0626</td><td align="left">Exchange Seats</td><td align="center"></td><td align="center">65.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0627</td><td align="left">Swap Salary</td><td align="center"></td><td align="center">77.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0628</td><td align="left">Maximum Product of Three Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0628.Maximum-Product-of-Three-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">46.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0629</td><td align="left">K Inverse Pairs Array</td><td align="center"></td><td align="center">31.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0630</td><td align="left">Course Schedule III</td><td align="center"></td><td align="center">33.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0631</td><td align="left">Design Excel Sum Formula</td><td align="center"></td><td align="center">32.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0632</td><td align="left">Smallest Range Covering Elements from K Lists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0632.Smallest-Range-Covering-Elements-from-K-Lists" target="_blank" rel="noopener">Go</a></td><td align="center">54.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0633</td><td align="left">Sum of Square Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0633.Sum-of-Square-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">32.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0634</td><td align="left">Find the Derangement of An Array</td><td align="center"></td><td align="center">40.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0635</td><td align="left">Design Log Storage System</td><td align="center"></td><td align="center">60.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0636</td><td align="left">Exclusive Time of Functions</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0636.Exclusive-Time-of-Functions" target="_blank" rel="noopener">Go</a></td><td align="center">54.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0637</td><td align="left">Average of Levels in Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0637.Average-of-Levels-in-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">66.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0638</td><td align="left">Shopping Offers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0638.Shopping-Offers" target="_blank" rel="noopener">Go</a></td><td align="center">53.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0639</td><td align="left">Decode Ways II</td><td align="center"></td><td align="center">27.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0640</td><td align="left">Solve the Equation</td><td align="center"></td><td align="center">42.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0641</td><td align="left">Design Circular Deque</td><td align="center"></td><td align="center">56.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0642</td><td align="left">Design Search Autocomplete System</td><td align="center"></td><td align="center">46.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0643</td><td align="left">Maximum Average Subarray I</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0643.Maximum-Average-Subarray-I" target="_blank" rel="noopener">Go</a></td><td align="center">42.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0644</td><td align="left">Maximum Average Subarray II</td><td align="center"></td><td align="center">34.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0645</td><td align="left">Set Mismatch</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0645.Set-Mismatch" target="_blank" rel="noopener">Go</a></td><td align="center">41.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0646</td><td align="left">Maximum Length of Pair Chain</td><td align="center"></td><td align="center">53.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0647</td><td align="left">Palindromic Substrings</td><td align="center"></td><td align="center">62.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0648</td><td align="left">Replace Words</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0648.Replace-Words" target="_blank" rel="noopener">Go</a></td><td align="center">58.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0649</td><td align="left">Dota2 Senate</td><td align="center"></td><td align="center">39.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0650</td><td align="left">2 Keys Keyboard</td><td align="center"></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0651</td><td align="left">4 Keys Keyboard</td><td align="center"></td><td align="center">53.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0652</td><td align="left">Find Duplicate Subtrees</td><td align="center"></td><td align="center">52.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0653</td><td align="left">Two Sum IV - Input is a BST</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0653.Two-Sum-IV---Input-is-a-BST" target="_blank" rel="noopener">Go</a></td><td align="center">56.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0654</td><td align="left">Maximum Binary Tree</td><td align="center"></td><td align="center">81.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0655</td><td align="left">Print Binary Tree</td><td align="center"></td><td align="center">56.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0656</td><td align="left">Coin Path</td><td align="center"></td><td align="center">29.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0657</td><td align="left">Robot Return to Origin</td><td align="center"></td><td align="center">73.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0658</td><td align="left">Find K Closest Elements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0658.Find-K-Closest-Elements" target="_blank" rel="noopener">Go</a></td><td align="center">42.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0659</td><td align="left">Split Array into Consecutive Subsequences</td><td align="center"></td><td align="center">44.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0660</td><td align="left">Remove 9</td><td align="center"></td><td align="center">54.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0661</td><td align="left">Image Smoother</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0661.Image-Smoother" target="_blank" rel="noopener">Go</a></td><td align="center">52.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0662</td><td align="left">Maximum Width of Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0662.Maximum-Width-of-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">39.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0663</td><td align="left">Equal Tree Partition</td><td align="center"></td><td align="center">39.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0664</td><td align="left">Strange Printer</td><td align="center"></td><td align="center">41.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0665</td><td align="left">Non-decreasing Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0665.Non-decreasing-Array" target="_blank" rel="noopener">Go</a></td><td align="center">19.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0666</td><td align="left">Path Sum IV</td><td align="center"></td><td align="center">56.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0667</td><td align="left">Beautiful Arrangement II</td><td align="center"></td><td align="center">55.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0668</td><td align="left">Kth Smallest Number in Multiplication Table</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0668.Kth-Smallest-Number-in-Multiplication-Table" target="_blank" rel="noopener">Go</a></td><td align="center">47.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0669</td><td align="left">Trim a Binary Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0669.Trim-a-Binary-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">64.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0670</td><td align="left">Maximum Swap</td><td align="center"></td><td align="center">45.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0671</td><td align="left">Second Minimum Node In a Binary Tree</td><td align="center"></td><td align="center">42.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0672</td><td align="left">Bulb Switcher II</td><td align="center"></td><td align="center">51.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0673</td><td align="left">Number of Longest Increasing Subsequence</td><td align="center"></td><td align="center">38.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0674</td><td align="left">Longest Continuous Increasing Subsequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0674.Longest-Continuous-Increasing-Subsequence" target="_blank" rel="noopener">Go</a></td><td align="center">46.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0675</td><td align="left">Cut Off Trees for Golf Event</td><td align="center"></td><td align="center">35.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0676</td><td align="left">Implement Magic Dictionary</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0676.Implement-Magic-Dictionary" target="_blank" rel="noopener">Go</a></td><td align="center">55.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0677</td><td align="left">Map Sum Pairs</td><td align="center"></td><td align="center">54.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0678</td><td align="left">Valid Parenthesis String</td><td align="center"></td><td align="center">31.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0679</td><td align="left">24 Game</td><td align="center"></td><td align="center">47.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0680</td><td align="left">Valid Palindrome II</td><td align="center"></td><td align="center">37.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0681</td><td align="left">Next Closest Time</td><td align="center"></td><td align="center">46.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0682</td><td align="left">Baseball Game</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0682.Baseball-Game" target="_blank" rel="noopener">Go</a></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0683</td><td align="left">K Empty Slots</td><td align="center"></td><td align="center">36.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0684</td><td align="left">Redundant Connection</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0684.Redundant-Connection" target="_blank" rel="noopener">Go</a></td><td align="center">59.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0685</td><td align="left">Redundant Connection II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0685.Redundant-Connection-II" target="_blank" rel="noopener">Go</a></td><td align="center">33.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0686</td><td align="left">Repeated String Match</td><td align="center"></td><td align="center">32.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0687</td><td align="left">Longest Univalue Path</td><td align="center"></td><td align="center">37.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0688</td><td align="left">Knight Probability in Chessboard</td><td align="center"></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0689</td><td align="left">Maximum Sum of 3 Non-Overlapping Subarrays</td><td align="center"></td><td align="center">47.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0690</td><td align="left">Employee Importance</td><td align="center"></td><td align="center">58.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0691</td><td align="left">Stickers to Spell Word</td><td align="center"></td><td align="center">44.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0692</td><td align="left">Top K Frequent Words</td><td align="center"></td><td align="center">53.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0693</td><td align="left">Binary Number with Alternating Bits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0693.Binary-Number-with-Alternating-Bits" target="_blank" rel="noopener">Go</a></td><td align="center">59.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0694</td><td align="left">Number of Distinct Islands</td><td align="center"></td><td align="center">58.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0695</td><td align="left">Max Area of Island</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0695.Max-Area-of-Island" target="_blank" rel="noopener">Go</a></td><td align="center">64.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0696</td><td align="left">Count Binary Substrings</td><td align="center"></td><td align="center">58.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0697</td><td align="left">Degree of an Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0697.Degree-of-an-Array" target="_blank" rel="noopener">Go</a></td><td align="center">54.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0698</td><td align="left">Partition to K Equal Sum Subsets</td><td align="center"></td><td align="center">45.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0699</td><td align="left">Falling Squares</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0699.Falling-Squares" target="_blank" rel="noopener">Go</a></td><td align="center">42.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0700</td><td align="left">Search in a Binary Search Tree</td><td align="center"></td><td align="center">73.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0701</td><td align="left">Insert into a Binary Search Tree</td><td align="center"></td><td align="center">75.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0702</td><td align="left">Search in a Sorted Array of Unknown Size</td><td align="center"></td><td align="center">68.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0703</td><td align="left">Kth Largest Element in a Stream</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0703.Kth-Largest-Element-in-a-Stream" target="_blank" rel="noopener">Go</a></td><td align="center">50.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0704</td><td align="left">Binary Search</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0704.Binary-Search" target="_blank" rel="noopener">Go</a></td><td align="center">54.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0705</td><td align="left">Design HashSet</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0705.Design-HashSet" target="_blank" rel="noopener">Go</a></td><td align="center">64.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0706</td><td align="left">Design HashMap</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0706.Design-HashMap" target="_blank" rel="noopener">Go</a></td><td align="center">64.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0707</td><td align="left">Design Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0707.Design-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">26.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0708</td><td align="left">Insert into a Sorted Circular Linked List</td><td align="center"></td><td align="center">32.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0709</td><td align="left">To Lower Case</td><td align="center"></td><td align="center">80.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0710</td><td align="left">Random Pick with Blacklist</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0710.Random-Pick-with-Blacklist" target="_blank" rel="noopener">Go</a></td><td align="center">32.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0711</td><td align="left">Number of Distinct Islands II</td><td align="center"></td><td align="center">49.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0712</td><td align="left">Minimum ASCII Delete Sum for Two Strings</td><td align="center"></td><td align="center">59.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0713</td><td align="left">Subarray Product Less Than K</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0713.Subarray-Product-Less-Than-K" target="_blank" rel="noopener">Go</a></td><td align="center">40.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0714</td><td align="left">Best Time to Buy and Sell Stock with Transaction Fee</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0714.Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee" target="_blank" rel="noopener">Go</a></td><td align="center">58.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0715</td><td align="left">Range Module</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0715.Range-Module" target="_blank" rel="noopener">Go</a></td><td align="center">40.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0716</td><td align="left">Max Stack</td><td align="center"></td><td align="center">43.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0717</td><td align="left">1-bit and 2-bit Characters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0717.1-bit-and-2-bit-Characters" target="_blank" rel="noopener">Go</a></td><td align="center">47.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0718</td><td align="left">Maximum Length of Repeated Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0718.Maximum-Length-of-Repeated-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">50.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0719</td><td align="left">Find K-th Smallest Pair Distance</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0719.Find-K-th-Smallest-Pair-Distance" target="_blank" rel="noopener">Go</a></td><td align="center">32.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0720</td><td align="left">Longest Word in Dictionary</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0720.Longest-Word-in-Dictionary" target="_blank" rel="noopener">Go</a></td><td align="center">49.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0721</td><td align="left">Accounts Merge</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0721.Accounts-Merge" target="_blank" rel="noopener">Go</a></td><td align="center">52.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0722</td><td align="left">Remove Comments</td><td align="center"></td><td align="center">36.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0723</td><td align="left">Candy Crush</td><td align="center"></td><td align="center">72.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0724</td><td align="left">Find Pivot Index</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0724.Find-Pivot-Index" target="_blank" rel="noopener">Go</a></td><td align="center">45.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0725</td><td align="left">Split Linked List in Parts</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0725.Split-Linked-List-in-Parts" target="_blank" rel="noopener">Go</a></td><td align="center">53.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0726</td><td align="left">Number of Atoms</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0726.Number-of-Atoms" target="_blank" rel="noopener">Go</a></td><td align="center">51.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0727</td><td align="left">Minimum Window Subsequence</td><td align="center"></td><td align="center">42.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0728</td><td align="left">Self Dividing Numbers</td><td align="center"></td><td align="center">75.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0729</td><td align="left">My Calendar I</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0729.My-Calendar-I" target="_blank" rel="noopener">Go</a></td><td align="center">53.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0730</td><td align="left">Count Different Palindromic Subsequences</td><td align="center"></td><td align="center">43.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0731</td><td align="left">My Calendar II</td><td align="center"></td><td align="center">50.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0732</td><td align="left">My Calendar III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0732.My-Calendar-III" target="_blank" rel="noopener">Go</a></td><td align="center">62.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0733</td><td align="left">Flood Fill</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0733.Flood-Fill" target="_blank" rel="noopener">Go</a></td><td align="center">55.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0734</td><td align="left">Sentence Similarity</td><td align="center"></td><td align="center">42.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0735</td><td align="left">Asteroid Collision</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0735.Asteroid-Collision" target="_blank" rel="noopener">Go</a></td><td align="center">43.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0736</td><td align="left">Parse Lisp Expression</td><td align="center"></td><td align="center">49.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0737</td><td align="left">Sentence Similarity II</td><td align="center"></td><td align="center">46.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0738</td><td align="left">Monotone Increasing Digits</td><td align="center"></td><td align="center">45.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0739</td><td align="left">Daily Temperatures</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0739.Daily-Temperatures" target="_blank" rel="noopener">Go</a></td><td align="center">64.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0740</td><td align="left">Delete and Earn</td><td align="center"></td><td align="center">49.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0741</td><td align="left">Cherry Pickup</td><td align="center"></td><td align="center">35.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0742</td><td align="left">Closest Leaf in a Binary Tree</td><td align="center"></td><td align="center">44.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0743</td><td align="left">Network Delay Time</td><td align="center"></td><td align="center">45.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0744</td><td align="left">Find Smallest Letter Greater Than Target</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0744.Find-Smallest-Letter-Greater-Than-Target" target="_blank" rel="noopener">Go</a></td><td align="center">45.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0745</td><td align="left">Prefix and Suffix Search</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0745.Prefix-and-Suffix-Search" target="_blank" rel="noopener">Go</a></td><td align="center">35.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0746</td><td align="left">Min Cost Climbing Stairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0746.Min-Cost-Climbing-Stairs" target="_blank" rel="noopener">Go</a></td><td align="center">50.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0747</td><td align="left">Largest Number At Least Twice of Others</td><td align="center"></td><td align="center">43.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0748</td><td align="left">Shortest Completing Word</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0748.Shortest-Completing-Word" target="_blank" rel="noopener">Go</a></td><td align="center">57.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0749</td><td align="left">Contain Virus</td><td align="center"></td><td align="center">48.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0750</td><td align="left">Number Of Corner Rectangles</td><td align="center"></td><td align="center">67.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0751</td><td align="left">IP to CIDR</td><td align="center"></td><td align="center">59.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0752</td><td align="left">Open the Lock</td><td align="center"></td><td align="center">52.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0753</td><td align="left">Cracking the Safe</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0753.Cracking-the-Safe" target="_blank" rel="noopener">Go</a></td><td align="center">52.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0754</td><td align="left">Reach a Number</td><td align="center"></td><td align="center">40.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0755</td><td align="left">Pour Water</td><td align="center"></td><td align="center">44.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0756</td><td align="left">Pyramid Transition Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0756.Pyramid-Transition-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">55.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0757</td><td align="left">Set Intersection Size At Least Two</td><td align="center"></td><td align="center">42.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0758</td><td align="left">Bold Words in String</td><td align="center"></td><td align="center">47.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0759</td><td align="left">Employee Free Time</td><td align="center"></td><td align="center">68.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0760</td><td align="left">Find Anagram Mappings</td><td align="center"></td><td align="center">81.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0761</td><td align="left">Special Binary String</td><td align="center"></td><td align="center">58.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0762</td><td align="left">Prime Number of Set Bits in Binary Representation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0762.Prime-Number-of-Set-Bits-in-Binary-Representation" target="_blank" rel="noopener">Go</a></td><td align="center">64.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0763</td><td align="left">Partition Labels</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0763.Partition-Labels" target="_blank" rel="noopener">Go</a></td><td align="center">78.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0764</td><td align="left">Largest Plus Sign</td><td align="center"></td><td align="center">46.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0765</td><td align="left">Couples Holding Hands</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0765.Couples-Holding-Hands" target="_blank" rel="noopener">Go</a></td><td align="center">55.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0766</td><td align="left">Toeplitz Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0766.Toeplitz-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">65.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0767</td><td align="left">Reorganize String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0767.Reorganize-String" target="_blank" rel="noopener">Go</a></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0768</td><td align="left">Max Chunks To Make Sorted II</td><td align="center"></td><td align="center">49.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0769</td><td align="left">Max Chunks To Make Sorted</td><td align="center"></td><td align="center">55.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0770</td><td align="left">Basic Calculator IV</td><td align="center"></td><td align="center">54.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0771</td><td align="left">Jewels and Stones</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0771.Jewels-and-Stones" target="_blank" rel="noopener">Go</a></td><td align="center">87.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0772</td><td align="left">Basic Calculator III</td><td align="center"></td><td align="center">43.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0773</td><td align="left">Sliding Puzzle</td><td align="center"></td><td align="center">61.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0774</td><td align="left">Minimize Max Distance to Gas Station</td><td align="center"></td><td align="center">48.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0775</td><td align="left">Global and Local Inversions</td><td align="center"></td><td align="center">42.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0776</td><td align="left">Split BST</td><td align="center"></td><td align="center">56.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0777</td><td align="left">Swap Adjacent in LR String</td><td align="center"></td><td align="center">35.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0778</td><td align="left">Swim in Rising Water</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0778.Swim-in-Rising-Water" target="_blank" rel="noopener">Go</a></td><td align="center">54.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0779</td><td align="left">K-th Symbol in Grammar</td><td align="center"></td><td align="center">38.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0780</td><td align="left">Reaching Points</td><td align="center"></td><td align="center">30.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0781</td><td align="left">Rabbits in Forest</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0781.Rabbits-in-Forest" target="_blank" rel="noopener">Go</a></td><td align="center">55.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0782</td><td align="left">Transform to Chessboard</td><td align="center"></td><td align="center">47.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0783</td><td align="left">Minimum Distance Between BST Nodes</td><td align="center"></td><td align="center">54.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0784</td><td align="left">Letter Case Permutation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0784.Letter-Case-Permutation" target="_blank" rel="noopener">Go</a></td><td align="center">68.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0785</td><td align="left">Is Graph Bipartite?</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0785.Is-Graph-Bipartite?" target="_blank" rel="noopener">Go</a></td><td align="center">48.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0786</td><td align="left">K-th Smallest Prime Fraction</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0786.K-th-Smallest-Prime-Fraction" target="_blank" rel="noopener">Go</a></td><td align="center">43.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0787</td><td align="left">Cheapest Flights Within K Stops</td><td align="center"></td><td align="center">39.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0788</td><td align="left">Rotated Digits</td><td align="center"></td><td align="center">57.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0789</td><td align="left">Escape The Ghosts</td><td align="center"></td><td align="center">58.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0790</td><td align="left">Domino and Tromino Tiling</td><td align="center"></td><td align="center">40.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0791</td><td align="left">Custom Sort String</td><td align="center"></td><td align="center">65.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0792</td><td align="left">Number of Matching Subsequences</td><td align="center"></td><td align="center">48.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0793</td><td align="left">Preimage Size of Factorial Zeroes Function</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0793.Preimage-Size-of-Factorial-Zeroes-Function" target="_blank" rel="noopener">Go</a></td><td align="center">40.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0794</td><td align="left">Valid Tic-Tac-Toe State</td><td align="center"></td><td align="center">33.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0795</td><td align="left">Number of Subarrays with Bounded Maximum</td><td align="center"></td><td align="center">47.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0796</td><td align="left">Rotate String</td><td align="center"></td><td align="center">49.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0797</td><td align="left">All Paths From Source to Target</td><td align="center"></td><td align="center">78.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0798</td><td align="left">Smallest Rotation with Highest Score</td><td align="center"></td><td align="center">45.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0799</td><td align="left">Champagne Tower</td><td align="center"></td><td align="center">44.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0800</td><td align="left">Similar RGB Color</td><td align="center"></td><td align="center">62.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0801</td><td align="left">Minimum Swaps To Make Sequences Increasing</td><td align="center"></td><td align="center">39.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0802</td><td align="left">Find Eventual Safe States</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0802.Find-Eventual-Safe-States" target="_blank" rel="noopener">Go</a></td><td align="center">49.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0803</td><td align="left">Bricks Falling When Hit</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0803.Bricks-Falling-When-Hit" target="_blank" rel="noopener">Go</a></td><td align="center">31.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0804</td><td align="left">Unique Morse Code Words</td><td align="center"></td><td align="center">79.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0805</td><td align="left">Split Array With Same Average</td><td align="center"></td><td align="center">26.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0806</td><td align="left">Number of Lines To Write String</td><td align="center"></td><td align="center">65.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0807</td><td align="left">Max Increase to Keep City Skyline</td><td align="center"></td><td align="center">84.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0808</td><td align="left">Soup Servings</td><td align="center"></td><td align="center">41.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0809</td><td align="left">Expressive Words</td><td align="center"></td><td align="center">46.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0810</td><td align="left">Chalkboard XOR Game</td><td align="center"></td><td align="center">50.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0811</td><td align="left">Subdomain Visit Count</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0811.Subdomain-Visit-Count" target="_blank" rel="noopener">Go</a></td><td align="center">71.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0812</td><td align="left">Largest Triangle Area</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0812.Largest-Triangle-Area" target="_blank" rel="noopener">Go</a></td><td align="center">59.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0813</td><td align="left">Largest Sum of Averages</td><td align="center"></td><td align="center">51.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0814</td><td align="left">Binary Tree Pruning</td><td align="center"></td><td align="center">72.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0815</td><td align="left">Bus Routes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0815.Bus-Routes" target="_blank" rel="noopener">Go</a></td><td align="center">43.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0816</td><td align="left">Ambiguous Coordinates</td><td align="center"></td><td align="center">48.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0817</td><td align="left">Linked List Components</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0817.Linked-List-Components" target="_blank" rel="noopener">Go</a></td><td align="center">57.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0818</td><td align="left">Race Car</td><td align="center"></td><td align="center">40.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0819</td><td align="left">Most Common Word</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0819.Most-Common-Word" target="_blank" rel="noopener">Go</a></td><td align="center">45.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0820</td><td align="left">Short Encoding of Words</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0820.Short-Encoding-of-Words" target="_blank" rel="noopener">Go</a></td><td align="center">55.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0821</td><td align="left">Shortest Distance to a Character</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0821.Shortest-Distance-to-a-Character" target="_blank" rel="noopener">Go</a></td><td align="center">70.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0822</td><td align="left">Card Flipping Game</td><td align="center"></td><td align="center">43.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0823</td><td align="left">Binary Trees With Factors</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0823.Binary-Trees-With-Factors" target="_blank" rel="noopener">Go</a></td><td align="center">43.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0824</td><td align="left">Goat Latin</td><td align="center"></td><td align="center">66.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0825</td><td align="left">Friends Of Appropriate Ages</td><td align="center"></td><td align="center">44.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0826</td><td align="left">Most Profit Assigning Work</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0826.Most-Profit-Assigning-Work" target="_blank" rel="noopener">Go</a></td><td align="center">39.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0827</td><td align="left">Making A Large Island</td><td align="center"></td><td align="center">47.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0828</td><td align="left">Count Unique Characters of All Substrings of a Given String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0828.Count-Unique-Characters-of-All-Substrings-of-a-Given-String" target="_blank" rel="noopener">Go</a></td><td align="center">46.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0829</td><td align="left">Consecutive Numbers Sum</td><td align="center"></td><td align="center">39.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0830</td><td align="left">Positions of Large Groups</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0830.Positions-of-Large-Groups" target="_blank" rel="noopener">Go</a></td><td align="center">50.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0831</td><td align="left">Masking Personal Information</td><td align="center"></td><td align="center">44.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0832</td><td align="left">Flipping an Image</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0832.Flipping-an-Image" target="_blank" rel="noopener">Go</a></td><td align="center">78.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0833</td><td align="left">Find And Replace in String</td><td align="center"></td><td align="center">51.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0834</td><td align="left">Sum of Distances in Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0834.Sum-of-Distances-in-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">46.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0835</td><td align="left">Image Overlap</td><td align="center"></td><td align="center">61.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0836</td><td align="left">Rectangle Overlap</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0836.Rectangle-Overlap" target="_blank" rel="noopener">Go</a></td><td align="center">44.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0837</td><td align="left">New 21 Game</td><td align="center"></td><td align="center">35.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0838</td><td align="left">Push Dominoes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0838.Push-Dominoes" target="_blank" rel="noopener">Go</a></td><td align="center">49.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0839</td><td align="left">Similar String Groups</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0839.Similar-String-Groups" target="_blank" rel="noopener">Go</a></td><td align="center">41.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0840</td><td align="left">Magic Squares In Grid</td><td align="center"></td><td align="center">37.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0841</td><td align="left">Keys and Rooms</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0841.Keys-and-Rooms" target="_blank" rel="noopener">Go</a></td><td align="center">66.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0842</td><td align="left">Split Array into Fibonacci Sequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0842.Split-Array-into-Fibonacci-Sequence" target="_blank" rel="noopener">Go</a></td><td align="center">37.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0843</td><td align="left">Guess the Word</td><td align="center"></td><td align="center">46.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0844</td><td align="left">Backspace String Compare</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0844.Backspace-String-Compare" target="_blank" rel="noopener">Go</a></td><td align="center">47.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0845</td><td align="left">Longest Mountain in Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0845.Longest-Mountain-in-Array" target="_blank" rel="noopener">Go</a></td><td align="center">38.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0846</td><td align="left">Hand of Straights</td><td align="center"></td><td align="center">55.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0847</td><td align="left">Shortest Path Visiting All Nodes</td><td align="center"></td><td align="center">53.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0848</td><td align="left">Shifting Letters</td><td align="center"></td><td align="center">45.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0849</td><td align="left">Maximize Distance to Closest Person</td><td align="center"></td><td align="center">44.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0850</td><td align="left">Rectangle Area II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0850.Rectangle-Area-II" target="_blank" rel="noopener">Go</a></td><td align="center">48.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0851</td><td align="left">Loud and Rich</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0851.Loud-and-Rich" target="_blank" rel="noopener">Go</a></td><td align="center">52.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0852</td><td align="left">Peak Index in a Mountain Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0852.Peak-Index-in-a-Mountain-Array" target="_blank" rel="noopener">Go</a></td><td align="center">71.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0853</td><td align="left">Car Fleet</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0853.Car-Fleet" target="_blank" rel="noopener">Go</a></td><td align="center">44.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0854</td><td align="left">K-Similar Strings</td><td align="center"></td><td align="center">38.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0855</td><td align="left">Exam Room</td><td align="center"></td><td align="center">43.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0856</td><td align="left">Score of Parentheses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0856.Score-of-Parentheses" target="_blank" rel="noopener">Go</a></td><td align="center">64.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0857</td><td align="left">Minimum Cost to Hire K Workers</td><td align="center"></td><td align="center">50.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0858</td><td align="left">Mirror Reflection</td><td align="center"></td><td align="center">59.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0859</td><td align="left">Buddy Strings</td><td align="center"></td><td align="center">29.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0860</td><td align="left">Lemonade Change</td><td align="center"></td><td align="center">51.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0861</td><td align="left">Score After Flipping Matrix</td><td align="center"></td><td align="center">73.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0862</td><td align="left">Shortest Subarray with Sum at Least K</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0862.Shortest-Subarray-with-Sum-at-Least-K" target="_blank" rel="noopener">Go</a></td><td align="center">25.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0863</td><td align="left">All Nodes Distance K in Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0863.All-Nodes-Distance-K-in-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">58.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0864</td><td align="left">Shortest Path to Get All Keys</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0864.Shortest-Path-to-Get-All-Keys" target="_blank" rel="noopener">Go</a></td><td align="center">42.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0865</td><td align="left">Smallest Subtree with all the Deepest Nodes</td><td align="center"></td><td align="center">64.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0866</td><td align="left">Prime Palindrome</td><td align="center"></td><td align="center">25.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0867</td><td align="left">Transpose Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0867.Transpose-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">62.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0868</td><td align="left">Binary Gap</td><td align="center"></td><td align="center">60.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0869</td><td align="left">Reordered Power of 2</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0869.Reordered-Power-of-2" target="_blank" rel="noopener">Go</a></td><td align="center">58.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0870</td><td align="left">Advantage Shuffle</td><td align="center"></td><td align="center">47.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0871</td><td align="left">Minimum Number of Refueling Stops</td><td align="center"></td><td align="center">32.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0872</td><td align="left">Leaf-Similar Trees</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0872.Leaf-Similar-Trees" target="_blank" rel="noopener">Go</a></td><td align="center">64.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0873</td><td align="left">Length of Longest Fibonacci Subsequence</td><td align="center"></td><td align="center">48.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0874</td><td align="left">Walking Robot Simulation</td><td align="center"></td><td align="center">36.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0875</td><td align="left">Koko Eating Bananas</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0875.Koko-Eating-Bananas" target="_blank" rel="noopener">Go</a></td><td align="center">53.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0876</td><td align="left">Middle of the Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0876.Middle-of-the-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">69.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0877</td><td align="left">Stone Game</td><td align="center"></td><td align="center">67.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0878</td><td align="left">Nth Magical Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0878.Nth-Magical-Number" target="_blank" rel="noopener">Go</a></td><td align="center">28.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0879</td><td align="left">Profitable Schemes</td><td align="center"></td><td align="center">39.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0880</td><td align="left">Decoded String at Index</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0880.Decoded-String-at-Index" target="_blank" rel="noopener">Go</a></td><td align="center">28.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0881</td><td align="left">Boats to Save People</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0881.Boats-to-Save-People" target="_blank" rel="noopener">Go</a></td><td align="center">49.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0882</td><td align="left">Reachable Nodes In Subdivided Graph</td><td align="center"></td><td align="center">43.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0883</td><td align="left">Projection Area of 3D Shapes</td><td align="center"></td><td align="center">68.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0884</td><td align="left">Uncommon Words from Two Sentences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0884.Uncommon-Words-from-Two-Sentences" target="_blank" rel="noopener">Go</a></td><td align="center">64.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0885</td><td align="left">Spiral Matrix III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0885.Spiral-Matrix-III" target="_blank" rel="noopener">Go</a></td><td align="center">71.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0886</td><td align="left">Possible Bipartition</td><td align="center"></td><td align="center">45.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0887</td><td align="left">Super Egg Drop</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0887.Super-Egg-Drop" target="_blank" rel="noopener">Go</a></td><td align="center">27.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0888</td><td align="left">Fair Candy Swap</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0888.Fair-Candy-Swap" target="_blank" rel="noopener">Go</a></td><td align="center">59.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0889</td><td align="left">Construct Binary Tree from Preorder and Postorder Traversal</td><td align="center"></td><td align="center">67.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0890</td><td align="left">Find and Replace Pattern</td><td align="center"></td><td align="center">74.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0891</td><td align="left">Sum of Subsequence Widths</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0891.Sum-of-Subsequence-Widths" target="_blank" rel="noopener">Go</a></td><td align="center">33.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0892</td><td align="left">Surface Area of 3D Shapes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0892.Surface-Area-of-3D-Shapes" target="_blank" rel="noopener">Go</a></td><td align="center">59.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0893</td><td align="left">Groups of Special-Equivalent Strings</td><td align="center"></td><td align="center">69.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0894</td><td align="left">All Possible Full Binary Trees</td><td align="center"></td><td align="center">77.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0895</td><td align="left">Maximum Frequency Stack</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0895.Maximum-Frequency-Stack" target="_blank" rel="noopener">Go</a></td><td align="center">63.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0896</td><td align="left">Monotonic Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0896.Monotonic-Array" target="_blank" rel="noopener">Go</a></td><td align="center">58.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0897</td><td align="left">Increasing Order Search Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0897.Increasing-Order-Search-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">74.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0898</td><td align="left">Bitwise ORs of Subarrays</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0898.Bitwise-ORs-of-Subarrays" target="_blank" rel="noopener">Go</a></td><td align="center">34.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0899</td><td align="left">Orderly Queue</td><td align="center"></td><td align="center">53.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0900</td><td align="left">RLE Iterator</td><td align="center"></td><td align="center">55.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0901</td><td align="left">Online Stock Span</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0901.Online-Stock-Span" target="_blank" rel="noopener">Go</a></td><td align="center">61.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0902</td><td align="left">Numbers At Most N Given Digit Set</td><td align="center"></td><td align="center">36.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0903</td><td align="left">Valid Permutations for DI Sequence</td><td align="center"></td><td align="center">54.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0904</td><td align="left">Fruit Into Baskets</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0904.Fruit-Into-Baskets" target="_blank" rel="noopener">Go</a></td><td align="center">43.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0905</td><td align="left">Sort Array By Parity</td><td align="center"></td><td align="center">75.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0906</td><td align="left">Super Palindromes</td><td align="center"></td><td align="center">32.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0907</td><td align="left">Sum of Subarray Minimums</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0907.Sum-of-Subarray-Minimums" target="_blank" rel="noopener">Go</a></td><td align="center">33.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0908</td><td align="left">Smallest Range I</td><td align="center"></td><td align="center">66.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0909</td><td align="left">Snakes and Ladders</td><td align="center"></td><td align="center">39.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0910</td><td align="left">Smallest Range II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0910.Smallest-Range-II" target="_blank" rel="noopener">Go</a></td><td align="center">31.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0911</td><td align="left">Online Election</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0911.Online-Election" target="_blank" rel="noopener">Go</a></td><td align="center">51.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0912</td><td align="left">Sort an Array</td><td align="center"></td><td align="center">64.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0913</td><td align="left">Cat and Mouse</td><td align="center"></td><td align="center">34.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0914</td><td align="left">X of a Kind in a Deck of Cards</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0914.X-of-a-Kind-in-a-Deck-of-Cards" target="_blank" rel="noopener">Go</a></td><td align="center">34.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0915</td><td align="left">Partition Array into Disjoint Intervals</td><td align="center"></td><td align="center">46.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0916</td><td align="left">Word Subsets</td><td align="center"></td><td align="center">48.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0917</td><td align="left">Reverse Only Letters</td><td align="center"></td><td align="center">59.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0918</td><td align="left">Maximum Sum Circular Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0918.Maximum-Sum-Circular-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">34.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0919</td><td align="left">Complete Binary Tree Inserter</td><td align="center"></td><td align="center">59.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0920</td><td align="left">Number of Music Playlists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0920.Number-of-Music-Playlists" target="_blank" rel="noopener">Go</a></td><td align="center">47.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0921</td><td align="left">Minimum Add to Make Parentheses Valid</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0921.Minimum-Add-to-Make-Parentheses-Valid" target="_blank" rel="noopener">Go</a></td><td align="center">74.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0922</td><td align="left">Sort Array By Parity II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0922.Sort-Array-By-Parity-II" target="_blank" rel="noopener">Go</a></td><td align="center">70.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0923</td><td align="left">3Sum With Multiplicity</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0923.3Sum-With-Multiplicity" target="_blank" rel="noopener">Go</a></td><td align="center">36.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0924</td><td align="left">Minimize Malware Spread</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0924.Minimize-Malware-Spread" target="_blank" rel="noopener">Go</a></td><td align="center">41.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0925</td><td align="left">Long Pressed Name</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0925.Long-Pressed-Name" target="_blank" rel="noopener">Go</a></td><td align="center">37.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0926</td><td align="left">Flip String to Monotone Increasing</td><td align="center"></td><td align="center">53.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0927</td><td align="left">Three Equal Parts</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0927.Three-Equal-Parts" target="_blank" rel="noopener">Go</a></td><td align="center">34.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0928</td><td align="left">Minimize Malware Spread II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0928.Minimize-Malware-Spread-II" target="_blank" rel="noopener">Go</a></td><td align="center">41.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0929</td><td align="left">Unique Email Addresses</td><td align="center"></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0930</td><td align="left">Binary Subarrays With Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0930.Binary-Subarrays-With-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">44.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0931</td><td align="left">Minimum Falling Path Sum</td><td align="center"></td><td align="center">63.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0932</td><td align="left">Beautiful Array</td><td align="center"></td><td align="center">61.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0933</td><td align="left">Number of Recent Calls</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0933.Number-of-Recent-Calls" target="_blank" rel="noopener">Go</a></td><td align="center">72.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0934</td><td align="left">Shortest Bridge</td><td align="center"></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0935</td><td align="left">Knight Dialer</td><td align="center"></td><td align="center">46.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0936</td><td align="left">Stamping The Sequence</td><td align="center"></td><td align="center">47.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0937</td><td align="left">Reorder Data in Log Files</td><td align="center"></td><td align="center">54.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0938</td><td align="left">Range Sum of BST</td><td align="center"></td><td align="center">83.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0939</td><td align="left">Minimum Area Rectangle</td><td align="center"></td><td align="center">52.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0940</td><td align="left">Distinct Subsequences II</td><td align="center"></td><td align="center">41.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0941</td><td align="left">Valid Mountain Array</td><td align="center"></td><td align="center">33.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0942</td><td align="left">DI String Match</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0942.DI-String-Match" target="_blank" rel="noopener">Go</a></td><td align="center">73.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0943</td><td align="left">Find the Shortest Superstring</td><td align="center"></td><td align="center">43.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0944</td><td align="left">Delete Columns to Make Sorted</td><td align="center"></td><td align="center">70.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0945</td><td align="left">Minimum Increment to Make Array Unique</td><td align="center"></td><td align="center">46.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0946</td><td align="left">Validate Stack Sequences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0946.Validate-Stack-Sequences" target="_blank" rel="noopener">Go</a></td><td align="center">64.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0947</td><td align="left">Most Stones Removed with Same Row or Column</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0947.Most-Stones-Removed-with-Same-Row-or-Column" target="_blank" rel="noopener">Go</a></td><td align="center">55.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0948</td><td align="left">Bag of Tokens</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0949</td><td align="left">Largest Time for Given Digits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0949.Largest-Time-for-Given-Digits" target="_blank" rel="noopener">Go</a></td><td align="center">36.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0950</td><td align="left">Reveal Cards In Increasing Order</td><td align="center"></td><td align="center">75.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0951</td><td align="left">Flip Equivalent Binary Trees</td><td align="center"></td><td align="center">65.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0952</td><td align="left">Largest Component Size by Common Factor</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0952.Largest-Component-Size-by-Common-Factor" target="_blank" rel="noopener">Go</a></td><td align="center">36.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0953</td><td align="left">Verifying an Alien Dictionary</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0953.Verifying-an-Alien-Dictionary" target="_blank" rel="noopener">Go</a></td><td align="center">51.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0954</td><td align="left">Array of Doubled Pairs</td><td align="center"></td><td align="center">35.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0955</td><td align="left">Delete Columns to Make Sorted II</td><td align="center"></td><td align="center">33.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0956</td><td align="left">Tallest Billboard</td><td align="center"></td><td align="center">39.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0957</td><td align="left">Prison Cells After N Days</td><td align="center"></td><td align="center">40.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0958</td><td align="left">Check Completeness of a Binary Tree</td><td align="center"></td><td align="center">52.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0959</td><td align="left">Regions Cut By Slashes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0959.Regions-Cut-By-Slashes" target="_blank" rel="noopener">Go</a></td><td align="center">67.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0960</td><td align="left">Delete Columns to Make Sorted III</td><td align="center"></td><td align="center">55.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0961</td><td align="left">N-Repeated Element in Size 2N Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0961.N-Repeated-Element-in-Size-2N-Array" target="_blank" rel="noopener">Go</a></td><td align="center">74.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0962</td><td align="left">Maximum Width Ramp</td><td align="center"></td><td align="center">46.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0963</td><td align="left">Minimum Area Rectangle II</td><td align="center"></td><td align="center">52.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0964</td><td align="left">Least Operators to Express Number</td><td align="center"></td><td align="center">45.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0965</td><td align="left">Univalued Binary Tree</td><td align="center"></td><td align="center">67.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0966</td><td align="left">Vowel Spellchecker</td><td align="center"></td><td align="center">47.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0967</td><td align="left">Numbers With Same Consecutive Differences</td><td align="center"></td><td align="center">45.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0968</td><td align="left">Binary Tree Cameras</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0968.Binary-Tree-Cameras" target="_blank" rel="noopener">Go</a></td><td align="center">38.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0969</td><td align="left">Pancake Sorting</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0969.Pancake-Sorting" target="_blank" rel="noopener">Go</a></td><td align="center">68.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0970</td><td align="left">Powerful Integers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0970.Powerful-Integers" target="_blank" rel="noopener">Go</a></td><td align="center">40.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0971</td><td align="left">Flip Binary Tree To Match Preorder Traversal</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0972</td><td align="left">Equal Rational Numbers</td><td align="center"></td><td align="center">42.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0973</td><td align="left">K Closest Points to Origin</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0973.K-Closest-Points-to-Origin" target="_blank" rel="noopener">Go</a></td><td align="center">64.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0974</td><td align="left">Subarray Sums Divisible by K</td><td align="center"></td><td align="center">50.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0975</td><td align="left">Odd Even Jump</td><td align="center"></td><td align="center">41.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0976</td><td align="left">Largest Perimeter Triangle</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0976.Largest-Perimeter-Triangle" target="_blank" rel="noopener">Go</a></td><td align="center">58.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0977</td><td align="left">Squares of a Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0977.Squares-of-a-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">71.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0978</td><td align="left">Longest Turbulent Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0978.Longest-Turbulent-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">46.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0979</td><td align="left">Distribute Coins in Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0979.Distribute-Coins-in-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">69.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0980</td><td align="left">Unique Paths III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0980.Unique-Paths-III" target="_blank" rel="noopener">Go</a></td><td align="center">77.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0981</td><td align="left">Time Based Key-Value Store</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0981.Time-Based-Key-Value-Store" target="_blank" rel="noopener">Go</a></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0982</td><td align="left">Triples with Bitwise AND Equal To Zero</td><td align="center"></td><td align="center">56.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0983</td><td align="left">Minimum Cost For Tickets</td><td align="center"></td><td align="center">62.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0984</td><td align="left">String Without AAA or BBB</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0984.String-Without-AAA-or-BBB" target="_blank" rel="noopener">Go</a></td><td align="center">38.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0985</td><td align="left">Sum of Even Numbers After Queries</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0985.Sum-of-Even-Numbers-After-Queries" target="_blank" rel="noopener">Go</a></td><td align="center">60.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0986</td><td align="left">Interval List Intersections</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0986.Interval-List-Intersections" target="_blank" rel="noopener">Go</a></td><td align="center">68.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0987</td><td align="left">Vertical Order Traversal of a Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0987.Vertical-Order-Traversal-of-a-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">38.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0988</td><td align="left">Smallest String Starting From Leaf</td><td align="center"></td><td align="center">46.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0989</td><td align="left">Add to Array-Form of Integer</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0989.Add-to-Array-Form-of-Integer" target="_blank" rel="noopener">Go</a></td><td align="center">44.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0990</td><td align="left">Satisfiability of Equality Equations</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0990.Satisfiability-of-Equality-Equations" target="_blank" rel="noopener">Go</a></td><td align="center">46.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0991</td><td align="left">Broken Calculator</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0991.Broken-Calculator" target="_blank" rel="noopener">Go</a></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0992</td><td align="left">Subarrays with K Different Integers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0992.Subarrays-with-K-Different-Integers" target="_blank" rel="noopener">Go</a></td><td align="center">50.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0993</td><td align="left">Cousins in Binary Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0993.Cousins-in-Binary-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">52.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0994</td><td align="left">Rotting Oranges</td><td align="center"></td><td align="center">49.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0995</td><td align="left">Minimum Number of K Consecutive Bit Flips</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0995.Minimum-Number-of-K-Consecutive-Bit-Flips" target="_blank" rel="noopener">Go</a></td><td align="center">50.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0996</td><td align="left">Number of Squareful Arrays</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0996.Number-of-Squareful-Arrays" target="_blank" rel="noopener">Go</a></td><td align="center">48.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">0997</td><td align="left">Find the Town Judge</td><td align="center"></td><td align="center">49.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">0998</td><td align="left">Maximum Binary Tree II</td><td align="center"></td><td align="center">64.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">0999</td><td align="left">Available Captures for Rook</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/0999.Available-Captures-for-Rook" target="_blank" rel="noopener">Go</a></td><td align="center">67.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1000</td><td align="left">Minimum Cost to Merge Stones</td><td align="center"></td><td align="center">40.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1001</td><td align="left">Grid Illumination</td><td align="center"></td><td align="center">36.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1002</td><td align="left">Find Common Characters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1002.Find-Common-Characters" target="_blank" rel="noopener">Go</a></td><td align="center">68.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1003</td><td align="left">Check If Word Is Valid After Substitutions</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1003.Check-If-Word-Is-Valid-After-Substitutions" target="_blank" rel="noopener">Go</a></td><td align="center">56.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1004</td><td align="left">Max Consecutive Ones III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1004.Max-Consecutive-Ones-III" target="_blank" rel="noopener">Go</a></td><td align="center">60.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1005</td><td align="left">Maximize Sum Of Array After K Negations</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1005.Maximize-Sum-Of-Array-After-K-Negations" target="_blank" rel="noopener">Go</a></td><td align="center">52.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1006</td><td align="left">Clumsy Factorial</td><td align="center"></td><td align="center">53.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1007</td><td align="left">Minimum Domino Rotations For Equal Row</td><td align="center"></td><td align="center">50.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1008</td><td align="left">Construct Binary Search Tree from Preorder Traversal</td><td align="center"></td><td align="center">78.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1009</td><td align="left">Complement of Base 10 Integer</td><td align="center"></td><td align="center">61.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1010</td><td align="left">Pairs of Songs With Total Durations Divisible by 60</td><td align="center"></td><td align="center">50.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1011</td><td align="left">Capacity To Ship Packages Within D Days</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1011.Capacity-To-Ship-Packages-Within-D-Days" target="_blank" rel="noopener">Go</a></td><td align="center">59.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1012</td><td align="left">Numbers With Repeated Digits</td><td align="center"></td><td align="center">37.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1013</td><td align="left">Partition Array Into Three Parts With Equal Sum</td><td align="center"></td><td align="center">48.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1014</td><td align="left">Best Sightseeing Pair</td><td align="center"></td><td align="center">52.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1015</td><td align="left">Smallest Integer Divisible by K</td><td align="center"></td><td align="center">41.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1016</td><td align="left">Binary String With Substrings Representing 1 To N</td><td align="center"></td><td align="center">58.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1017</td><td align="left">Convert to Base -2</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1017.Convert-to-Base--2" target="_blank" rel="noopener">Go</a></td><td align="center">59.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1018</td><td align="left">Binary Prefix Divisible By 5</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1018.Binary-Prefix-Divisible-By-5" target="_blank" rel="noopener">Go</a></td><td align="center">47.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1019</td><td align="left">Next Greater Node In Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1019.Next-Greater-Node-In-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">58.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1020</td><td align="left">Number of Enclaves</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1020.Number-of-Enclaves" target="_blank" rel="noopener">Go</a></td><td align="center">59.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1021</td><td align="left">Remove Outermost Parentheses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1021.Remove-Outermost-Parentheses" target="_blank" rel="noopener">Go</a></td><td align="center">79.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1022</td><td align="left">Sum of Root To Leaf Binary Numbers</td><td align="center"></td><td align="center">71.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1023</td><td align="left">Camelcase Matching</td><td align="center"></td><td align="center">57.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1024</td><td align="left">Video Stitching</td><td align="center"></td><td align="center">49.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1025</td><td align="left">Divisor Game</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1025.Divisor-Game" target="_blank" rel="noopener">Go</a></td><td align="center">66.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1026</td><td align="left">Maximum Difference Between Node and Ancestor</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1026.Maximum-Difference-Between-Node-and-Ancestor" target="_blank" rel="noopener">Go</a></td><td align="center">69.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1027</td><td align="left">Longest Arithmetic Subsequence</td><td align="center"></td><td align="center">49.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1028</td><td align="left">Recover a Tree From Preorder Traversal</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1028.Recover-a-Tree-From-Preorder-Traversal" target="_blank" rel="noopener">Go</a></td><td align="center">71.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1029</td><td align="left">Two City Scheduling</td><td align="center"></td><td align="center">58.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1030</td><td align="left">Matrix Cells in Distance Order</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1030.Matrix-Cells-in-Distance-Order" target="_blank" rel="noopener">Go</a></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1031</td><td align="left">Maximum Sum of Two Non-Overlapping Subarrays</td><td align="center"></td><td align="center">59.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1032</td><td align="left">Stream of Characters</td><td align="center"></td><td align="center">48.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1033</td><td align="left">Moving Stones Until Consecutive</td><td align="center"></td><td align="center">43.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1034</td><td align="left">Coloring A Border</td><td align="center"></td><td align="center">45.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1035</td><td align="left">Uncrossed Lines</td><td align="center"></td><td align="center">56.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1036</td><td align="left">Escape a Large Maze</td><td align="center"></td><td align="center">34.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1037</td><td align="left">Valid Boomerang</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1037.Valid-Boomerang" target="_blank" rel="noopener">Go</a></td><td align="center">37.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1038</td><td align="left">Binary Search Tree to Greater Sum Tree</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1038.Binary-Search-Tree-to-Greater-Sum-Tree" target="_blank" rel="noopener">Go</a></td><td align="center">82.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1039</td><td align="left">Minimum Score Triangulation of Polygon</td><td align="center"></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1040</td><td align="left">Moving Stones Until Consecutive II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1040.Moving-Stones-Until-Consecutive-II" target="_blank" rel="noopener">Go</a></td><td align="center">54.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1041</td><td align="left">Robot Bounded In Circle</td><td align="center"></td><td align="center">55.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1042</td><td align="left">Flower Planting With No Adjacent</td><td align="center"></td><td align="center">48.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1043</td><td align="left">Partition Array for Maximum Sum</td><td align="center"></td><td align="center">67.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1044</td><td align="left">Longest Duplicate Substring</td><td align="center"></td><td align="center">31.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1045</td><td align="left">Customers Who Bought All Products</td><td align="center"></td><td align="center">68.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1046</td><td align="left">Last Stone Weight</td><td align="center"></td><td align="center">62.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1047</td><td align="left">Remove All Adjacent Duplicates In String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1047.Remove-All-Adjacent-Duplicates-In-String" target="_blank" rel="noopener">Go</a></td><td align="center">71.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1048</td><td align="left">Longest String Chain</td><td align="center"></td><td align="center">55.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1049</td><td align="left">Last Stone Weight II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1049.Last-Stone-Weight-II" target="_blank" rel="noopener">Go</a></td><td align="center">45.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1050</td><td align="left">Actors and Directors Who Cooperated At Least Three Times</td><td align="center"></td><td align="center">72.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1051</td><td align="left">Height Checker</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1051.Height-Checker" target="_blank" rel="noopener">Go</a></td><td align="center">72.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1052</td><td align="left">Grumpy Bookstore Owner</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1052.Grumpy-Bookstore-Owner" target="_blank" rel="noopener">Go</a></td><td align="center">55.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1053</td><td align="left">Previous Permutation With One Swap</td><td align="center"></td><td align="center">51.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1054</td><td align="left">Distant Barcodes</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1054.Distant-Barcodes" target="_blank" rel="noopener">Go</a></td><td align="center">44.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1055</td><td align="left">Shortest Way to Form String</td><td align="center"></td><td align="center">57.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1056</td><td align="left">Confusing Number</td><td align="center"></td><td align="center">47.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1057</td><td align="left">Campus Bikes</td><td align="center"></td><td align="center">57.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1058</td><td align="left">Minimize Rounding Error to Meet Target</td><td align="center"></td><td align="center">43.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1059</td><td align="left">All Paths from Source Lead to Destination</td><td align="center"></td><td align="center">42.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1060</td><td align="left">Missing Element in Sorted Array</td><td align="center"></td><td align="center">54.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1061</td><td align="left">Lexicographically Smallest Equivalent String</td><td align="center"></td><td align="center">66.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1062</td><td align="left">Longest Repeating Substring</td><td align="center"></td><td align="center">58.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1063</td><td align="left">Number of Valid Subarrays</td><td align="center"></td><td align="center">72.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1064</td><td align="left">Fixed Point</td><td align="center"></td><td align="center">64.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1065</td><td align="left">Index Pairs of a String</td><td align="center"></td><td align="center">61.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1066</td><td align="left">Campus Bikes II</td><td align="center"></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1067</td><td align="left">Digit Count in Range</td><td align="center"></td><td align="center">41.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1068</td><td align="left">Product Sales Analysis I</td><td align="center"></td><td align="center">82.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1069</td><td align="left">Product Sales Analysis II</td><td align="center"></td><td align="center">83.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1070</td><td align="left">Product Sales Analysis III</td><td align="center"></td><td align="center">49.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1071</td><td align="left">Greatest Common Divisor of Strings</td><td align="center"></td><td align="center">51.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1072</td><td align="left">Flip Columns For Maximum Number of Equal Rows</td><td align="center"></td><td align="center">61.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1073</td><td align="left">Adding Two Negabinary Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1073.Adding-Two-Negabinary-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">34.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1074</td><td align="left">Number of Submatrices That Sum to Target</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1074.Number-of-Submatrices-That-Sum-to-Target" target="_blank" rel="noopener">Go</a></td><td align="center">61.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1075</td><td align="left">Project Employees I</td><td align="center"></td><td align="center">66.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1076</td><td align="left">Project Employees II</td><td align="center"></td><td align="center">52.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1077</td><td align="left">Project Employees III</td><td align="center"></td><td align="center">77.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1078</td><td align="left">Occurrences After Bigram</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1078.Occurrences-After-Bigram" target="_blank" rel="noopener">Go</a></td><td align="center">64.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1079</td><td align="left">Letter Tile Possibilities</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1079.Letter-Tile-Possibilities" target="_blank" rel="noopener">Go</a></td><td align="center">75.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1080</td><td align="left">Insufficient Nodes in Root to Leaf Paths</td><td align="center"></td><td align="center">50.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1081</td><td align="left">Smallest Subsequence of Distinct Characters</td><td align="center"></td><td align="center">53.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1082</td><td align="left">Sales Analysis I</td><td align="center"></td><td align="center">73.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1083</td><td align="left">Sales Analysis II</td><td align="center"></td><td align="center">50.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1084</td><td align="left">Sales Analysis III</td><td align="center"></td><td align="center">54.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1085</td><td align="left">Sum of Digits in the Minimum Number</td><td align="center"></td><td align="center">75.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1086</td><td align="left">High Five</td><td align="center"></td><td align="center">77.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1087</td><td align="left">Brace Expansion</td><td align="center"></td><td align="center">63.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1088</td><td align="left">Confusing Number II</td><td align="center"></td><td align="center">45.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1089</td><td align="left">Duplicate Zeros</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1089.Duplicate-Zeros" target="_blank" rel="noopener">Go</a></td><td align="center">51.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1090</td><td align="left">Largest Values From Labels</td><td align="center"></td><td align="center">60.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1091</td><td align="left">Shortest Path in Binary Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1091.Shortest-Path-in-Binary-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">40.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1092</td><td align="left">Shortest Common Supersequence</td><td align="center"></td><td align="center">53.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1093</td><td align="left">Statistics from a Large Sample</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1093.Statistics-from-a-Large-Sample" target="_blank" rel="noopener">Go</a></td><td align="center">49.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1094</td><td align="left">Car Pooling</td><td align="center"></td><td align="center">59.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1095</td><td align="left">Find in Mountain Array</td><td align="center"></td><td align="center">36.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1096</td><td align="left">Brace Expansion II</td><td align="center"></td><td align="center">62.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1097</td><td align="left">Game Play Analysis V</td><td align="center"></td><td align="center">56.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1098</td><td align="left">Unpopular Books</td><td align="center"></td><td align="center">45.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1099</td><td align="left">Two Sum Less Than K</td><td align="center"></td><td align="center">60.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1100</td><td align="left">Find K-Length Substrings With No Repeated Characters</td><td align="center"></td><td align="center">73.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1101</td><td align="left">The Earliest Moment When Everyone Become Friends</td><td align="center"></td><td align="center">67.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1102</td><td align="left">Path With Maximum Minimum Value</td><td align="center"></td><td align="center">50.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1103</td><td align="left">Distribute Candies to People</td><td align="center"></td><td align="center">63.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1104</td><td align="left">Path In Zigzag Labelled Binary Tree</td><td align="center"></td><td align="center">73.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1105</td><td align="left">Filling Bookcase Shelves</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1105.Filling-Bookcase-Shelves" target="_blank" rel="noopener">Go</a></td><td align="center">57.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1106</td><td align="left">Parsing A Boolean Expression</td><td align="center"></td><td align="center">59.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1107</td><td align="left">New Users Daily Count</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1108</td><td align="left">Defanging an IP Address</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1108.Defanging-an-IP-Address" target="_blank" rel="noopener">Go</a></td><td align="center">88.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1109</td><td align="left">Corporate Flight Bookings</td><td align="center"></td><td align="center">54.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1110</td><td align="left">Delete Nodes And Return Forest</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1110.Delete-Nodes-And-Return-Forest" target="_blank" rel="noopener">Go</a></td><td align="center">67.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1111</td><td align="left">Maximum Nesting Depth of Two Valid Parentheses Strings</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1111.Maximum-Nesting-Depth-of-Two-Valid-Parentheses-Strings" target="_blank" rel="noopener">Go</a></td><td align="center">72.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1112</td><td align="left">Highest Grade For Each Student</td><td align="center"></td><td align="center">72.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1113</td><td align="left">Reported Posts</td><td align="center"></td><td align="center">65.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1114</td><td align="left">Print in Order</td><td align="center"></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1115</td><td align="left">Print FooBar Alternately</td><td align="center"></td><td align="center">59.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1116</td><td align="left">Print Zero Even Odd</td><td align="center"></td><td align="center">57.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1117</td><td align="left">Building H2O</td><td align="center"></td><td align="center">53.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1118</td><td align="left">Number of Days in a Month</td><td align="center"></td><td align="center">57.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1119</td><td align="left">Remove Vowels from a String</td><td align="center"></td><td align="center">90.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1120</td><td align="left">Maximum Average Subtree</td><td align="center"></td><td align="center">63.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1121</td><td align="left">Divide Array Into Increasing Sequences</td><td align="center"></td><td align="center">58.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1122</td><td align="left">Relative Sort Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1122.Relative-Sort-Array" target="_blank" rel="noopener">Go</a></td><td align="center">68.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1123</td><td align="left">Lowest Common Ancestor of Deepest Leaves</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1123.Lowest-Common-Ancestor-of-Deepest-Leaves" target="_blank" rel="noopener">Go</a></td><td align="center">68.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1124</td><td align="left">Longest Well-Performing Interval</td><td align="center"></td><td align="center">33.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1125</td><td align="left">Smallest Sufficient Team</td><td align="center"></td><td align="center">47.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1126</td><td align="left">Active Businesses</td><td align="center"></td><td align="center">68.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1127</td><td align="left">User Purchase Platform</td><td align="center"></td><td align="center">50.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1128</td><td align="left">Number of Equivalent Domino Pairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1128.Number-of-Equivalent-Domino-Pairs" target="_blank" rel="noopener">Go</a></td><td align="center">46.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1129</td><td align="left">Shortest Path with Alternating Colors</td><td align="center"></td><td align="center">40.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1130</td><td align="left">Minimum Cost Tree From Leaf Values</td><td align="center"></td><td align="center">67.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1131</td><td align="left">Maximum of Absolute Value Expression</td><td align="center"></td><td align="center">51.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1132</td><td align="left">Reported Posts II</td><td align="center"></td><td align="center">34.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1133</td><td align="left">Largest Unique Number</td><td align="center"></td><td align="center">67.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1134</td><td align="left">Armstrong Number</td><td align="center"></td><td align="center">78.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1135</td><td align="left">Connecting Cities With Minimum Cost</td><td align="center"></td><td align="center">59.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1136</td><td align="left">Parallel Courses</td><td align="center"></td><td align="center">60.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1137</td><td align="left">N-th Tribonacci Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1137.N-th-Tribonacci-Number" target="_blank" rel="noopener">Go</a></td><td align="center">55.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1138</td><td align="left">Alphabet Board Path</td><td align="center"></td><td align="center">51.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1139</td><td align="left">Largest 1-Bordered Square</td><td align="center"></td><td align="center">48.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1140</td><td align="left">Stone Game II</td><td align="center"></td><td align="center">64.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1141</td><td align="left">User Activity for the Past 30 Days I</td><td align="center"></td><td align="center">54.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1142</td><td align="left">User Activity for the Past 30 Days II</td><td align="center"></td><td align="center">35.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1143</td><td align="left">Longest Common Subsequence</td><td align="center"></td><td align="center">58.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1144</td><td align="left">Decrease Elements To Make Array Zigzag</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1145</td><td align="left">Binary Tree Coloring Game</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1145.Binary-Tree-Coloring-Game" target="_blank" rel="noopener">Go</a></td><td align="center">51.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1146</td><td align="left">Snapshot Array</td><td align="center"></td><td align="center">36.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1147</td><td align="left">Longest Chunked Palindrome Decomposition</td><td align="center"></td><td align="center">59.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1148</td><td align="left">Article Views I</td><td align="center"></td><td align="center">77.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1149</td><td align="left">Article Views II</td><td align="center"></td><td align="center">48.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1150</td><td align="left">Check If a Number Is Majority Element in a Sorted Array</td><td align="center"></td><td align="center">57.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1151</td><td align="left">Minimum Swaps to Group All 1’s Together</td><td align="center"></td><td align="center">58.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1152</td><td align="left">Analyze User Website Visit Pattern</td><td align="center"></td><td align="center">43.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1153</td><td align="left">String Transforms Into Another String</td><td align="center"></td><td align="center">35.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1154</td><td align="left">Day of the Year</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1154.Day-of-the-Year" target="_blank" rel="noopener">Go</a></td><td align="center">49.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1155</td><td align="left">Number of Dice Rolls With Target Sum</td><td align="center"></td><td align="center">47.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1156</td><td align="left">Swap For Longest Repeated Character Substring</td><td align="center"></td><td align="center">47.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1157</td><td align="left">Online Majority Element In Subarray</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1157.Online-Majority-Element-In-Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">39.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1158</td><td align="left">Market Analysis I</td><td align="center"></td><td align="center">64.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1159</td><td align="left">Market Analysis II</td><td align="center"></td><td align="center">56.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1160</td><td align="left">Find Words That Can Be Formed by Characters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1160.Find-Words-That-Can-Be-Formed-by-Characters" target="_blank" rel="noopener">Go</a></td><td align="center">67.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1161</td><td align="left">Maximum Level Sum of a Binary Tree</td><td align="center"></td><td align="center">69.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1162</td><td align="left">As Far from Land as Possible</td><td align="center"></td><td align="center">45.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1163</td><td align="left">Last Substring in Lexicographical Order</td><td align="center"></td><td align="center">36.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1164</td><td align="left">Product Price at a Given Date</td><td align="center"></td><td align="center">68.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1165</td><td align="left">Single-Row Keyboard</td><td align="center"></td><td align="center">85.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1166</td><td align="left">Design File System</td><td align="center"></td><td align="center">58.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1167</td><td align="left">Minimum Cost to Connect Sticks</td><td align="center"></td><td align="center">64.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1168</td><td align="left">Optimize Water Distribution in a Village</td><td align="center"></td><td align="center">61.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1169</td><td align="left">Invalid Transactions</td><td align="center"></td><td align="center">30.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1170</td><td align="left">Compare Strings by Frequency of the Smallest Character</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1170.Compare-Strings-by-Frequency-of-the-Smallest-Character" target="_blank" rel="noopener">Go</a></td><td align="center">60.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1171</td><td align="left">Remove Zero Sum Consecutive Nodes from Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1171.Remove-Zero-Sum-Consecutive-Nodes-from-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">41.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1172</td><td align="left">Dinner Plate Stacks</td><td align="center"></td><td align="center">37.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1173</td><td align="left">Immediate Food Delivery I</td><td align="center"></td><td align="center">82.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1174</td><td align="left">Immediate Food Delivery II</td><td align="center"></td><td align="center">62.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1175</td><td align="left">Prime Arrangements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1175.Prime-Arrangements" target="_blank" rel="noopener">Go</a></td><td align="center">51.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1176</td><td align="left">Diet Plan Performance</td><td align="center"></td><td align="center">53.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1177</td><td align="left">Can Make Palindrome from Substring</td><td align="center"></td><td align="center">36.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1178</td><td align="left">Number of Valid Words for Each Puzzle</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1178.Number-of-Valid-Words-for-Each-Puzzle" target="_blank" rel="noopener">Go</a></td><td align="center">39.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1179</td><td align="left">Reformat Department Table</td><td align="center"></td><td align="center">82.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1180</td><td align="left">Count Substrings with Only One Distinct Letter</td><td align="center"></td><td align="center">77.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1181</td><td align="left">Before and After Puzzle</td><td align="center"></td><td align="center">44.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1182</td><td align="left">Shortest Distance to Target Color</td><td align="center"></td><td align="center">53.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1183</td><td align="left">Maximum Number of Ones</td><td align="center"></td><td align="center">57.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1184</td><td align="left">Distance Between Bus Stops</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1184.Distance-Between-Bus-Stops" target="_blank" rel="noopener">Go</a></td><td align="center">54.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1185</td><td align="left">Day of the Week</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1185.Day-of-the-Week" target="_blank" rel="noopener">Go</a></td><td align="center">61.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1186</td><td align="left">Maximum Subarray Sum with One Deletion</td><td align="center"></td><td align="center">38.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1187</td><td align="left">Make Array Strictly Increasing</td><td align="center"></td><td align="center">42.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1188</td><td align="left">Design Bounded Blocking Queue</td><td align="center"></td><td align="center">72.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1189</td><td align="left">Maximum Number of Balloons</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1189.Maximum-Number-of-Balloons" target="_blank" rel="noopener">Go</a></td><td align="center">62.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1190</td><td align="left">Reverse Substrings Between Each Pair of Parentheses</td><td align="center"></td><td align="center">64.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1191</td><td align="left">K-Concatenation Maximum Sum</td><td align="center"></td><td align="center">25.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1192</td><td align="left">Critical Connections in a Network</td><td align="center"></td><td align="center">50.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1193</td><td align="left">Monthly Transactions I</td><td align="center"></td><td align="center">69.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1194</td><td align="left">Tournament Winners</td><td align="center"></td><td align="center">52.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1195</td><td align="left">Fizz Buzz Multithreaded</td><td align="center"></td><td align="center">70.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1196</td><td align="left">How Many Apples Can You Put into the Basket</td><td align="center"></td><td align="center">68.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1197</td><td align="left">Minimum Knight Moves</td><td align="center"></td><td align="center">37.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1198</td><td align="left">Find Smallest Common Element in All Rows</td><td align="center"></td><td align="center">75.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1199</td><td align="left">Minimum Time to Build Blocks</td><td align="center"></td><td align="center">38.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1200</td><td align="left">Minimum Absolute Difference</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1200.Minimum-Absolute-Difference" target="_blank" rel="noopener">Go</a></td><td align="center">67.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1201</td><td align="left">Ugly Number III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1201.Ugly-Number-III" target="_blank" rel="noopener">Go</a></td><td align="center">26.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1202</td><td align="left">Smallest String With Swaps</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1202.Smallest-String-With-Swaps" target="_blank" rel="noopener">Go</a></td><td align="center">48.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1203</td><td align="left">Sort Items by Groups Respecting Dependencies</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1203.Sort-Items-by-Groups-Respecting-Dependencies" target="_blank" rel="noopener">Go</a></td><td align="center">48.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1204</td><td align="left">Last Person to Fit in the Elevator</td><td align="center"></td><td align="center">71.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1205</td><td align="left">Monthly Transactions II</td><td align="center"></td><td align="center">45.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1206</td><td align="left">Design Skiplist</td><td align="center"></td><td align="center">58.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1207</td><td align="left">Unique Number of Occurrences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1207.Unique-Number-of-Occurrences" target="_blank" rel="noopener">Go</a></td><td align="center">71.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1208</td><td align="left">Get Equal Substrings Within Budget</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1208.Get-Equal-Substrings-Within-Budget" target="_blank" rel="noopener">Go</a></td><td align="center">44.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1209</td><td align="left">Remove All Adjacent Duplicates in String II</td><td align="center"></td><td align="center">57.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1210</td><td align="left">Minimum Moves to Reach Target with Rotations</td><td align="center"></td><td align="center">46.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1211</td><td align="left">Queries Quality and Percentage</td><td align="center"></td><td align="center">70.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1212</td><td align="left">Team Scores in Football Tournament</td><td align="center"></td><td align="center">56.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1213</td><td align="left">Intersection of Three Sorted Arrays</td><td align="center"></td><td align="center">79.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1214</td><td align="left">Two Sum BSTs</td><td align="center"></td><td align="center">67.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1215</td><td align="left">Stepping Numbers</td><td align="center"></td><td align="center">43.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1216</td><td align="left">Valid Palindrome III</td><td align="center"></td><td align="center">49.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1217</td><td align="left">Minimum Cost to Move Chips to The Same Position</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1217.Minimum-Cost-to-Move-Chips-to-The-Same-Position" target="_blank" rel="noopener">Go</a></td><td align="center">71.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1218</td><td align="left">Longest Arithmetic Subsequence of Given Difference</td><td align="center"></td><td align="center">46.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1219</td><td align="left">Path with Maximum Gold</td><td align="center"></td><td align="center">65.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1220</td><td align="left">Count Vowels Permutation</td><td align="center"></td><td align="center">54.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1221</td><td align="left">Split a String in Balanced Strings</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1221.Split-a-String-in-Balanced-Strings" target="_blank" rel="noopener">Go</a></td><td align="center">84.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1222</td><td align="left">Queens That Can Attack the King</td><td align="center"></td><td align="center">69.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1223</td><td align="left">Dice Roll Simulation</td><td align="center"></td><td align="center">46.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1224</td><td align="left">Maximum Equal Frequency</td><td align="center"></td><td align="center">35.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1225</td><td align="left">Report Contiguous Dates</td><td align="center"></td><td align="center">62.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1226</td><td align="left">The Dining Philosophers</td><td align="center"></td><td align="center">59.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1227</td><td align="left">Airplane Seat Assignment Probability</td><td align="center"></td><td align="center">62.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1228</td><td align="left">Missing Number In Arithmetic Progression</td><td align="center"></td><td align="center">51.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1229</td><td align="left">Meeting Scheduler</td><td align="center"></td><td align="center">54.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1230</td><td align="left">Toss Strange Coins</td><td align="center"></td><td align="center">50.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1231</td><td align="left">Divide Chocolate</td><td align="center"></td><td align="center">53.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1232</td><td align="left">Check If It Is a Straight Line</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1232.Check-If-It-Is-a-Straight-Line" target="_blank" rel="noopener">Go</a></td><td align="center">43.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1233</td><td align="left">Remove Sub-Folders from the Filesystem</td><td align="center"></td><td align="center">62.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1234</td><td align="left">Replace the Substring for Balanced String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1234.Replace-the-Substring-for-Balanced-String" target="_blank" rel="noopener">Go</a></td><td align="center">34.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1235</td><td align="left">Maximum Profit in Job Scheduling</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1235.Maximum-Profit-in-Job-Scheduling" target="_blank" rel="noopener">Go</a></td><td align="center">47.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1236</td><td align="left">Web Crawler</td><td align="center"></td><td align="center">64.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1237</td><td align="left">Find Positive Integer Solution for a Given Equation</td><td align="center"></td><td align="center">69.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1238</td><td align="left">Circular Permutation in Binary Representation</td><td align="center"></td><td align="center">66.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1239</td><td align="left">Maximum Length of a Concatenated String with Unique Characters</td><td align="center"></td><td align="center">49.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1240</td><td align="left">Tiling a Rectangle with the Fewest Squares</td><td align="center"></td><td align="center">52.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1241</td><td align="left">Number of Comments per Post</td><td align="center"></td><td align="center">67.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1242</td><td align="left">Web Crawler Multithreaded</td><td align="center"></td><td align="center">47.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1243</td><td align="left">Array Transformation</td><td align="center"></td><td align="center">49.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1244</td><td align="left">Design A Leaderboard</td><td align="center"></td><td align="center">66.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1245</td><td align="left">Tree Diameter</td><td align="center"></td><td align="center">61.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1246</td><td align="left">Palindrome Removal</td><td align="center"></td><td align="center">46.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1247</td><td align="left">Minimum Swaps to Make Strings Equal</td><td align="center"></td><td align="center">62.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1248</td><td align="left">Count Number of Nice Subarrays</td><td align="center"></td><td align="center">56.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1249</td><td align="left">Minimum Remove to Make Valid Parentheses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1249.Minimum-Remove-to-Make-Valid-Parentheses" target="_blank" rel="noopener">Go</a></td><td align="center">64.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1250</td><td align="left">Check If It Is a Good Array</td><td align="center"></td><td align="center">56.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1251</td><td align="left">Average Selling Price</td><td align="center"></td><td align="center">82.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1252</td><td align="left">Cells with Odd Values in a Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1252.Cells-with-Odd-Values-in-a-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">78.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1253</td><td align="left">Reconstruct a 2-Row Binary Matrix</td><td align="center"></td><td align="center">41.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1254</td><td align="left">Number of Closed Islands</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1254.Number-of-Closed-Islands" target="_blank" rel="noopener">Go</a></td><td align="center">61.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1255</td><td align="left">Maximum Score Words Formed by Letters</td><td align="center"></td><td align="center">70.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1256</td><td align="left">Encode Number</td><td align="center"></td><td align="center">68.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1257</td><td align="left">Smallest Common Region</td><td align="center"></td><td align="center">61.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1258</td><td align="left">Synonymous Sentences</td><td align="center"></td><td align="center">62.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1259</td><td align="left">Handshakes That Don’t Cross</td><td align="center"></td><td align="center">54.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1260</td><td align="left">Shift 2D Grid</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1260.Shift-2D-Grid" target="_blank" rel="noopener">Go</a></td><td align="center">61.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1261</td><td align="left">Find Elements in a Contaminated Binary Tree</td><td align="center"></td><td align="center">74.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1262</td><td align="left">Greatest Sum Divisible by Three</td><td align="center"></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1263</td><td align="left">Minimum Moves to Move a Box to Their Target Location</td><td align="center"></td><td align="center">43.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1264</td><td align="left">Page Recommendations</td><td align="center"></td><td align="center">69.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1265</td><td align="left">Print Immutable Linked List in Reverse</td><td align="center"></td><td align="center">94.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1266</td><td align="left">Minimum Time Visiting All Points</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1266.Minimum-Time-Visiting-All-Points" target="_blank" rel="noopener">Go</a></td><td align="center">79.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1267</td><td align="left">Count Servers that Communicate</td><td align="center"></td><td align="center">57.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1268</td><td align="left">Search Suggestions System</td><td align="center"></td><td align="center">64.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1269</td><td align="left">Number of Ways to Stay in the Same Place After Some Steps</td><td align="center"></td><td align="center">43.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1270</td><td align="left">All People Report to the Given Manager</td><td align="center"></td><td align="center">88.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1271</td><td align="left">Hexspeak</td><td align="center"></td><td align="center">55.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1272</td><td align="left">Remove Interval</td><td align="center"></td><td align="center">58.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1273</td><td align="left">Delete Tree Nodes</td><td align="center"></td><td align="center">62.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1274</td><td align="left">Number of Ships in a Rectangle</td><td align="center"></td><td align="center">66.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1275</td><td align="left">Find Winner on a Tic Tac Toe Game</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1275.Find-Winner-on-a-Tic-Tac-Toe-Game" target="_blank" rel="noopener">Go</a></td><td align="center">52.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1276</td><td align="left">Number of Burgers with No Waste of Ingredients</td><td align="center"></td><td align="center">50.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1277</td><td align="left">Count Square Submatrices with All Ones</td><td align="center"></td><td align="center">72.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1278</td><td align="left">Palindrome Partitioning III</td><td align="center"></td><td align="center">61.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1279</td><td align="left">Traffic Light Controlled Intersection</td><td align="center"></td><td align="center">76.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1280</td><td align="left">Students and Examinations</td><td align="center"></td><td align="center">75.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1281</td><td align="left">Subtract the Product and Sum of Digits of an Integer</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1281.Subtract-the-Product-and-Sum-of-Digits-of-an-Integer" target="_blank" rel="noopener">Go</a></td><td align="center">85.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1282</td><td align="left">Group the People Given the Group Size They Belong To</td><td align="center"></td><td align="center">84.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1283</td><td align="left">Find the Smallest Divisor Given a Threshold</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1283.Find-the-Smallest-Divisor-Given-a-Threshold" target="_blank" rel="noopener">Go</a></td><td align="center">49.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1284</td><td align="left">Minimum Number of Flips to Convert Binary Matrix to Zero Matrix</td><td align="center"></td><td align="center">70.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1285</td><td align="left">Find the Start and End Number of Continuous Ranges</td><td align="center"></td><td align="center">87.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1286</td><td align="left">Iterator for Combination</td><td align="center"></td><td align="center">70.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1287</td><td align="left">Element Appearing More Than 25% In Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1287.Element-Appearing-More-Than-25%-In-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">60.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1288</td><td align="left">Remove Covered Intervals</td><td align="center"></td><td align="center">57.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1289</td><td align="left">Minimum Falling Path Sum II</td><td align="center"></td><td align="center">62.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1290</td><td align="left">Convert Binary Number in a Linked List to Integer</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1290.Convert-Binary-Number-in-a-Linked-List-to-Integer" target="_blank" rel="noopener">Go</a></td><td align="center">81.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1291</td><td align="left">Sequential Digits</td><td align="center"></td><td align="center">57.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1292</td><td align="left">Maximum Side Length of a Square with Sum Less than or Equal to Threshold</td><td align="center"></td><td align="center">50.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1293</td><td align="left">Shortest Path in a Grid with Obstacles Elimination</td><td align="center"></td><td align="center">43.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1294</td><td align="left">Weather Type in Each Country</td><td align="center"></td><td align="center">66.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1295</td><td align="left">Find Numbers with Even Number of Digits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1295.Find-Numbers-with-Even-Number-of-Digits" target="_blank" rel="noopener">Go</a></td><td align="center">78.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1296</td><td align="left">Divide Array in Sets of K Consecutive Numbers</td><td align="center"></td><td align="center">55.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1297</td><td align="left">Maximum Number of Occurrences of a Substring</td><td align="center"></td><td align="center">50.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1298</td><td align="left">Maximum Candies You Can Get from Boxes</td><td align="center"></td><td align="center">59.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1299</td><td align="left">Replace Elements with Greatest Element on Right Side</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1299.Replace-Elements-with-Greatest-Element-on-Right-Side" target="_blank" rel="noopener">Go</a></td><td align="center">74.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1300</td><td align="left">Sum of Mutated Array Closest to Target</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1300.Sum-of-Mutated-Array-Closest-to-Target" target="_blank" rel="noopener">Go</a></td><td align="center">43.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1301</td><td align="left">Number of Paths with Max Score</td><td align="center"></td><td align="center">38.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1302</td><td align="left">Deepest Leaves Sum</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1302.Deepest-Leaves-Sum" target="_blank" rel="noopener">Go</a></td><td align="center">84.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1303</td><td align="left">Find the Team Size</td><td align="center"></td><td align="center">89.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1304</td><td align="left">Find N Unique Integers Sum up to Zero</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1304.Find-N-Unique-Integers-Sum-up-to-Zero" target="_blank" rel="noopener">Go</a></td><td align="center">76.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1305</td><td align="left">All Elements in Two Binary Search Trees</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1305.All-Elements-in-Two-Binary-Search-Trees" target="_blank" rel="noopener">Go</a></td><td align="center">77.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1306</td><td align="left">Jump Game III</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1306.Jump-Game-III" target="_blank" rel="noopener">Go</a></td><td align="center">62.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1307</td><td align="left">Verbal Arithmetic Puzzle</td><td align="center"></td><td align="center">36.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1308</td><td align="left">Running Total for Different Genders</td><td align="center"></td><td align="center">87.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1309</td><td align="left">Decrypt String from Alphabet to Integer Mapping</td><td align="center"></td><td align="center">77.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1310</td><td align="left">XOR Queries of a Subarray</td><td align="center"></td><td align="center">69.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1311</td><td align="left">Get Watched Videos by Your Friends</td><td align="center"></td><td align="center">44.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1312</td><td align="left">Minimum Insertion Steps to Make a String Palindrome</td><td align="center"></td><td align="center">59.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1313</td><td align="left">Decompress Run-Length Encoded List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1313.Decompress-Run-Length-Encoded-List" target="_blank" rel="noopener">Go</a></td><td align="center">85.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1314</td><td align="left">Matrix Block Sum</td><td align="center"></td><td align="center">73.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1315</td><td align="left">Sum of Nodes with Even-Valued Grandparent</td><td align="center"></td><td align="center">84.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1316</td><td align="left">Distinct Echo Substrings</td><td align="center"></td><td align="center">49.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1317</td><td align="left">Convert Integer to the Sum of Two No-Zero Integers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1317.Convert-Integer-to-the-Sum-of-Two-No-Zero-Integers" target="_blank" rel="noopener">Go</a></td><td align="center">56.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1318</td><td align="left">Minimum Flips to Make a OR b Equal to c</td><td align="center"></td><td align="center">63.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1319</td><td align="left">Number of Operations to Make Network Connected</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1319.Number-of-Operations-to-Make-Network-Connected" target="_blank" rel="noopener">Go</a></td><td align="center">55.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1320</td><td align="left">Minimum Distance to Type a Word Using Two Fingers</td><td align="center"></td><td align="center">61.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1321</td><td align="left">Restaurant Growth</td><td align="center"></td><td align="center">71.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1322</td><td align="left">Ads Performance</td><td align="center"></td><td align="center">58.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1323</td><td align="left">Maximum 69 Number</td><td align="center"></td><td align="center">77.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1324</td><td align="left">Print Words Vertically</td><td align="center"></td><td align="center">58.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1325</td><td align="left">Delete Leaves With a Given Value</td><td align="center"></td><td align="center">73.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1326</td><td align="left">Minimum Number of Taps to Open to Water a Garden</td><td align="center"></td><td align="center">47.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1327</td><td align="left">List the Products Ordered in a Period</td><td align="center"></td><td align="center">77.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1328</td><td align="left">Break a Palindrome</td><td align="center"></td><td align="center">47.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1329</td><td align="left">Sort the Matrix Diagonally</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1329.Sort-the-Matrix-Diagonally" target="_blank" rel="noopener">Go</a></td><td align="center">81.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1330</td><td align="left">Reverse Subarray To Maximize Array Value</td><td align="center"></td><td align="center">36.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1331</td><td align="left">Rank Transform of an Array</td><td align="center"></td><td align="center">57.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1332</td><td align="left">Remove Palindromic Subsequences</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1332.Remove-Palindromic-Subsequences" target="_blank" rel="noopener">Go</a></td><td align="center">68.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1333</td><td align="left">Filter Restaurants by Vegan-Friendly, Price and Distance</td><td align="center"></td><td align="center">57.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1334</td><td align="left">Find the City With the Smallest Number of Neighbors at a Threshold Distance</td><td align="center"></td><td align="center">47.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1335</td><td align="left">Minimum Difficulty of a Job Schedule</td><td align="center"></td><td align="center">56.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1336</td><td align="left">Number of Transactions per Visit</td><td align="center"></td><td align="center">48.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1337</td><td align="left">The K Weakest Rows in a Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1337.The-K-Weakest-Rows-in-a-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">71.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1338</td><td align="left">Reduce Array Size to The Half</td><td align="center"></td><td align="center">67.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1339</td><td align="left">Maximum Product of Splitted Binary Tree</td><td align="center"></td><td align="center">38.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1340</td><td align="left">Jump Game V</td><td align="center"></td><td align="center">59.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1341</td><td align="left">Movie Rating</td><td align="center"></td><td align="center">58.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1342</td><td align="left">Number of Steps to Reduce a Number to Zero</td><td align="center"></td><td align="center">85.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1343</td><td align="left">Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold</td><td align="center"></td><td align="center">64.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1344</td><td align="left">Angle Between Hands of a Clock</td><td align="center"></td><td align="center">61.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1345</td><td align="left">Jump Game IV</td><td align="center"></td><td align="center">41.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1346</td><td align="left">Check If N and Its Double Exist</td><td align="center"></td><td align="center">36.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1347</td><td align="left">Minimum Number of Steps to Make Two Strings Anagram</td><td align="center"></td><td align="center">75.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1348</td><td align="left">Tweet Counts Per Frequency</td><td align="center"></td><td align="center">36.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1349</td><td align="left">Maximum Students Taking Exam</td><td align="center"></td><td align="center">44.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1350</td><td align="left">Students With Invalid Departments</td><td align="center"></td><td align="center">90.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1351</td><td align="left">Count Negative Numbers in a Sorted Matrix</td><td align="center"></td><td align="center">75.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1352</td><td align="left">Product of the Last K Numbers</td><td align="center"></td><td align="center">44.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1353</td><td align="left">Maximum Number of Events That Can Be Attended</td><td align="center"></td><td align="center">30.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1354</td><td align="left">Construct Target Array With Multiple Sums</td><td align="center"></td><td align="center">31.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1355</td><td align="left">Activity Participants</td><td align="center"></td><td align="center">74.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1356</td><td align="left">Sort Integers by The Number of 1 Bits</td><td align="center"></td><td align="center">69.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1357</td><td align="left">Apply Discount Every n Orders</td><td align="center"></td><td align="center">66.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1358</td><td align="left">Number of Substrings Containing All Three Characters</td><td align="center"></td><td align="center">60.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1359</td><td align="left">Count All Valid Pickup and Delivery Options</td><td align="center"></td><td align="center">56.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1360</td><td align="left">Number of Days Between Two Dates</td><td align="center"></td><td align="center">46.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1361</td><td align="left">Validate Binary Tree Nodes</td><td align="center"></td><td align="center">43.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1362</td><td align="left">Closest Divisors</td><td align="center"></td><td align="center">57.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1363</td><td align="left">Largest Multiple of Three</td><td align="center"></td><td align="center">34.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1364</td><td align="left">Number of Trusted Contacts of a Customer</td><td align="center"></td><td align="center">78.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1365</td><td align="left">How Many Numbers Are Smaller Than the Current Number</td><td align="center"></td><td align="center">85.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1366</td><td align="left">Rank Teams by Votes</td><td align="center"></td><td align="center">55.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1367</td><td align="left">Linked List in Binary Tree</td><td align="center"></td><td align="center">41.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1368</td><td align="left">Minimum Cost to Make at Least One Valid Path in a Grid</td><td align="center"></td><td align="center">57.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1369</td><td align="left">Get the Second Most Recent Activity</td><td align="center"></td><td align="center">69.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1370</td><td align="left">Increasing Decreasing String</td><td align="center"></td><td align="center">77.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1371</td><td align="left">Find the Longest Substring Containing Vowels in Even Counts</td><td align="center"></td><td align="center">60.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1372</td><td align="left">Longest ZigZag Path in a Binary Tree</td><td align="center"></td><td align="center">55.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1373</td><td align="left">Maximum Sum BST in Binary Tree</td><td align="center"></td><td align="center">37.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1374</td><td align="left">Generate a String With Characters That Have Odd Counts</td><td align="center"></td><td align="center">76.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1375</td><td align="left">Bulb Switcher III</td><td align="center"></td><td align="center">64.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1376</td><td align="left">Time Needed to Inform All Employees</td><td align="center"></td><td align="center">56.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1377</td><td align="left">Frog Position After T Seconds</td><td align="center"></td><td align="center">35.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1378</td><td align="left">Replace Employee ID With The Unique Identifier</td><td align="center"></td><td align="center">90.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1379</td><td align="left">Find a Corresponding Node of a Binary Tree in a Clone of That Tree</td><td align="center"></td><td align="center">84.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1380</td><td align="left">Lucky Numbers in a Matrix</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1380.Lucky-Numbers-in-a-Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">70.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1381</td><td align="left">Design a Stack With Increment Operation</td><td align="center"></td><td align="center">76.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1382</td><td align="left">Balance a Binary Search Tree</td><td align="center"></td><td align="center">76.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1383</td><td align="left">Maximum Performance of a Team</td><td align="center"></td><td align="center">35.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1384</td><td align="left">Total Sales Amount by Year</td><td align="center"></td><td align="center">64.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1385</td><td align="left">Find the Distance Value Between Two Arrays</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1385.Find-the-Distance-Value-Between-Two-Arrays" target="_blank" rel="noopener">Go</a></td><td align="center">66.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1386</td><td align="left">Cinema Seat Allocation</td><td align="center"></td><td align="center">35.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1387</td><td align="left">Sort Integers by The Power Value</td><td align="center"></td><td align="center">70.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1388</td><td align="left">Pizza With 3n Slices</td><td align="center"></td><td align="center">46.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1389</td><td align="left">Create Target Array in the Given Order</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1389.Create-Target-Array-in-the-Given-Order" target="_blank" rel="noopener">Go</a></td><td align="center">84.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1390</td><td align="left">Four Divisors</td><td align="center"></td><td align="center">39.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1391</td><td align="left">Check if There is a Valid Path in a Grid</td><td align="center"></td><td align="center">44.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1392</td><td align="left">Longest Happy Prefix</td><td align="center"></td><td align="center">42.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1393</td><td align="left">Capital Gain/Loss</td><td align="center"></td><td align="center">90.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1394</td><td align="left">Find Lucky Integer in an Array</td><td align="center"></td><td align="center">63.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1395</td><td align="left">Count Number of Teams</td><td align="center"></td><td align="center">76.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1396</td><td align="left">Design Underground System</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1396.Design-Underground-System" target="_blank" rel="noopener">Go</a></td><td align="center">71.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1397</td><td align="left">Find All Good Strings</td><td align="center"></td><td align="center">38.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1398</td><td align="left">Customers Who Bought Products A and B but Not C</td><td align="center"></td><td align="center">82.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1399</td><td align="left">Count Largest Group</td><td align="center"></td><td align="center">65.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1400</td><td align="left">Construct K Palindrome Strings</td><td align="center"></td><td align="center">63.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1401</td><td align="left">Circle and Rectangle Overlapping</td><td align="center"></td><td align="center">42.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1402</td><td align="left">Reducing Dishes</td><td align="center"></td><td align="center">72.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1403</td><td align="left">Minimum Subsequence in Non-Increasing Order</td><td align="center"></td><td align="center">71.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1404</td><td align="left">Number of Steps to Reduce a Number in Binary Representation to One</td><td align="center"></td><td align="center">49.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1405</td><td align="left">Longest Happy String</td><td align="center"></td><td align="center">52.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1406</td><td align="left">Stone Game III</td><td align="center"></td><td align="center">57.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1407</td><td align="left">Top Travellers</td><td align="center"></td><td align="center">83.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1408</td><td align="left">String Matching in an Array</td><td align="center"></td><td align="center">63.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1409</td><td align="left">Queries on a Permutation With Key</td><td align="center"></td><td align="center">81.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1410</td><td align="left">HTML Entity Parser</td><td align="center"></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1411</td><td align="left">Number of Ways to Paint N × 3 Grid</td><td align="center"></td><td align="center">60.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1412</td><td align="left">Find the Quiet Students in All Exams</td><td align="center"></td><td align="center">64.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1413</td><td align="left">Minimum Value to Get Positive Step by Step Sum</td><td align="center"></td><td align="center">65.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1414</td><td align="left">Find the Minimum Number of Fibonacci Numbers Whose Sum Is K</td><td align="center"></td><td align="center">63.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1415</td><td align="left">The k-th Lexicographical String of All Happy Strings of Length n</td><td align="center"></td><td align="center">69.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1416</td><td align="left">Restore The Array</td><td align="center"></td><td align="center">36.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1417</td><td align="left">Reformat The String</td><td align="center"></td><td align="center">55.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1418</td><td align="left">Display Table of Food Orders in a Restaurant</td><td align="center"></td><td align="center">69.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1419</td><td align="left">Minimum Number of Frogs Croaking</td><td align="center"></td><td align="center">47.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1420</td><td align="left">Build Array Where You Can Find The Maximum Exactly K Comparisons</td><td align="center"></td><td align="center">64.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1421</td><td align="left">NPV Queries</td><td align="center"></td><td align="center">82.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1422</td><td align="left">Maximum Score After Splitting a String</td><td align="center"></td><td align="center">56.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1423</td><td align="left">Maximum Points You Can Obtain from Cards</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1423.Maximum-Points-You-Can-Obtain-from-Cards" target="_blank" rel="noopener">Go</a></td><td align="center">46.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1424</td><td align="left">Diagonal Traverse II</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1425</td><td align="left">Constrained Subsequence Sum</td><td align="center"></td><td align="center">44.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1426</td><td align="left">Counting Elements</td><td align="center"></td><td align="center">59.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1427</td><td align="left">Perform String Shifts</td><td align="center"></td><td align="center">53.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1428</td><td align="left">Leftmost Column with at Least a One</td><td align="center"></td><td align="center">49.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1429</td><td align="left">First Unique Number</td><td align="center"></td><td align="center">49.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1430</td><td align="left">Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree</td><td align="center"></td><td align="center">45.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1431</td><td align="left">Kids With the Greatest Number of Candies</td><td align="center"></td><td align="center">88.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1432</td><td align="left">Max Difference You Can Get From Changing an Integer</td><td align="center"></td><td align="center">42.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1433</td><td align="left">Check If a String Can Break Another String</td><td align="center"></td><td align="center">67.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1434</td><td align="left">Number of Ways to Wear Different Hats to Each Other</td><td align="center"></td><td align="center">39.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1435</td><td align="left">Create a Session Bar Chart</td><td align="center"></td><td align="center">77.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1436</td><td align="left">Destination City</td><td align="center"></td><td align="center">77.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1437</td><td align="left">Check If All 1’s Are at Least Length K Places Away</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1437.Check-If-All-1's-Are-at-Least-Length-K-Places-Away" target="_blank" rel="noopener">Go</a></td><td align="center">62.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1438</td><td align="left">Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1438.Longest-Continuous-Subarray-With-Absolute-Diff-Less-Than-or-Equal-to-Limit" target="_blank" rel="noopener">Go</a></td><td align="center">44.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1439</td><td align="left">Find the Kth Smallest Sum of a Matrix With Sorted Rows</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1439.Find-the-Kth-Smallest-Sum-of-a-Matrix-With-Sorted-Rows" target="_blank" rel="noopener">Go</a></td><td align="center">60.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1440</td><td align="left">Evaluate Boolean Expression</td><td align="center"></td><td align="center">74.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1441</td><td align="left">Build an Array With Stack Operations</td><td align="center"></td><td align="center">70.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1442</td><td align="left">Count Triplets That Can Form Two Arrays of Equal XOR</td><td align="center"></td><td align="center">71.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1443</td><td align="left">Minimum Time to Collect All Apples in a Tree</td><td align="center"></td><td align="center">54.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1444</td><td align="left">Number of Ways of Cutting a Pizza</td><td align="center"></td><td align="center">53.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1445</td><td align="left">Apples &amp; Oranges</td><td align="center"></td><td align="center">90.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1446</td><td align="left">Consecutive Characters</td><td align="center"></td><td align="center">61.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1447</td><td align="left">Simplified Fractions</td><td align="center"></td><td align="center">62.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1448</td><td align="left">Count Good Nodes in Binary Tree</td><td align="center"></td><td align="center">71.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1449</td><td align="left">Form Largest Integer With Digits That Add up to Target</td><td align="center"></td><td align="center">44.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1450</td><td align="left">Number of Students Doing Homework at a Given Time</td><td align="center"></td><td align="center">77.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1451</td><td align="left">Rearrange Words in a Sentence</td><td align="center"></td><td align="center">59.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1452</td><td align="left">People Whose List of Favorite Companies Is Not a Subset of Another List</td><td align="center"></td><td align="center">55.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1453</td><td align="left">Maximum Number of Darts Inside of a Circular Dartboard</td><td align="center"></td><td align="center">35.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1454</td><td align="left">Active Users</td><td align="center"></td><td align="center">38.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1455</td><td align="left">Check If a Word Occurs As a Prefix of Any Word in a Sentence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1455.Check-If-a-Word-Occurs-As-a-Prefix-of-Any-Word-in-a-Sentence" target="_blank" rel="noopener">Go</a></td><td align="center">65.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1456</td><td align="left">Maximum Number of Vowels in a Substring of Given Length</td><td align="center"></td><td align="center">54.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1457</td><td align="left">Pseudo-Palindromic Paths in a Binary Tree</td><td align="center"></td><td align="center">70.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1458</td><td align="left">Max Dot Product of Two Subsequences</td><td align="center"></td><td align="center">43.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1459</td><td align="left">Rectangles Area</td><td align="center"></td><td align="center">65.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1460</td><td align="left">Make Two Arrays Equal by Reversing Sub-arrays</td><td align="center"></td><td align="center">72.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1461</td><td align="left">Check If a String Contains All Binary Codes of Size K</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1461.Check-If-a-String-Contains-All-Binary-Codes-of-Size-K" target="_blank" rel="noopener">Go</a></td><td align="center">54.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1462</td><td align="left">Course Schedule IV</td><td align="center"></td><td align="center">44.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1463</td><td align="left">Cherry Pickup II</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1463.Cherry-Pickup-II" target="_blank" rel="noopener">Go</a></td><td align="center">69.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1464</td><td align="left">Maximum Product of Two Elements in an Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1464.Maximum-Product-of-Two-Elements-in-an-Array" target="_blank" rel="noopener">Go</a></td><td align="center">77.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1465</td><td align="left">Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts</td><td align="center"></td><td align="center">33.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1466</td><td align="left">Reorder Routes to Make All Paths Lead to the City Zero</td><td align="center"></td><td align="center">61.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1467</td><td align="left">Probability of a Two Boxes Having The Same Number of Distinct Balls</td><td align="center"></td><td align="center">60.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1468</td><td align="left">Calculate Salaries</td><td align="center"></td><td align="center">82.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1469</td><td align="left">Find All The Lonely Nodes</td><td align="center"></td><td align="center">80.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1470</td><td align="left">Shuffle the Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1470.Shuffle-the-Array" target="_blank" rel="noopener">Go</a></td><td align="center">88.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1471</td><td align="left">The k Strongest Values in an Array</td><td align="center"></td><td align="center">58.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1472</td><td align="left">Design Browser History</td><td align="center"></td><td align="center">71.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1473</td><td align="left">Paint House III</td><td align="center"></td><td align="center">48.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1474</td><td align="left">Delete N Nodes After M Nodes of a Linked List</td><td align="center"></td><td align="center">74.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1475</td><td align="left">Final Prices With a Special Discount in a Shop</td><td align="center"></td><td align="center">75.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1476</td><td align="left">Subrectangle Queries</td><td align="center"></td><td align="center">88.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1477</td><td align="left">Find Two Non-overlapping Sub-arrays Each With Target Sum</td><td align="center"></td><td align="center">34.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1478</td><td align="left">Allocate Mailboxes</td><td align="center"></td><td align="center">54.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1479</td><td align="left">Sales by Day of the Week</td><td align="center"></td><td align="center">83.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1480</td><td align="left">Running Sum of 1d Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1480.Running-Sum-of-1d-Array" target="_blank" rel="noopener">Go</a></td><td align="center">88.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1481</td><td align="left">Least Number of Unique Integers after K Removals</td><td align="center"></td><td align="center">55.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1482</td><td align="left">Minimum Number of Days to Make m Bouquets</td><td align="center"></td><td align="center">50.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1483</td><td align="left">Kth Ancestor of a Tree Node</td><td align="center"></td><td align="center">30.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1484</td><td align="left">Group Sold Products By The Date</td><td align="center"></td><td align="center">85.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1485</td><td align="left">Clone Binary Tree With Random Pointer</td><td align="center"></td><td align="center">79.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1486</td><td align="left">XOR Operation in an Array</td><td align="center"></td><td align="center">84.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1487</td><td align="left">Making File Names Unique</td><td align="center"></td><td align="center">30.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1488</td><td align="left">Avoid Flood in The City</td><td align="center"></td><td align="center">24.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1489</td><td align="left">Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree</td><td align="center"></td><td align="center">51.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1490</td><td align="left">Clone N-ary Tree</td><td align="center"></td><td align="center">83.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1491</td><td align="left">Average Salary Excluding the Minimum and Maximum Salary</td><td align="center"></td><td align="center">68.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1492</td><td align="left">The kth Factor of n</td><td align="center"></td><td align="center">63.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1493</td><td align="left">Longest Subarray of 1’s After Deleting One Element</td><td align="center"></td><td align="center">57.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1494</td><td align="left">Parallel Courses II</td><td align="center"></td><td align="center">31.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1495</td><td align="left">Friendly Movies Streamed Last Month</td><td align="center"></td><td align="center">51.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1496</td><td align="left">Path Crossing</td><td align="center"></td><td align="center">55.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1497</td><td align="left">Check If Array Pairs Are Divisible by k</td><td align="center"></td><td align="center">40.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1498</td><td align="left">Number of Subsequences That Satisfy the Given Sum Condition</td><td align="center"></td><td align="center">38.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1499</td><td align="left">Max Value of Equation</td><td align="center"></td><td align="center">44.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1500</td><td align="left">Design a File Sharing System</td><td align="center"></td><td align="center">46.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1501</td><td align="left">Countries You Can Safely Invest In</td><td align="center"></td><td align="center">60.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1502</td><td align="left">Can Make Arithmetic Progression From Sequence</td><td align="center"></td><td align="center">70.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1503</td><td align="left">Last Moment Before All Ants Fall Out of a Plank</td><td align="center"></td><td align="center">53.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1504</td><td align="left">Count Submatrices With All Ones</td><td align="center"></td><td align="center">60.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1505</td><td align="left">Minimum Possible Integer After at Most K Adjacent Swaps On Digits</td><td align="center"></td><td align="center">36.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1506</td><td align="left">Find Root of N-Ary Tree</td><td align="center"></td><td align="center">80.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1507</td><td align="left">Reformat Date</td><td align="center"></td><td align="center">60.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1508</td><td align="left">Range Sum of Sorted Subarray Sums</td><td align="center"></td><td align="center">60.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1509</td><td align="left">Minimum Difference Between Largest and Smallest Value in Three Moves</td><td align="center"></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1510</td><td align="left">Stone Game IV</td><td align="center"></td><td align="center">58.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1511</td><td align="left">Customer Order Frequency</td><td align="center"></td><td align="center">73.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1512</td><td align="left">Number of Good Pairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1512.Number-of-Good-Pairs" target="_blank" rel="noopener">Go</a></td><td align="center">87.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1513</td><td align="left">Number of Substrings With Only 1s</td><td align="center"></td><td align="center">42.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1514</td><td align="left">Path with Maximum Probability</td><td align="center"></td><td align="center">40.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1515</td><td align="left">Best Position for a Service Centre</td><td align="center"></td><td align="center">38.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1516</td><td align="left">Move Sub-Tree of N-Ary Tree</td><td align="center"></td><td align="center">63.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1517</td><td align="left">Find Users With Valid E-Mails</td><td align="center"></td><td align="center">71.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1518</td><td align="left">Water Bottles</td><td align="center"></td><td align="center">60.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1519</td><td align="left">Number of Nodes in the Sub-Tree With the Same Label</td><td align="center"></td><td align="center">37.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1520</td><td align="left">Maximum Number of Non-Overlapping Substrings</td><td align="center"></td><td align="center">36.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1521</td><td align="left">Find a Value of a Mysterious Function Closest to Target</td><td align="center"></td><td align="center">44.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1522</td><td align="left">Diameter of N-Ary Tree</td><td align="center"></td><td align="center">69.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1523</td><td align="left">Count Odd Numbers in an Interval Range</td><td align="center"></td><td align="center">54.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1524</td><td align="left">Number of Sub-arrays With Odd Sum</td><td align="center"></td><td align="center">40.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1525</td><td align="left">Number of Good Ways to Split a String</td><td align="center"></td><td align="center">66.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1526</td><td align="left">Minimum Number of Increments on Subarrays to Form a Target Array</td><td align="center"></td><td align="center">60.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1527</td><td align="left">Patients With a Condition</td><td align="center"></td><td align="center">64.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1528</td><td align="left">Shuffle String</td><td align="center"></td><td align="center">85.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1529</td><td align="left">Bulb Switcher IV</td><td align="center"></td><td align="center">70.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1530</td><td align="left">Number of Good Leaf Nodes Pairs</td><td align="center"></td><td align="center">56.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1531</td><td align="left">String Compression II</td><td align="center"></td><td align="center">33.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1532</td><td align="left">The Most Recent Three Orders</td><td align="center"></td><td align="center">72.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1533</td><td align="left">Find the Index of the Large Integer</td><td align="center"></td><td align="center">54.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1534</td><td align="left">Count Good Triplets</td><td align="center"></td><td align="center">80.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1535</td><td align="left">Find the Winner of an Array Game</td><td align="center"></td><td align="center">47.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1536</td><td align="left">Minimum Swaps to Arrange a Binary Grid</td><td align="center"></td><td align="center">43.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1537</td><td align="left">Get the Maximum Score</td><td align="center"></td><td align="center">36.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1538</td><td align="left">Guess the Majority in a Hidden Array</td><td align="center"></td><td align="center">61.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1539</td><td align="left">Kth Missing Positive Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1539.Kth-Missing-Positive-Number" target="_blank" rel="noopener">Go</a></td><td align="center">54.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1540</td><td align="left">Can Convert String in K Moves</td><td align="center"></td><td align="center">31.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1541</td><td align="left">Minimum Insertions to Balance a Parentheses String</td><td align="center"></td><td align="center">42.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1542</td><td align="left">Find Longest Awesome Substring</td><td align="center"></td><td align="center">36.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1543</td><td align="left">Fix Product Name Format</td><td align="center"></td><td align="center">67.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1544</td><td align="left">Make The String Great</td><td align="center"></td><td align="center">55.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1545</td><td align="left">Find Kth Bit in Nth Binary String</td><td align="center"></td><td align="center">57.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1546</td><td align="left">Maximum Number of Non-Overlapping Subarrays With Sum Equals Target</td><td align="center"></td><td align="center">43.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1547</td><td align="left">Minimum Cost to Cut a Stick</td><td align="center"></td><td align="center">52.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1548</td><td align="left">The Most Similar Path in a Graph</td><td align="center"></td><td align="center">54.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1549</td><td align="left">The Most Recent Orders for Each Product</td><td align="center"></td><td align="center">66.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1550</td><td align="left">Three Consecutive Odds</td><td align="center"></td><td align="center">64.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1551</td><td align="left">Minimum Operations to Make Array Equal</td><td align="center"></td><td align="center">77.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1552</td><td align="left">Magnetic Force Between Two Balls</td><td align="center"></td><td align="center">49.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1553</td><td align="left">Minimum Number of Days to Eat N Oranges</td><td align="center"></td><td align="center">29.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1554</td><td align="left">Strings Differ by One Character</td><td align="center"></td><td align="center">63.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1555</td><td align="left">Bank Account Summary</td><td align="center"></td><td align="center">52.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1556</td><td align="left">Thousand Separator</td><td align="center"></td><td align="center">57.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1557</td><td align="left">Minimum Number of Vertices to Reach All Nodes</td><td align="center"></td><td align="center">75.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1558</td><td align="left">Minimum Numbers of Function Calls to Make Target Array</td><td align="center"></td><td align="center">63.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1559</td><td align="left">Detect Cycles in 2D Grid</td><td align="center"></td><td align="center">44.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1560</td><td align="left">Most Visited Sector in  a Circular Track</td><td align="center"></td><td align="center">56.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1561</td><td align="left">Maximum Number of Coins You Can Get</td><td align="center"></td><td align="center">77.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1562</td><td align="left">Find Latest Group of Size M</td><td align="center"></td><td align="center">39.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1563</td><td align="left">Stone Game V</td><td align="center"></td><td align="center">39.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1564</td><td align="left">Put Boxes Into the Warehouse I</td><td align="center"></td><td align="center">66.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1565</td><td align="left">Unique Orders and Customers Per Month</td><td align="center"></td><td align="center">82.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1566</td><td align="left">Detect Pattern of Length M Repeated K or More Times</td><td align="center"></td><td align="center">42.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1567</td><td align="left">Maximum Length of Subarray With Positive Product</td><td align="center"></td><td align="center">36.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1568</td><td align="left">Minimum Number of Days to Disconnect Island</td><td align="center"></td><td align="center">50.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1569</td><td align="left">Number of Ways to Reorder Array to Get Same BST</td><td align="center"></td><td align="center">50.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1570</td><td align="left">Dot Product of Two Sparse Vectors</td><td align="center"></td><td align="center">91.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1571</td><td align="left">Warehouse Manager</td><td align="center"></td><td align="center">89.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1572</td><td align="left">Matrix Diagonal Sum</td><td align="center"></td><td align="center">77.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1573</td><td align="left">Number of Ways to Split a String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1573.Number-of-Ways-to-Split-a-String" target="_blank" rel="noopener">Go</a></td><td align="center">31.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1574</td><td align="left">Shortest Subarray to be Removed to Make Array Sorted</td><td align="center"></td><td align="center">33.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1575</td><td align="left">Count All Possible Routes</td><td align="center"></td><td align="center">57.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1576</td><td align="left">Replace All ?’s to Avoid Consecutive Repeating Characters</td><td align="center"></td><td align="center">49.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1577</td><td align="left">Number of Ways Where Square of Number Is Equal to Product of Two Numbers</td><td align="center"></td><td align="center">37.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1578</td><td align="left">Minimum Deletion Cost to Avoid Repeating Letters</td><td align="center"></td><td align="center">60.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1579</td><td align="left">Remove Max Number of Edges to Keep Graph Fully Traversable</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1579.Remove-Max-Number-of-Edges-to-Keep-Graph-Fully-Traversable" target="_blank" rel="noopener">Go</a></td><td align="center">46.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1580</td><td align="left">Put Boxes Into the Warehouse II</td><td align="center"></td><td align="center">62.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1581</td><td align="left">Customer Who Visited but Did Not Make Any Transactions</td><td align="center"></td><td align="center">89.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1582</td><td align="left">Special Positions in a Binary Matrix</td><td align="center"></td><td align="center">64.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1583</td><td align="left">Count Unhappy Friends</td><td align="center"></td><td align="center">54.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1584</td><td align="left">Min Cost to Connect All Points</td><td align="center"></td><td align="center">52.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1585</td><td align="left">Check If String Is Transformable With Substring Sort Operations</td><td align="center"></td><td align="center">48.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1586</td><td align="left">Binary Search Tree Iterator II</td><td align="center"></td><td align="center">66.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1587</td><td align="left">Bank Account Summary II</td><td align="center"></td><td align="center">89.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1588</td><td align="left">Sum of All Odd Length Subarrays</td><td align="center"></td><td align="center">81.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1589</td><td align="left">Maximum Sum Obtained of Any Permutation</td><td align="center"></td><td align="center">34.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1590</td><td align="left">Make Sum Divisible by P</td><td align="center"></td><td align="center">26.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1591</td><td align="left">Strange Printer II</td><td align="center"></td><td align="center">55.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1592</td><td align="left">Rearrange Spaces Between Words</td><td align="center"></td><td align="center">43.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1593</td><td align="left">Split a String Into the Max Number of Unique Substrings</td><td align="center"></td><td align="center">49.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1594</td><td align="left">Maximum Non Negative Product in a Matrix</td><td align="center"></td><td align="center">31.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1595</td><td align="left">Minimum Cost to Connect Two Groups of Points</td><td align="center"></td><td align="center">43.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1596</td><td align="left">The Most Frequently Ordered Products for Each Customer</td><td align="center"></td><td align="center">84.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1597</td><td align="left">Build Binary Expression Tree From Infix Expression</td><td align="center"></td><td align="center">59.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1598</td><td align="left">Crawler Log Folder</td><td align="center"></td><td align="center">63.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1599</td><td align="left">Maximum Profit of Operating a Centennial Wheel</td><td align="center"></td><td align="center">43.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1600</td><td align="left">Throne Inheritance</td><td align="center"></td><td align="center">60.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1601</td><td align="left">Maximum Number of Achievable Transfer Requests</td><td align="center"></td><td align="center">47.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1602</td><td align="left">Find Nearest Right Node in Binary Tree</td><td align="center"></td><td align="center">73.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1603</td><td align="left">Design Parking System</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1603.Design-Parking-System" target="_blank" rel="noopener">Go</a></td><td align="center">86.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1604</td><td align="left">Alert Using Same Key-Card Three or More Times in a One Hour Period</td><td align="center"></td><td align="center">42.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1605</td><td align="left">Find Valid Matrix Given Row and Column Sums</td><td align="center"></td><td align="center">77.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1606</td><td align="left">Find Servers That Handled Most Number of Requests</td><td align="center"></td><td align="center">37.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1607</td><td align="left">Sellers With No Sales</td><td align="center"></td><td align="center">55.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1608</td><td align="left">Special Array With X Elements Greater Than or Equal X</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1608.Special-Array-With-X-Elements-Greater-Than-or-Equal-X" target="_blank" rel="noopener">Go</a></td><td align="center">61.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1609</td><td align="left">Even Odd Tree</td><td align="center"></td><td align="center">52.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1610</td><td align="left">Maximum Number of Visible Points</td><td align="center"></td><td align="center">30.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1611</td><td align="left">Minimum One Bit Operations to Make Integers Zero</td><td align="center"></td><td align="center">57.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1612</td><td align="left">Check If Two Expression Trees are Equivalent</td><td align="center"></td><td align="center">70.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1613</td><td align="left">Find the Missing IDs</td><td align="center"></td><td align="center">74.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1614</td><td align="left">Maximum Nesting Depth of the Parentheses</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1614.Maximum-Nesting-Depth-of-the-Parentheses" target="_blank" rel="noopener">Go</a></td><td align="center">82.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1615</td><td align="left">Maximal Network Rank</td><td align="center"></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1616</td><td align="left">Split Two Strings to Make Palindrome</td><td align="center"></td><td align="center">36.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1617</td><td align="left">Count Subtrees With Max Distance Between Cities</td><td align="center"></td><td align="center">63.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1618</td><td align="left">Maximum Font to Fit a Sentence in a Screen</td><td align="center"></td><td align="center">56.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1619</td><td align="left">Mean of Array After Removing Some Elements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1619.Mean-of-Array-After-Removing-Some-Elements" target="_blank" rel="noopener">Go</a></td><td align="center">64.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1620</td><td align="left">Coordinate With Maximum Network Quality</td><td align="center"></td><td align="center">37.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1621</td><td align="left">Number of Sets of K Non-Overlapping Line Segments</td><td align="center"></td><td align="center">41.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1622</td><td align="left">Fancy Sequence</td><td align="center"></td><td align="center">15.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1623</td><td align="left">All Valid Triplets That Can Represent a Country</td><td align="center"></td><td align="center">88.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1624</td><td align="left">Largest Substring Between Two Equal Characters</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1624.Largest-Substring-Between-Two-Equal-Characters" target="_blank" rel="noopener">Go</a></td><td align="center">58.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1625</td><td align="left">Lexicographically Smallest String After Applying Operations</td><td align="center"></td><td align="center">64.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1626</td><td align="left">Best Team With No Conflicts</td><td align="center"></td><td align="center">38.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1627</td><td align="left">Graph Connectivity With Threshold</td><td align="center"></td><td align="center">39.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1628</td><td align="left">Design an Expression Tree With Evaluate Function</td><td align="center"></td><td align="center">80.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1629</td><td align="left">Slowest Key</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1629.Slowest-Key" target="_blank" rel="noopener">Go</a></td><td align="center">59.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1630</td><td align="left">Arithmetic Subarrays</td><td align="center"></td><td align="center">77.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1631</td><td align="left">Path With Minimum Effort</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1631.Path-With-Minimum-Effort" target="_blank" rel="noopener">Go</a></td><td align="center">50.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1632</td><td align="left">Rank Transform of a Matrix</td><td align="center"></td><td align="center">30.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1633</td><td align="left">Percentage of Users Attended a Contest</td><td align="center"></td><td align="center">71.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1634</td><td align="left">Add Two Polynomials Represented as Linked Lists</td><td align="center"></td><td align="center">55.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1635</td><td align="left">Hopper Company Queries I</td><td align="center"></td><td align="center">55.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1636</td><td align="left">Sort Array by Increasing Frequency</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1636.Sort-Array-by-Increasing-Frequency" target="_blank" rel="noopener">Go</a></td><td align="center">66.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1637</td><td align="left">Widest Vertical Area Between Two Points Containing No Points</td><td align="center"></td><td align="center">83.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1638</td><td align="left">Count Substrings That Differ by One Character</td><td align="center"></td><td align="center">69.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1639</td><td align="left">Number of Ways to Form a Target String Given a Dictionary</td><td align="center"></td><td align="center">40.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1640</td><td align="left">Check Array Formation Through Concatenation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1640.Check-Array-Formation-Through-Concatenation" target="_blank" rel="noopener">Go</a></td><td align="center">59.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1641</td><td align="left">Count Sorted Vowel Strings</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1641.Count-Sorted-Vowel-Strings" target="_blank" rel="noopener">Go</a></td><td align="center">76.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1642</td><td align="left">Furthest Building You Can Reach</td><td align="center"></td><td align="center">50.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1643</td><td align="left">Kth Smallest Instructions</td><td align="center"></td><td align="center">44.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1644</td><td align="left">Lowest Common Ancestor of a Binary Tree II</td><td align="center"></td><td align="center">56.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1645</td><td align="left">Hopper Company Queries II</td><td align="center"></td><td align="center">38.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1646</td><td align="left">Get Maximum in Generated Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1646.Get-Maximum-in-Generated-Array" target="_blank" rel="noopener">Go</a></td><td align="center">53.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1647</td><td align="left">Minimum Deletions to Make Character Frequencies Unique</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1647.Minimum-Deletions-to-Make-Character-Frequencies-Unique" target="_blank" rel="noopener">Go</a></td><td align="center">54.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1648</td><td align="left">Sell Diminishing-Valued Colored Balls</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1648.Sell-Diminishing-Valued-Colored-Balls" target="_blank" rel="noopener">Go</a></td><td align="center">30.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1649</td><td align="left">Create Sorted Array through Instructions</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1649.Create-Sorted-Array-through-Instructions" target="_blank" rel="noopener">Go</a></td><td align="center">36.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1650</td><td align="left">Lowest Common Ancestor of a Binary Tree III</td><td align="center"></td><td align="center">76.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1651</td><td align="left">Hopper Company Queries III</td><td align="center"></td><td align="center">66.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1652</td><td align="left">Defuse the Bomb</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1652.Defuse-the-Bomb" target="_blank" rel="noopener">Go</a></td><td align="center">62.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1653</td><td align="left">Minimum Deletions to Make String Balanced</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1653.Minimum-Deletions-to-Make-String-Balanced" target="_blank" rel="noopener">Go</a></td><td align="center">51.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1654</td><td align="left">Minimum Jumps to Reach Home</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1654.Minimum-Jumps-to-Reach-Home" target="_blank" rel="noopener">Go</a></td><td align="center">25.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1655</td><td align="left">Distribute Repeating Integers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1655.Distribute-Repeating-Integers" target="_blank" rel="noopener">Go</a></td><td align="center">39.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1656</td><td align="left">Design an Ordered Stream</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1656.Design-an-Ordered-Stream" target="_blank" rel="noopener">Go</a></td><td align="center">82.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1657</td><td align="left">Determine if Two Strings Are Close</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1657.Determine-if-Two-Strings-Are-Close" target="_blank" rel="noopener">Go</a></td><td align="center">55.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1658</td><td align="left">Minimum Operations to Reduce X to Zero</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1658.Minimum-Operations-to-Reduce-X-to-Zero" target="_blank" rel="noopener">Go</a></td><td align="center">33.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1659</td><td align="left">Maximize Grid Happiness</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1659.Maximize-Grid-Happiness" target="_blank" rel="noopener">Go</a></td><td align="center">35.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1660</td><td align="left">Correct a Binary Tree</td><td align="center"></td><td align="center">76.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1661</td><td align="left">Average Time of Process per Machine</td><td align="center"></td><td align="center">79.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1662</td><td align="left">Check If Two String Arrays are Equivalent</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1662.Check-If-Two-String-Arrays-are-Equivalent" target="_blank" rel="noopener">Go</a></td><td align="center">82.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1663</td><td align="left">Smallest String With A Given Numeric Value</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1663.Smallest-String-With-A-Given-Numeric-Value" target="_blank" rel="noopener">Go</a></td><td align="center">64.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1664</td><td align="left">Ways to Make a Fair Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1664.Ways-to-Make-a-Fair-Array" target="_blank" rel="noopener">Go</a></td><td align="center">62.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1665</td><td align="left">Minimum Initial Energy to Finish Tasks</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1665.Minimum-Initial-Energy-to-Finish-Tasks" target="_blank" rel="noopener">Go</a></td><td align="center">65.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1666</td><td align="left">Change the Root of a Binary Tree</td><td align="center"></td><td align="center">68.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1667</td><td align="left">Fix Names in a Table</td><td align="center"></td><td align="center">62.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1668</td><td align="left">Maximum Repeating Substring</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1668.Maximum-Repeating-Substring" target="_blank" rel="noopener">Go</a></td><td align="center">38.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1669</td><td align="left">Merge In Between Linked Lists</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1669.Merge-In-Between-Linked-Lists" target="_blank" rel="noopener">Go</a></td><td align="center">75.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1670</td><td align="left">Design Front Middle Back Queue</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1670.Design-Front-Middle-Back-Queue" target="_blank" rel="noopener">Go</a></td><td align="center">54.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1671</td><td align="left">Minimum Number of Removals to Make Mountain Array</td><td align="center"></td><td align="center">45.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1672</td><td align="left">Richest Customer Wealth</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1672.Richest-Customer-Wealth" target="_blank" rel="noopener">Go</a></td><td align="center">88.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1673</td><td align="left">Find the Most Competitive Subsequence</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1673.Find-the-Most-Competitive-Subsequence" target="_blank" rel="noopener">Go</a></td><td align="center">45.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1674</td><td align="left">Minimum Moves to Make Array Complementary</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1674.Minimum-Moves-to-Make-Array-Complementary" target="_blank" rel="noopener">Go</a></td><td align="center">34.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1675</td><td align="left">Minimize Deviation in Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1675.Minimize-Deviation-in-Array" target="_blank" rel="noopener">Go</a></td><td align="center">48.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1676</td><td align="left">Lowest Common Ancestor of a Binary Tree IV</td><td align="center"></td><td align="center">79.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1677</td><td align="left">Product’s Worth Over Invoices</td><td align="center"></td><td align="center">73.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1678</td><td align="left">Goal Parser Interpretation</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1678.Goal-Parser-Interpretation" target="_blank" rel="noopener">Go</a></td><td align="center">85.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1679</td><td align="left">Max Number of K-Sum Pairs</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1679.Max-Number-of-K-Sum-Pairs" target="_blank" rel="noopener">Go</a></td><td align="center">53.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1680</td><td align="left">Concatenation of Consecutive Binary Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1680.Concatenation-of-Consecutive-Binary-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">52.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1681</td><td align="left">Minimum Incompatibility</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1681.Minimum-Incompatibility" target="_blank" rel="noopener">Go</a></td><td align="center">35.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1682</td><td align="left">Longest Palindromic Subsequence II</td><td align="center"></td><td align="center">51.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1683</td><td align="left">Invalid Tweets</td><td align="center"></td><td align="center">90.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1684</td><td align="left">Count the Number of Consistent Strings</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1684.Count-the-Number-of-Consistent-Strings" target="_blank" rel="noopener">Go</a></td><td align="center">82.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1685</td><td align="left">Sum of Absolute Differences in a Sorted Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1685.Sum-of-Absolute-Differences-in-a-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">62.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1686</td><td align="left">Stone Game VI</td><td align="center"></td><td align="center">49.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1687</td><td align="left">Delivering Boxes from Storage to Ports</td><td align="center"></td><td align="center">35.0%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1688</td><td align="left">Count of Matches in Tournament</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1688.Count-of-Matches-in-Tournament" target="_blank" rel="noopener">Go</a></td><td align="center">81.5%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1689</td><td align="left">Partitioning Into Minimum Number Of Deci-Binary Numbers</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1689.Partitioning-Into-Minimum-Number-Of-Deci-Binary-Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">87.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1690</td><td align="left">Stone Game VII</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1690.Stone-Game-VII" target="_blank" rel="noopener">Go</a></td><td align="center">48.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1691</td><td align="left">Maximum Height by Stacking Cuboids</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1691.Maximum-Height-by-Stacking-Cuboids" target="_blank" rel="noopener">Go</a></td><td align="center">50.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1692</td><td align="left">Count Ways to Distribute Candies</td><td align="center"></td><td align="center">62.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1693</td><td align="left">Daily Leads and Partners</td><td align="center"></td><td align="center">90.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1694</td><td align="left">Reformat Phone Number</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1694.Reformat-Phone-Number" target="_blank" rel="noopener">Go</a></td><td align="center">65.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1695</td><td align="left">Maximum Erasure Value</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1695.Maximum-Erasure-Value" target="_blank" rel="noopener">Go</a></td><td align="center">49.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1696</td><td align="left">Jump Game VI</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1696.Jump-Game-VI" target="_blank" rel="noopener">Go</a></td><td align="center">52.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1697</td><td align="left">Checking Existence of Edge Length Limited Paths</td><td align="center"></td><td align="center">54.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1698</td><td align="left">Number of Distinct Substrings in a String</td><td align="center"></td><td align="center">60.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1699</td><td align="left">Number of Calls Between Two Persons</td><td align="center"></td><td align="center">86.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1700</td><td align="left">Number of Students Unable to Eat Lunch</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1700.Number-of-Students-Unable-to-Eat-Lunch" target="_blank" rel="noopener">Go</a></td><td align="center">68.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1701</td><td align="left">Average Waiting Time</td><td align="center"></td><td align="center">61.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1702</td><td align="left">Maximum Binary String After Change</td><td align="center"></td><td align="center">59.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1703</td><td align="left">Minimum Adjacent Swaps for K Consecutive Ones</td><td align="center"></td><td align="center">39.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1704</td><td align="left">Determine if String Halves Are Alike</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1704.Determine-if-String-Halves-Are-Alike" target="_blank" rel="noopener">Go</a></td><td align="center">77.0%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1705</td><td align="left">Maximum Number of Eaten Apples</td><td align="center"></td><td align="center">41.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1706</td><td align="left">Where Will the Ball Fall</td><td align="center"></td><td align="center">60.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1707</td><td align="left">Maximum XOR With an Element From Array</td><td align="center"></td><td align="center">46.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1708</td><td align="left">Largest Subarray Length K</td><td align="center"></td><td align="center">63.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1709</td><td align="left">Biggest Window Between Visits</td><td align="center"></td><td align="center">82.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1710</td><td align="left">Maximum Units on a Truck</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1710.Maximum-Units-on-a-Truck" target="_blank" rel="noopener">Go</a></td><td align="center">70.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1711</td><td align="left">Count Good Meals</td><td align="center"></td><td align="center">26.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1712</td><td align="left">Ways to Split Array Into Three Subarrays</td><td align="center"></td><td align="center">29.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1713</td><td align="left">Minimum Operations to Make a Subsequence</td><td align="center"></td><td align="center">45.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1714</td><td align="left">Sum Of Special Evenly-Spaced Elements In Array</td><td align="center"></td><td align="center">48.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1715</td><td align="left">Count Apples and Oranges</td><td align="center"></td><td align="center">79.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1716</td><td align="left">Calculate Money in Leetcode Bank</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1716.Calculate-Money-in-Leetcode-Bank" target="_blank" rel="noopener">Go</a></td><td align="center">66.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1717</td><td align="left">Maximum Score From Removing Substrings</td><td align="center"></td><td align="center">40.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1718</td><td align="left">Construct the Lexicographically Largest Valid Sequence</td><td align="center"></td><td align="center">46.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1719</td><td align="left">Number Of Ways To Reconstruct A Tree</td><td align="center"></td><td align="center">39.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1720</td><td align="left">Decode XORed Array</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1720.Decode-XORed-Array" target="_blank" rel="noopener">Go</a></td><td align="center">85.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1721</td><td align="left">Swapping Nodes in a Linked List</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1721.Swapping-Nodes-in-a-Linked-List" target="_blank" rel="noopener">Go</a></td><td align="center">68.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1722</td><td align="left">Minimize Hamming Distance After Swap Operations</td><td align="center"></td><td align="center">54.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1723</td><td align="left">Find Minimum Time to Finish All Jobs</td><td align="center"></td><td align="center">43.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1724</td><td align="left">Checking Existence of Edge Length Limited Paths II</td><td align="center"></td><td align="center">56.5%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1725</td><td align="left">Number Of Rectangles That Can Form The Largest Square</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1725.Number-Of-Rectangles-That-Can-Form-The-Largest-Square" target="_blank" rel="noopener">Go</a></td><td align="center">77.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1726</td><td align="left">Tuple with Same Product</td><td align="center"></td><td align="center">56.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1727</td><td align="left">Largest Submatrix With Rearrangements</td><td align="center"></td><td align="center">58.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1728</td><td align="left">Cat and Mouse II</td><td align="center"></td><td align="center">40.9%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1729</td><td align="left">Find Followers Count</td><td align="center"></td><td align="center">71.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1730</td><td align="left">Shortest Path to Get Food</td><td align="center"></td><td align="center">56.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1731</td><td align="left">The Number of Employees Which Report to Each Employee</td><td align="center"></td><td align="center">49.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1732</td><td align="left">Find the Highest Altitude</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1732.Find-the-Highest-Altitude" target="_blank" rel="noopener">Go</a></td><td align="center">80.3%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1733</td><td align="left">Minimum Number of People to Teach</td><td align="center"></td><td align="center">37.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1734</td><td align="left">Decode XORed Permutation</td><td align="center"></td><td align="center">53.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1735</td><td align="left">Count Ways to Make Array With Product</td><td align="center"></td><td align="center">48.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1736</td><td align="left">Latest Time by Replacing Hidden Digits</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1736.Latest-Time-by-Replacing-Hidden-Digits" target="_blank" rel="noopener">Go</a></td><td align="center">41.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1737</td><td align="left">Change Minimum Characters to Satisfy One of Three Conditions</td><td align="center"></td><td align="center">29.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1738</td><td align="left">Find Kth Largest XOR Coordinate Value</td><td align="center"></td><td align="center">62.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1739</td><td align="left">Building Boxes</td><td align="center"></td><td align="center">49.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1740</td><td align="left">Find Distance in a Binary Tree</td><td align="center"></td><td align="center">68.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1741</td><td align="left">Find Total Time Spent by Each Employee</td><td align="center"></td><td align="center">91.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1742</td><td align="left">Maximum Number of Balls in a Box</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1742.Maximum-Number-of-Balls-in-a-Box" target="_blank" rel="noopener">Go</a></td><td align="center">74.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1743</td><td align="left">Restore the Array From Adjacent Pairs</td><td align="center"></td><td align="center">63.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1744</td><td align="left">Can You Eat Your Favorite Candy on Your Favorite Day?</td><td align="center"></td><td align="center">30.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1745</td><td align="left">Palindrome Partitioning IV</td><td align="center"></td><td align="center">49.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1746</td><td align="left">Maximum Subarray Sum After One Operation</td><td align="center"></td><td align="center">61.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1747</td><td align="left">Leetflex Banned Accounts</td><td align="center"></td><td align="center">69.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1748</td><td align="left">Sum of Unique Elements</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1748.Sum-of-Unique-Elements" target="_blank" rel="noopener">Go</a></td><td align="center">75.1%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1749</td><td align="left">Maximum Absolute Sum of Any Subarray</td><td align="center"></td><td align="center">52.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1750</td><td align="left">Minimum Length of String After Deleting Similar Ends</td><td align="center"></td><td align="center">42.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1751</td><td align="left">Maximum Number of Events That Can Be Attended II</td><td align="center"></td><td align="center">47.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1752</td><td align="left">Check if Array Is Sorted and Rotated</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1752.Check-if-Array-Is-Sorted-and-Rotated" target="_blank" rel="noopener">Go</a></td><td align="center">62.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1753</td><td align="left">Maximum Score From Removing Stones</td><td align="center"></td><td align="center">61.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1754</td><td align="left">Largest Merge Of Two Strings</td><td align="center"></td><td align="center">40.3%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1755</td><td align="left">Closest Subsequence Sum</td><td align="center"></td><td align="center">35.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1756</td><td align="left">Design Most Recently Used Queue</td><td align="center"></td><td align="center">78.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1757</td><td align="left">Recyclable and Low Fat Products</td><td align="center"></td><td align="center">96.2%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1758</td><td align="left">Minimum Changes To Make Alternating Binary String</td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/leetcode/1758.Minimum-Changes-To-Make-Alternating-Binary-String" target="_blank" rel="noopener">Go</a></td><td align="center">58.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1759</td><td align="left">Count Number of Homogenous Substrings</td><td align="center"></td><td align="center">42.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1760</td><td align="left">Minimum Limit of Balls in a Bag</td><td align="center"></td><td align="center">52.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1761</td><td align="left">Minimum Degree of a Connected Trio in a Graph</td><td align="center"></td><td align="center">37.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1762</td><td align="left">Buildings With an Ocean View</td><td align="center"></td><td align="center">81.0%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1763</td><td align="left">Longest Nice Substring</td><td align="center"></td><td align="center">61.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1764</td><td align="left">Form Array by Concatenating Subarrays of Another Array</td><td align="center"></td><td align="center">55.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1765</td><td align="left">Map of Highest Peak</td><td align="center"></td><td align="center">54.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1766</td><td align="left">Tree of Coprimes</td><td align="center"></td><td align="center">36.7%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1767</td><td align="left">Find the Subtasks That Did Not Execute</td><td align="center"></td><td align="center">88.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1768</td><td align="left">Merge Strings Alternately</td><td align="center"></td><td align="center">76.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1769</td><td align="left">Minimum Number of Operations to Move All Balls to Each Box</td><td align="center"></td><td align="center">87.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1770</td><td align="left">Maximum Score from Performing Multiplication Operations</td><td align="center"></td><td align="center">29.1%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1771</td><td align="left">Maximize Palindrome Length From Subsequences</td><td align="center"></td><td align="center">34.1%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1772</td><td align="left">Sort Features by Popularity</td><td align="center"></td><td align="center">64.6%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1773</td><td align="left">Count Items Matching a Rule</td><td align="center"></td><td align="center">85.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1774</td><td align="left">Closest Dessert Cost</td><td align="center"></td><td align="center">59.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1775</td><td align="left">Equal Sum Arrays With Minimum Number of Operations</td><td align="center"></td><td align="center">50.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1776</td><td align="left">Car Fleet II</td><td align="center"></td><td align="center">44.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1777</td><td align="left">Product’s Price for Each Store</td><td align="center"></td><td align="center">87.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1778</td><td align="left">Shortest Path in a Hidden Grid</td><td align="center"></td><td align="center">47.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1779</td><td align="left">Find Nearest Point That Has the Same X or Y Coordinate</td><td align="center"></td><td align="center">67.8%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1780</td><td align="left">Check if Number is a Sum of Powers of Three</td><td align="center"></td><td align="center">63.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1781</td><td align="left">Sum of Beauty of All Substrings</td><td align="center"></td><td align="center">57.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1782</td><td align="left">Count Pairs Of Nodes</td><td align="center"></td><td align="center">31.6%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1783</td><td align="left">Grand Slam Titles</td><td align="center"></td><td align="center">91.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1784</td><td align="left">Check if Binary String Has at Most One Segment of Ones</td><td align="center"></td><td align="center">41.6%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1785</td><td align="left">Minimum Elements to Add to Form a Given Sum</td><td align="center"></td><td align="center">38.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1786</td><td align="left">Number of Restricted Paths From First to Last Node</td><td align="center"></td><td align="center">35.9%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1787</td><td align="left">Make the XOR of All Segments Equal to Zero</td><td align="center"></td><td align="center">35.8%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1788</td><td align="left">Maximize the Beauty of the Garden</td><td align="center"></td><td align="center">70.4%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1789</td><td align="left">Primary Department for Each Employee</td><td align="center"></td><td align="center">77.9%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1790</td><td align="left">Check if One String Swap Can Make Strings Equal</td><td align="center"></td><td align="center">64.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1791</td><td align="left">Find Center of Star Graph</td><td align="center"></td><td align="center">85.8%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1792</td><td align="left">Maximum Average Pass Ratio</td><td align="center"></td><td align="center">56.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1793</td><td align="left">Maximum Score of a Good Subarray</td><td align="center"></td><td align="center">45.3%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1794</td><td align="left">Count Pairs of Equal Substrings With Minimum Difference</td><td align="center"></td><td align="center">69.7%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1795</td><td align="left">Rearrange Products Table</td><td align="center"></td><td align="center">92.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1796</td><td align="left">Second Largest Digit in a String</td><td align="center"></td><td align="center">46.7%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1797</td><td align="left">Design Authentication Manager</td><td align="center"></td><td align="center">46.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1798</td><td align="left">Maximum Number of Consecutive Values You Can Make</td><td align="center"></td><td align="center">37.2%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1799</td><td align="left">Maximize Score After N Operations</td><td align="center"></td><td align="center">40.2%</td><td align="center">Hard</td><td align="center"></td></tr><tr><td align="center">1800</td><td align="left">Maximum Ascending Subarray Sum</td><td align="center"></td><td align="center">67.4%</td><td align="center">Easy</td><td align="center"></td></tr><tr><td align="center">1801</td><td align="left">Number of Orders in the Backlog</td><td align="center"></td><td align="center">41.4%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1802</td><td align="left">Maximum Value at a Given Index in a Bounded Array</td><td align="center"></td><td align="center">23.5%</td><td align="center">Medium</td><td align="center"></td></tr><tr><td align="center">1803</td><td align="left">Count Pairs With XOR in a Range</td><td align="center"></td><td align="center">29.8%</td><td align="center">Hard</td><td align="center"></td></tr></tbody></table><hr><h2 id="2、leetcode题目分类"><a href="#2、leetcode题目分类" class="headerlink" title="2、leetcode题目分类"></a>2、leetcode题目分类</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><table><thead><tr><th>No.</th><th>Title</th><th align="center">Solution</th><th align="center">Difficulty</th><th align="center">Time</th><th align="center">Space</th></tr></thead><tbody><tr><td>0001</td><td><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0001.%20Two%20Sum" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0004</td><td>Median of Two Sorted Arrays</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0004.Median-of-Two-Sorted-Arrays/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td></tr><tr><td>0011</td><td><a href="https://leetcode.com/problems/container-with-most-water/" target="_blank" rel="noopener">Container With Most Water</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0011.%20Container%20With%20Most%20Water" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0015</td><td><a href="https://leetcode.com/problems/3sum" target="_blank" rel="noopener">3Sum</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0015.%203Sum" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n)</td></tr><tr><td>0016</td><td><a href="https://leetcode.com/problems/3sum-closest" target="_blank" rel="noopener">3Sum Closest</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0016.%203Sum%20Closest" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(1)</td></tr><tr><td>0018</td><td><a href="https://leetcode.com/problems/4sum" target="_blank" rel="noopener">4Sum</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0018.%204Sum" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^3)</td><td align="center">O(n^2)</td></tr><tr><td>0026</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array" target="_blank" rel="noopener">Remove Duplicates from Sorted Array</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0026.%20Remove%20Duplicates%20from%20Sorted%20Array" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0027</td><td><a href="https://leetcode.com/problems/remove-element" target="_blank" rel="noopener">Remove Element</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0027.%20Remove%20Element" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0031</td><td>Next Permutation</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0031.Next-Permutation/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0033</td><td>Search in Rotated Sorted Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0033.Search-in-Rotated-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0034</td><td><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">Find First and Last Position of Element in Sorted Array</a></td><td align="center"><a href="https://billbliu.github.io/2020/03/25/leetcode-0034-find-first-and-last-position-of-element-in-sorted-array/">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0035</td><td>Search Insert Position</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0035.Search-Insert-Position/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0039</td><td><a href="https://leetcode.com/problems/combination-sum" target="_blank" rel="noopener">Combination Sum</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0039.%20Combination%20Sum" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n log n)</td><td align="center">O(n)</td></tr><tr><td>0040</td><td><a href="https://leetcode.com/problems/combination-sum-ii" target="_blank" rel="noopener">Combination Sum II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0040.%20Combination%20Sum%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n log n)</td><td align="center">O(n)</td></tr><tr><td>0041</td><td><a href="https://leetcode.com/problems/first-missing-positive" target="_blank" rel="noopener">First Missing Positive</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0041.%20First-Missing-Positive" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0042</td><td><a href="https://leetcode.com/problems/trapping-rain-water" target="_blank" rel="noopener">Trapping Rain Water</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0042.%20Trapping%20Rain%20Water" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0045</td><td>Jump Game II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0045.Jump-Game-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0048</td><td><a href="https://leetcode.com/problems/rotate-image" target="_blank" rel="noopener">Rotate Image</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0048.%20Rotate%20Image" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0053</td><td><a href="https://leetcode.com/problems/maximum-subarray" target="_blank" rel="noopener">Maximum Subarray</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0053.%20Maximum%20Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0054</td><td><a href="https://leetcode.com/problems/spiral-matrix" target="_blank" rel="noopener">Spiral Matrix</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0054.%20Spiral%20Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n^2)</td></tr><tr><td>0056</td><td><a href="https://leetcode.com/problems/merge-intervals" target="_blank" rel="noopener">Merge Intervals</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0056.%20Merge%20Intervals" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n log n)</td><td align="center">O(1)</td></tr><tr><td>0057</td><td><a href="https://leetcode.com/problems/insert-interval" target="_blank" rel="noopener">Insert Interval</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0057.%20Insert%20Interval" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0059</td><td><a href="https://leetcode.com/problems/spiral-matrix-ii" target="_blank" rel="noopener">Spiral Matrix II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0059.%20Spiral%20Matrix%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n^2)</td></tr><tr><td>0062</td><td><a href="https://leetcode.com/problems/unique-paths" target="_blank" rel="noopener">Unique Paths</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0062.%20Unique%20Paths" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td></tr><tr><td>0063</td><td><a href="https://leetcode.com/problems/unique-paths-ii" target="_blank" rel="noopener">Unique Paths II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0063.%20Unique%20Paths%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td></tr><tr><td>0064</td><td><a href="https://leetcode.com/problems/minimum-path-sum" target="_blank" rel="noopener">Minimum Path Sum</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0064.%20Minimum%20Path%20Sum" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td></tr><tr><td>0066</td><td>Plus One</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0066.Plus-One/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0073</td><td>Set Matrix Zeroes</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0073.Set-Matrix-Zeroes/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0074</td><td>Search a 2D Matrix</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0074.Search-a-2D-Matrix/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0075</td><td><a href="https://leetcode.com/problems/sort-colors" target="_blank" rel="noopener">Sort Colors</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0075.%20Sort%20Colors" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0078</td><td><a href="https://leetcode.com/problems/subsets" target="_blank" rel="noopener">Subsets</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0078.%20Subsets" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n)</td></tr><tr><td>0079</td><td><a href="https://leetcode.com/problems/word-search" target="_blank" rel="noopener">Word Search</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0079.%20Word%20Search" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td></tr><tr><td>0080</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii" target="_blank" rel="noopener">Remove Duplicates from Sorted Array II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0080.%20Remove%20Duplicates%20from%20Sorted%20Array%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td></tr><tr><td>0081</td><td>Search in Rotated Sorted Array II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0081.Search-in-Rotated-Sorted-Array-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0084</td><td><a href="https://leetcode.com/problems/largest-rectangle-in-histogram" target="_blank" rel="noopener">Largest Rectangle in Histogram</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0084.%20Largest%20Rectangle%20in%20Histogram" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0088</td><td><a href="https://leetcode.com/problems/merge-sorted-array" target="_blank" rel="noopener">Merge Sorted Array</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0088.%20Merge-Sorted-Array" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0090</td><td><a href="https://leetcode.com/problems/subsets-ii" target="_blank" rel="noopener">Subsets II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0090.%20Subsets%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n)</td></tr><tr><td>0105</td><td>Construct Binary Tree from Preorder and Inorder Traversal</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0106</td><td>Construct Binary Tree from Inorder and Postorder Traversal</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0118</td><td>Pascal’s Triangle</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0118.Pascals-Triangle/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0119</td><td>Pascal’s Triangle II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0119.Pascals-Triangle-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0120</td><td><a href="https://leetcode.com/problems/triangle" target="_blank" rel="noopener">Triangle</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0120.%20Triangle" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(n)</td></tr><tr><td>0121</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock" target="_blank" rel="noopener">Best Time to Buy and Sell Stock</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0122</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener">Best Time to Buy and Sell Stock II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0122.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0126</td><td><a href="https://leetcode.com/problems/word-ladder-ii" target="_blank" rel="noopener">Word Ladder II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0126.%20Word%20Ladder%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(n^2)</td></tr><tr><td>0128</td><td>Longest Consecutive Sequence</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td></tr><tr><td>0152</td><td><a href="https://leetcode.com/problems/maximum-product-subarray" target="_blank" rel="noopener">Maximum Product Subarray</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0152.%20Maximum%20Product%20Subarray" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0153</td><td>Find Minimum in Rotated Sorted Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0153.Find-Minimum-in-Rotated-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0154</td><td>Find Minimum in Rotated Sorted Array II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0154.Find-Minimum-in-Rotated-Sorted-Array-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td></tr><tr><td>0162</td><td>Find Peak Element</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0162.Find-Peak-Element/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0167</td><td><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted" target="_blank" rel="noopener">Two Sum II - Input array is sorted</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0167.%20Two%20Sum%20II%20-%20Input%20array%20is%20sorted" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0169</td><td>Majority Element</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0169.Majority-Element/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0189</td><td>Rotate Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0189.Rotate-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0209</td><td><a href="https://leetcode.com/problems/minimum-size-subarray-sum" target="_blank" rel="noopener">Minimum Size Subarray Sum</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0209.%20Minimum%20Size%20Subarray%20Sum" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0216</td><td><a href="https://leetcode.com/problems/combination-sum-iii" target="_blank" rel="noopener">Combination Sum III</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0216.%20Combination%20Sum%20III" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0217</td><td><a href="https://leetcode.com/problems/contains-duplicate" target="_blank" rel="noopener">Contains Duplicate</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0217.%20Contains%20Duplicate" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0219</td><td><a href="https://leetcode.com/problems/contains-duplicate-ii" target="_blank" rel="noopener">Contains Duplicate II</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0219.%20Contains%20Duplicate%20II" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0228</td><td>Summary Ranges</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0228.Summary-Ranges/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0229</td><td>Majority Element II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0229.Majority-Element-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0268</td><td><a href="https://leetcode.com/problems/missing-number/" target="_blank" rel="noopener">Missing Number</a></td><td align="center"><a href="https://billbliu.github.io/2020/03/25/leetcode-0268-missing-number/">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0283</td><td><a href="https://leetcode.com/problems/move-zeroes" target="_blank" rel="noopener">Move Zeroes</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0283.%20Move%20Zeroes" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0287</td><td><a href="https://leetcode.com/problems/find-the-duplicate-number" target="_blank" rel="noopener">Find the Duplicate Number</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0287.%20Find%20the%20Duplicate%20Number" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0414</td><td>Third Maximum Number</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0414.Third-Maximum-Number/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0448</td><td>Find All Numbers Disappeared in an Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0448.Find-All-Numbers-Disappeared-in-an-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0457</td><td>Circular Array Loop</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0457.Circular-Array-Loop/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0485</td><td>Max Consecutive Ones</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0485.Max-Consecutive-Ones/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0509</td><td>Fibonacci Number</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0509.Fibonacci-Number/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0532</td><td><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array" target="_blank" rel="noopener">K-diff Pairs in an Array</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0532.%20K-diff%20Pairs%20in%20an%20Array" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td>0561</td><td>Array Partition I</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0561.Array-Partition-I/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0566</td><td><a href="https://leetcode.com/problems/reshape-the-matrix" target="_blank" rel="noopener">Reshape the Matrix</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0566.%20Reshape%20the%20Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td></tr><tr><td>0581</td><td>Shortest Unsorted Continuous Subarray</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0581.Shortest-Unsorted-Continuous-Subarray/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0605</td><td>Can Place Flowers</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0605.Can-Place-Flowers/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0628</td><td><a href="https://leetcode.com/problems/maximum-product-of-three-numbers" target="_blank" rel="noopener">Maximum Product of Three Numbers</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0628.%20Maximum%20Product%20of%20Three%20Numbers" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0643</td><td>Maximum Average Subarray I</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0643.Maximum-Average-Subarray-I/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0661</td><td>Image Smoother</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0661.Image-Smoother/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0665</td><td>Non-decreasing Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0665.Non-decreasing-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0674</td><td>Longest Continuous Increasing Subsequence</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0674.Longest-Continuous-Increasing-Subsequence/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0695</td><td>Max Area of Island</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0695.Max-Area-of-Island/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0697</td><td>Degree of an Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0697.Degree-of-an-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0713</td><td><a href="https://leetcode.com/problems/subarray-product-less-than-k" target="_blank" rel="noopener">Subarray Product Less Than K</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0713.%20Subarray%20Product%20Less%20Than%20K" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0714</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee" target="_blank" rel="noopener">Best Time to Buy and Sell Stock with Transaction Fee</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0714.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Transaction%20Fee" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0717</td><td>1-bit and 2-bit Characters</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0717.1-bit-and-2-bit-Characters/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0718</td><td>Maximum Length of Repeated Subarray</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0718.Maximum-Length-of-Repeated-Subarray/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0719</td><td>Find K-th Smallest Pair Distance</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0719.Find-K-th-Smallest-Pair-Distance/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td></tr><tr><td>0724</td><td>Find Pivot Index</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0724.Find-Pivot-Index/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0729</td><td>My Calendar I</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0729.My-Calendar-I/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0746</td><td><a href="https://leetcode.com/problems/min-cost-climbing-stairs" target="_blank" rel="noopener">Min Cost Climbing Stairs</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0746.%20Min%20Cost%20Climbing%20Stairs" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0766</td><td><a href="https://leetcode.com/problems/toeplitz-matrix" target="_blank" rel="noopener">Toeplitz Matrix</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0766.%20Toeplitz%20Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0830</td><td>Positions of Large Groups</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0830.Positions-of-Large-Groups/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0832</td><td>Flipping an Image</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0832.Flipping-an-Image/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0867</td><td><a href="https://leetcode.com/problems/transpose-matrix" target="_blank" rel="noopener">Transpose Matrix</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0867.%20Transpose%20Matrix" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0888</td><td>Fair Candy Swap</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0888.Fair-Candy-Swap/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0891</td><td><a href="https://leetcode.com/problems/sum-of-subsequence-widths" target="_blank" rel="noopener">Sum of Subsequence Widths</a></td><td align="center"><a href>Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0896</td><td>Monotonic Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0896.Monotonic-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0907</td><td><a href="https://leetcode.com/problems/sum-of-subarray-minimums" target="_blank" rel="noopener">Sum of Subarray Minimums</a></td><td align="center"><a href>Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0914</td><td>X of a Kind in a Deck of Cards</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0914.X-of-a-Kind-in-a-Deck-of-Cards/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0918</td><td>Maximum Sum Circular Subarray</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0918.Maximum-Sum-Circular-Subarray/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0922</td><td><a href="https://leetcode.com/problems/sum-of-subarray-minimums" target="_blank" rel="noopener">Sort Array By Parity II</a></td><td align="center"><a href>Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0969</td><td><a href="https://leetcode.com/problems/pancake-sorting" target="_blank" rel="noopener">Pancake Sorting</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0969.%20Pancake%20Sorting" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0977</td><td><a href="https://leetcode.com/problems/squares-of-a-sorted-array" target="_blank" rel="noopener">Squares of a Sorted Array</a></td><td align="center"><a href="https://github.com/halfrost/LeetCode-Go/tree/master/Algorithms/0977.%20Squares%20of%20a%20Sorted%20Array" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td>0978</td><td>Longest Turbulent Subarray</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0978.Longest-Turbulent-Subarray/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>0985</td><td>Sum of Even Numbers After Queries</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0985.Sum-of-Even-Numbers-After-Queries/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0989</td><td>Add to Array-Form of Integer</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0989.Add-to-Array-Form-of-Integer/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>0999</td><td>Available Captures for Rook</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0999.Available-Captures-for-Rook/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1002</td><td>Find Common Characters</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1002.Find-Common-Characters/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1011</td><td>Capacity To Ship Packages Within D Days</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1011.Capacity-To-Ship-Packages-Within-D-Days/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1018</td><td>Binary Prefix Divisible By 5</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1018.Binary-Prefix-Divisible-By-5/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1040</td><td>Moving Stones Until Consecutive II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1040.Moving-Stones-Until-Consecutive-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1051</td><td>Height Checker</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1051.Height-Checker/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1052</td><td>Grumpy Bookstore Owner</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1052.Grumpy-Bookstore-Owner/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1074</td><td>Number of Submatrices That Sum to Target</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1074.Number-of-Submatrices-That-Sum-to-Target/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td></tr><tr><td>1089</td><td>Duplicate Zeros</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1089.Duplicate-Zeros/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1122</td><td>Relative Sort Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1122.Relative-Sort-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1128</td><td>Number of Equivalent Domino Pairs</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1128.Number-of-Equivalent-Domino-Pairs/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1157</td><td>Online Majority Element In Subarray</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1157.Online-Majority-Element-In-Subarray/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td></tr><tr><td>1160</td><td>Find Words That Can Be Formed by Characters</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1160.Find-Words-That-Can-Be-Formed-by-Characters/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1170</td><td>Compare Strings by Frequency of the Smallest Character</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1170.Compare-Strings-by-Frequency-of-the-Smallest-Character/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1184</td><td>Distance Between Bus Stops</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1184.Distance-Between-Bus-Stops/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1185</td><td>Day of the Week</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1185.Day-of-the-Week/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1200</td><td>Minimum Absolute Difference</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1200.Minimum-Absolute-Difference/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1202</td><td>Smallest String With Swaps</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1202.Smallest-String-With-Swaps/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1208</td><td>Get Equal Substrings Within Budget</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1208.Get-Equal-Substrings-Within-Budget/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1217</td><td>Minimum Cost to Move Chips to The Same Position</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1217.Minimum-Cost-to-Move-Chips-to-The-Same-Position/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1232</td><td>Check If It Is a Straight Line</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1232.Check-If-It-Is-a-Straight-Line/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1252</td><td>Cells with Odd Values in a Matrix</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1252.Cells-with-Odd-Values-in-a-Matrix/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1260</td><td>Shift 2D Grid</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1260.Shift-2D-Grid/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1266</td><td>Minimum Time Visiting All Points</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1266.Minimum-Time-Visiting-All-Points/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1275</td><td>Find Winner on a Tic Tac Toe Game</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1275.Find-Winner-on-a-Tic-Tac-Toe-Game/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1287</td><td>Element Appearing More Than 25% In Sorted Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1287.Element-Appearing-More-Than-25-In-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1295</td><td>Find Numbers with Even Number of Digits</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1295.Find-Numbers-with-Even-Number-of-Digits/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1299</td><td>Replace Elements with Greatest Element on Right Side</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1299.Replace-Elements-with-Greatest-Element-on-Right-Side/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1300</td><td>Sum of Mutated Array Closest to Target</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1300.Sum-of-Mutated-Array-Closest-to-Target/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1304</td><td>Find N Unique Integers Sum up to Zero</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1304.Find-N-Unique-Integers-Sum-up-to-Zero/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1313</td><td>Decompress Run-Length Encoded List</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1313.Decompress-Run-Length-Encoded-List/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1329</td><td>Sort the Matrix Diagonally</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1329.Sort-the-Matrix-Diagonally/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1337</td><td>The K Weakest Rows in a Matrix</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1337.The-K-Weakest-Rows-in-a-Matrix/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1380</td><td>Lucky Numbers in a Matrix</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1380.Lucky-Numbers-in-a-Matrix/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1385</td><td>Find the Distance Value Between Two Arrays</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1385.Find-the-Distance-Value-Between-Two-Arrays/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1389</td><td>Create Target Array in the Given Order</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1389.Create-Target-Array-in-the-Given-Order/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1423</td><td>Maximum Points You Can Obtain from Cards</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1423.Maximum-Points-You-Can-Obtain-from-Cards/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1437</td><td>Check If All 1’s Are at Least Length K Places Away</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1437.Check-If-All-1s-Are-at-Least-Length-K-Places-Away/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1438</td><td>Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1438.Longest-Continuous-Subarray-With-Absolute-Diff-Less-Than-or-Equal-to-Limit/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1464</td><td>Maximum Product of Two Elements in an Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1464.Maximum-Product-of-Two-Elements-in-an-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1470</td><td>Shuffle the Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1470.Shuffle-the-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1480</td><td>Running Sum of 1d Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1480.Running-Sum-of-1d-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1512</td><td>Number of Good Pairs</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1512.Number-of-Good-Pairs/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1539</td><td>Kth Missing Positive Number</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1539.Kth-Missing-Positive-Number/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1608</td><td>Special Array With X Elements Greater Than or Equal X</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1608.Special-Array-With-X-Elements-Greater-Than-or-Equal-X/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1619</td><td>Mean of Array After Removing Some Elements</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1619.Mean-of-Array-After-Removing-Some-Elements/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1629</td><td>Slowest Key</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1629.Slowest-Key/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1636</td><td>Sort Array by Increasing Frequency</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1636.Sort-Array-by-Increasing-Frequency/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1640</td><td>Check Array Formation Through Concatenation</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1640.Check-Array-Formation-Through-Concatenation/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1646</td><td>Get Maximum in Generated Array</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1646.Get-Maximum-in-Generated-Array/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1652</td><td>Defuse the Bomb</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1652.Defuse-the-Bomb/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1656</td><td>Design an Ordered Stream</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1656.Design-an-Ordered-Stream/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1672</td><td>Richest Customer Wealth</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1672.Richest-Customer-Wealth/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1700</td><td>Number of Students Unable to Eat Lunch</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1700.Number-of-Students-Unable-to-Eat-Lunch/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1711</td><td><a href="https://leetcode.com/problems/count-good-meals" target="_blank" rel="noopener">Count Good Meals</a></td><td align="center"></td><td align="center">Medium</td><td align="center"></td><td align="center"></td></tr><tr><td>1732</td><td>Find the Highest Altitude</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1732.Find-the-Highest-Altitude/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1738</td><td><a href="https://leetcode.com/problems/find-kth-largest-xor-coordinate-value" target="_blank" rel="noopener">Find Kth Largest XOR Coordinat</a></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>1742</td><td>Maximum Number of Balls in a Box</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1742.Maximum-Number-of-Balls-in-a-Box/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1748</td><td>Sum of Unique Elements</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1748.Sum-of-Unique-Elements/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1752</td><td>Check if Array Is Sorted and Rotated</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1752.Check-if-Array-Is-Sorted-and-Rotated/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td>1758</td><td>Minimum Changes To Make Alternating Binary String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1758.Minimum-Changes-To-Make-Alternating-Binary-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><table><thead><tr><th>No.</th><th align="center">Title</th><th align="center">Solution</th><th align="center">Difficulty</th><th align="center">Time</th><th align="center">Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0003</td><td align="center">Longest Substring Without Repeating Characters</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0003.Longest-Substring-Without-Repeating-Characters/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td><td>31.5%</td></tr><tr><td>0005</td><td align="center">Longest Palindromic Substring</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0005.Longest-Palindromic-Substring/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>30.6%</td></tr><tr><td>0006</td><td align="center">ZigZag Conversion</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0006.ZigZag-Conversion/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>38.1%</td></tr><tr><td>0008</td><td align="center">String to Integer (atoi)</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0008.String-to-Integer-atoi/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>15.7%</td></tr><tr><td>0012</td><td align="center">Integer to Roman</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0012.Integer-to-Roman/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>57.0%</td></tr><tr><td>0013</td><td align="center">Roman to Integer</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0013.Roman-to-Integer/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>56.9%</td></tr><tr><td>0017</td><td align="center">Letter Combinations of a Phone Number</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0017.Letter-Combinations-of-a-Phone-Number/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(log n)</td><td align="center">O(1)</td><td>49.4%</td></tr><tr><td>0020</td><td align="center">Valid Parentheses</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0020.Valid-Parentheses/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(log n)</td><td align="center">O(1)</td><td>39.9%</td></tr><tr><td>0022</td><td align="center">Generate Parentheses</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0022.Generate-Parentheses/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(log n)</td><td align="center">O(1)</td><td>65.6%</td></tr><tr><td>0028</td><td align="center">Implement strStr()</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0028.Implement-strStr/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td><td>35.3%</td></tr><tr><td>0030</td><td align="center">Substring with Concatenation of All Words</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0030.Substring-with-Concatenation-of-All-Words/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(n)</td><td>26.3%</td></tr><tr><td>0043</td><td align="center">Multiply Strings</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0043.Multiply-Strings/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>35.0%</td></tr><tr><td>0049</td><td align="center">Group Anagrams</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0049.Group-Anagrams/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n log n)</td><td align="center">O(n)</td><td>59.5%</td></tr><tr><td>0067</td><td align="center">Add Binary</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0067.Add-Binary/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>47.1%</td></tr><tr><td>0071</td><td align="center">Simplify Path</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0071.Simplify-Path/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n)</td><td>34.8%</td></tr><tr><td>0076</td><td align="center">Minimum Window Substring</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0076.Minimum-Window-Substring/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(n)</td><td>36.1%</td></tr><tr><td>0091</td><td align="center">Decode Ways</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0091.Decode-Ways/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n)</td><td>26.8%</td></tr><tr><td>0093</td><td align="center">Restore IP Addresses</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0093.Restore-IP-Addresses/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n)</td><td>37.7%</td></tr><tr><td>0115</td><td align="center">Distinct Subsequences</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td><td>39.9%</td></tr><tr><td>0125</td><td align="center">Valid Palindrome</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td><td>38.4%</td></tr><tr><td>0126</td><td align="center">Word Ladder II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center">O(n)</td><td align="center">O(n^2)</td><td>23.9%</td></tr><tr><td>0151</td><td align="center">Reverse Words in a String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0151.Reverse-Words-in-a-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>24.0%</td></tr><tr><td>0227</td><td align="center">Basic Calculator II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0227.Basic-Calculator-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>38.7%</td></tr><tr><td>0344</td><td align="center">Reverse String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0344.Reverse-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td><td>70.5%</td></tr><tr><td>0345</td><td align="center">Reverse Vowels of a String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0345.Reverse-Vowels-of-a-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td><td>45.1%</td></tr><tr><td>0385</td><td align="center">Mini Parser</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0385.Mini-Parser/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>34.5%</td></tr><tr><td>0387</td><td align="center">First Unique Character in a String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0387.First-Unique-Character-in-a-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>53.8%</td></tr><tr><td>0537</td><td align="center">Complex Number Multiplication</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0537.Complex-Number-Multiplication/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>68.3%</td></tr><tr><td>0541</td><td align="center">Reverse String II</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0541.Reverse-String-II/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>49.3%</td></tr><tr><td>0557</td><td align="center">Reverse Words in a String III</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0557.Reverse-Words-in-a-String-III/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>72.2%</td></tr><tr><td>0632</td><td align="center">Smallest Range Covering Elements from K Lists</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0632.Smallest-Range-Covering-Elements-from-K-Lists/" target="_blank" rel="noopener">Go</a></td><td align="center">Hard</td><td align="center"></td><td align="center"></td><td>54.4%</td></tr><tr><td>0767</td><td align="center">Reorganize String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0767.Reorganize-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n log n)</td><td align="center">O(log n)</td><td>50.2%</td></tr><tr><td>0819</td><td align="center">Most Common Word</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0819.Most-Common-Word/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>45.5%</td></tr><tr><td>0842</td><td align="center">Split Array into Fibonacci Sequence</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0842.Split-Array-into-Fibonacci-Sequence/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td>37.0%</td></tr><tr><td>0856</td><td align="center">Score of Parentheses</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0856.Score-of-Parentheses/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(n)</td><td>64.9%</td></tr><tr><td>0925</td><td align="center">Long Pressed Name</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0925.Long-Pressed-Name/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center">O(n)</td><td align="center">O(1)</td><td>37.7%</td></tr><tr><td>0966</td><td align="center">Vowel Spellchecker</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0966.Vowel-Spellchecker/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>50.3%</td></tr><tr><td>1003</td><td align="center">Check If Word Is Valid After Substitutions</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1003.Check-If-Word-Is-Valid-After-Substitutions/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center">O(n)</td><td align="center">O(1)</td><td>56.5%</td></tr><tr><td>1108</td><td align="center">Defanging an IP Address</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1108.Defanging-an-IP-Address/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>88.4%</td></tr><tr><td>1170</td><td align="center">Compare Strings by Frequency of the Smallest Character</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1170.Compare-Strings-by-Frequency-of-the-Smallest-Character/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>60.1%</td></tr><tr><td>1189</td><td align="center">Maximum Number of Balloons</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1189.Maximum-Number-of-Balloons/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>62.1%</td></tr><tr><td>1221</td><td align="center">Split a String in Balanced Strings</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1221.Split-a-String-in-Balanced-Strings/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>84.3%</td></tr><tr><td>1234</td><td align="center">Replace the Substring for Balanced String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1234.Replace-the-Substring-for-Balanced-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>34.5%</td></tr><tr><td>1249</td><td align="center">Minimum Remove to Make Valid Parentheses</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1249.Minimum-Remove-to-Make-Valid-Parentheses/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>64.2%</td></tr><tr><td>1332</td><td align="center">Remove Palindromic Subsequences</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1332.Remove-Palindromic-Subsequences/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>68.1%</td></tr><tr><td>1455</td><td align="center">Check If a Word Occurs As a Prefix of Any Word in a Sentence</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1455.Check-If-a-Word-Occurs-As-a-Prefix-of-Any-Word-in-a-Sentence/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>65.2%</td></tr><tr><td>1461</td><td align="center">Check If a String Contains All Binary Codes of Size K</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1461.Check-If-a-String-Contains-All-Binary-Codes-of-Size-K/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>54.3%</td></tr><tr><td>1573</td><td align="center">Number of Ways to Split a String</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1573.Number-of-Ways-to-Split-a-String/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>31.3%</td></tr><tr><td>1614</td><td align="center">Maximum Nesting Depth of the Parentheses</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1614.Maximum-Nesting-Depth-of-the-Parentheses/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>82.8%</td></tr><tr><td>1624</td><td align="center">Largest Substring Between Two Equal Characters</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1624.Largest-Substring-Between-Two-Equal-Characters/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>58.7%</td></tr><tr><td>1653</td><td align="center">Minimum Deletions to Make String Balanced</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1653.Minimum-Deletions-to-Make-String-Balanced/" target="_blank" rel="noopener">Go</a></td><td align="center">Medium</td><td align="center"></td><td align="center"></td><td>51.4%</td></tr><tr><td>1662</td><td align="center">Check If Two String Arrays are Equivalent</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1662.Check-If-Two-String-Arrays-are-Equivalent/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>82.7%</td></tr><tr><td>1668</td><td align="center">Maximum Repeating Substring</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1668.Maximum-Repeating-Substring/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>38.7%</td></tr><tr><td>1678</td><td align="center">Goal Parser Interpretation</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1678.Goal-Parser-Interpretation/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>85.3%</td></tr><tr><td>1684</td><td align="center">Count the Number of Consistent Strings</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1684.Count-the-Number-of-Consistent-Strings/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>82.1%</td></tr><tr><td>1694</td><td align="center">Reformat Phone Number</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1694.Reformat-Phone-Number/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>65.6%</td></tr><tr><td>1704</td><td align="center">Determine if String Halves Are Alike</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1704.Determine-if-String-Halves-Are-Alike/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>77.0%</td></tr><tr><td>1736</td><td align="center">Latest Time by Replacing Hidden Digits</td><td align="center"><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1736.Latest-Time-by-Replacing-Hidden-Digits/" target="_blank" rel="noopener">Go</a></td><td align="center">Easy</td><td align="center"></td><td align="center"></td><td>41.2%</td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><h3 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two_Pointers"></a>Two_Pointers</h3><ul><li>双指针滑动窗口的经典写法。右指针不断往右移，移动到不能往右移动为止(具体条件根据题目而定)。当右指针到最右边以后，开始挪动左指针，释放窗口左边界。第 3 题，第 76 题，第 209 题，第 424 题，第 438 题，第 567 题，第 713 题，第 763 题，第 845 题，第 881 题，第 904 题，第 978 题，第 992 题，第 1004 题，第 1040 题，第 1052 题。</li></ul><pre class="line-numbers language-c"><code class="language-c">    left<span class="token punctuation">,</span> right <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> left <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> right<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> freq<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            freq<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span>            right<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            freq<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span>            left<span class="token operator">++</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>快慢指针可以查找重复数字，时间复杂度 O(n)，第 287 题。</li><li>替换字母以后，相同字母能出现连续最长的长度。第 424 题。</li><li>SUM 问题集。第 1 题，第 15 题，第 16 题，第 18 题，第 167 题，第 923 题，第 1074 题。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Favorite</th><th>Acceptance</th></tr></thead><tbody><tr><td>0003</td><td>Longest Substring Without Repeating Characters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0003.Longest-Substring-Without-Repeating-Characters/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>31.5%</td></tr><tr><td>0011</td><td>Container With Most Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0011.Container-With-Most-Water/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>52.8%</td></tr><tr><td>0015</td><td>3Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0015.3Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>❤️</td><td>28.2%</td></tr><tr><td>0016</td><td>3Sum Closest</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0016.3Sum-Closest/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>❤️</td><td>46.3%</td></tr><tr><td>0018</td><td>4Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0018.4Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^3)</td><td>O(n^2)</td><td>❤️</td><td>35.0%</td></tr><tr><td>0019</td><td>Remove Nth Node From End of List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0019.Remove-Nth-Node-From-End-of-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>35.8%</td></tr><tr><td>0026</td><td>Remove Duplicates from Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0026.Remove-Duplicates-from-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>46.7%</td></tr><tr><td>0027</td><td>Remove Element</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0027.Remove-Element/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>49.4%</td></tr><tr><td>0028</td><td>Implement strStr()</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0028.Implement-strStr/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>35.3%</td></tr><tr><td>0030</td><td>Substring with Concatenation of All Words</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0030.Substring-with-Concatenation-of-All-Words/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>❤️</td><td>26.3%</td></tr><tr><td>0042</td><td>Trapping Rain Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0042.Trapping-Rain-Water/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>51.4%</td></tr><tr><td>0061</td><td>Rotate List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0061.Rotate-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>31.9%</td></tr><tr><td>0075</td><td>Sort Colors</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0075.Sort-Colors/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>49.6%</td></tr><tr><td>0076</td><td>Minimum Window Substring</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0076.Minimum-Window-Substring/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>❤️</td><td>36.1%</td></tr><tr><td>0080</td><td>Remove Duplicates from Sorted Array II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0080.Remove-Duplicates-from-Sorted-Array-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1</td><td></td><td>46.2%</td></tr><tr><td>0086</td><td>Partition List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0086.Partition-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>43.6%</td></tr><tr><td>0088</td><td>Merge Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0088.Merge-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>40.8%</td></tr><tr><td>0125</td><td>Valid Palindrome</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>38.4%</td></tr><tr><td>0141</td><td>Linked List Cycle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>43.0%</td></tr><tr><td>0142</td><td>Linked List Cycle II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>39.9%</td></tr><tr><td>0167</td><td>Two Sum II - Input array is sorted</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0167.Two-Sum-II-Input-array-is-sorted/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>55.7%</td></tr><tr><td>0209</td><td>Minimum Size Subarray Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0209.Minimum-Size-Subarray-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>39.6%</td></tr><tr><td>0234</td><td>Palindrome Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0234.Palindrome-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>40.8%</td></tr><tr><td>0283</td><td>Move Zeroes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0283.Move-Zeroes/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>58.6%</td></tr><tr><td>0287</td><td>Find the Duplicate Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0287.Find-the-Duplicate-Number/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>57.7%</td></tr><tr><td>0344</td><td>Reverse String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0344.Reverse-String/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>70.5%</td></tr><tr><td>0345</td><td>Reverse Vowels of a String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0345.Reverse-Vowels-of-a-String/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>45.1%</td></tr><tr><td>0349</td><td>Intersection of Two Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0349.Intersection-of-Two-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td></td><td>65.0%</td></tr><tr><td>0350</td><td>Intersection of Two Arrays II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0350.Intersection-of-Two-Arrays-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td></td><td>52.0%</td></tr><tr><td>0424</td><td>Longest Repeating Character Replacement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0424.Longest-Repeating-Character-Replacement/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>48.3%</td></tr><tr><td>0457</td><td>Circular Array Loop</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0457.Circular-Array-Loop/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td></td><td>30.3%</td></tr><tr><td>0524</td><td>Longest Word in Dictionary through Deleting</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0524.Longest-Word-in-Dictionary-through-Deleting/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>50.1%</td></tr><tr><td>0532</td><td>K-diff Pairs in an Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0532.K-diff-Pairs-in-an-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td></td><td>35.4%</td></tr><tr><td>0567</td><td>Permutation in String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0567.Permutation-in-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>44.6%</td></tr><tr><td>0632</td><td>Smallest Range Covering Elements from K Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0632.Smallest-Range-Covering-Elements-from-K-Lists/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td></td><td>54.4%</td></tr><tr><td>0713</td><td>Subarray Product Less Than K</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0713.Subarray-Product-Less-Than-K/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>40.5%</td></tr><tr><td>0763</td><td>Partition Labels</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0763.Partition-Labels/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>78.1%</td></tr><tr><td>0826</td><td>Most Profit Assigning Work</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0826.Most-Profit-Assigning-Work/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td></td><td>39.2%</td></tr><tr><td>0828</td><td>Count Unique Characters of All Substrings of a Given String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0828.Count-Unique-Characters-of-All-Substrings-of-a-Given-String/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>❤️</td><td>46.8%</td></tr><tr><td>0838</td><td>Push Dominoes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0838.Push-Dominoes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td></td><td>49.9%</td></tr><tr><td>0844</td><td>Backspace String Compare</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0844.Backspace-String-Compare/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td></td><td>47.1%</td></tr><tr><td>0845</td><td>Longest Mountain in Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0845.Longest-Mountain-in-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>38.6%</td></tr><tr><td>0881</td><td>Boats to Save People</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0881.Boats-to-Save-People/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(1)</td><td></td><td>49.0%</td></tr><tr><td>0904</td><td>Fruit Into Baskets</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0904.Fruit-Into-Baskets/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(1)</td><td></td><td>43.0%</td></tr><tr><td>0923</td><td>3Sum With Multiplicity</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0923.3Sum-With-Multiplicity/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td></td><td>36.3%</td></tr><tr><td>0925</td><td>Long Pressed Name</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0925.Long-Pressed-Name/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>37.7%</td></tr><tr><td>0930</td><td>Binary Subarrays With Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0930.Binary-Subarrays-With-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>❤️</td><td>44.7%</td></tr><tr><td>0977</td><td>Squares of a Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0977.Squares-of-a-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td></td><td>71.9%</td></tr><tr><td>0986</td><td>Interval List Intersections</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0986.Interval-List-Intersections/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>68.4%</td></tr><tr><td>0992</td><td>Subarrays with K Different Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0992.Subarrays-with-K-Different-Integers/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>❤️</td><td>50.8%</td></tr><tr><td>1004</td><td>Max Consecutive Ones III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1004.Max-Consecutive-Ones-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>60.9%</td></tr><tr><td>1093</td><td>Statistics from a Large Sample</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1093.Statistics-from-a-Large-Sample/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td></td><td>49.1%</td></tr><tr><td>1234</td><td>Replace the Substring for Balanced String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1234.Replace-the-Substring-for-Balanced-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td></td><td>34.5%</td></tr><tr><td>1658</td><td>Minimum Operations to Reduce X to Zero</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1658.Minimum-Operations-to-Reduce-X-to-Zero/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td></td><td>33.3%</td></tr><tr><td>1695</td><td>Maximum Erasure Value</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1695.Maximum-Erasure-Value/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td></td><td>49.5%</td></tr></tbody></table><h3 id="Linked-List-已全部做完"><a href="#Linked-List-已全部做完" class="headerlink" title="Linked List (已全部做完)"></a>Linked List (已全部做完)</h3><ul><li>巧妙的构造虚拟头结点。可以使遍历处理逻辑更加统一。</li><li>灵活使用递归。构造递归条件，使用递归可以巧妙的解题。不过需要注意有些题目不能使用递归，因为递归深度太深会导致超时和栈溢出。</li><li>链表区间逆序。第 92 题。</li><li>链表寻找中间节点。第 876 题。链表寻找倒数第 n 个节点。第 19 题。只需要一次遍历就可以得到答案。</li><li>合并 K 个有序链表。第 21 题，第 23 题。</li><li>链表归类。第 86 题，第 328 题。</li><li>链表排序，时间复杂度要求 O(n * log n)，空间复杂度 O(1)。只有一种做法，归并排序，至顶向下归并。第 148 题。</li><li>判断链表是否存在环，如果有环，输出环的交叉点的下标；判断 2 个链表是否有交叉点，如果有交叉点，输出交叉点。第 141 题，第 142 题，第 160 题。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0002</td><td>Add Two Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0002.Add-Two-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>35.6%</td></tr><tr><td>0019</td><td>Remove Nth Node From End of List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0019.Remove-Nth-Node-From-End-of-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>35.8%</td></tr><tr><td>0021</td><td>Merge Two Sorted Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0021.Merge-Two-Sorted-Lists/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>56.2%</td></tr><tr><td>0023</td><td>Merge k Sorted Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0023.Merge-k-Sorted-Lists/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(log n)</td><td>O(1)</td><td>42.9%</td></tr><tr><td>0024</td><td>Swap Nodes in Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0024.Swap-Nodes-in-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>53.3%</td></tr><tr><td>0025</td><td>Reverse Nodes in k-Group</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0025.Reverse-Nodes-in-k-Group/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(log n)</td><td>O(1)</td><td>45.1%</td></tr><tr><td>0061</td><td>Rotate List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0061.Rotate-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>31.9%</td></tr><tr><td>0082</td><td>Remove Duplicates from Sorted List II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0082.Remove-Duplicates-from-Sorted-List-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>39.4%</td></tr><tr><td>0083</td><td>Remove Duplicates from Sorted List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0083.Remove-Duplicates-from-Sorted-List/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>46.6%</td></tr><tr><td>0086</td><td>Partition List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0086.Partition-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>43.6%</td></tr><tr><td>0092</td><td>Reverse Linked List II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0092.Reverse-Linked-List-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>40.7%</td></tr><tr><td>0109</td><td>Convert Sorted List to Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(log n)</td><td>O(n)</td><td>50.4%</td></tr><tr><td>0138</td><td>Copy List with Random Pointer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>41.2%</td></tr><tr><td>0141</td><td>Linked List Cycle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>43.0%</td></tr><tr><td>0142</td><td>Linked List Cycle II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>39.9%</td></tr><tr><td>0143</td><td>Reorder List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0143.Reorder-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>40.8%</td></tr><tr><td>0147</td><td>Insertion Sort List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>44.5%</td></tr><tr><td>0148</td><td>Sort List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0148.Sort-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>46.5%</td></tr><tr><td>0160</td><td>Intersection of Two Linked Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0160.Intersection-of-Two-Linked-Lists/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>44.3%</td></tr><tr><td>0203</td><td>Remove Linked List Elements</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0203.Remove-Linked-List-Elements/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>39.3%</td></tr><tr><td>0206</td><td>Reverse Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0206.Reverse-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>65.5%</td></tr><tr><td>0234</td><td>Palindrome Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0234.Palindrome-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>40.8%</td></tr><tr><td>0237</td><td>Delete Node in a Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0237.Delete-Node-in-a-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>67.2%</td></tr><tr><td>0328</td><td>Odd Even Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0328.Odd-Even-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.2%</td></tr><tr><td>0445</td><td>Add Two Numbers II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0445.Add-Two-Numbers-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>56.4%</td></tr><tr><td>0707</td><td>Design Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0707.Design-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>26.0%</td></tr><tr><td>0725</td><td>Split Linked List in Parts</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0725.Split-Linked-List-in-Parts/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>53.1%</td></tr><tr><td>0817</td><td>Linked List Components</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0817.Linked-List-Components/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.8%</td></tr><tr><td>0876</td><td>Middle of the Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0876.Middle-of-the-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>69.2%</td></tr><tr><td>1019</td><td>Next Greater Node In Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1019.Next-Greater-Node-In-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>58.3%</td></tr><tr><td>1171</td><td>Remove Zero Sum Consecutive Nodes from Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1171.Remove-Zero-Sum-Consecutive-Nodes-from-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>41.5%</td></tr><tr><td>1290</td><td>Convert Binary Number in a Linked List to Integer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1290.Convert-Binary-Number-in-a-Linked-List-to-Integer/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>81.8%</td></tr><tr><td>1669</td><td>Merge In Between Linked Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1669.Merge-In-Between-Linked-Lists/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>75.9%</td></tr><tr><td>1670</td><td>Design Front Middle Back Queue</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1670.Design-Front-Middle-Back-Queue/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>54.2%</td></tr><tr><td>1721</td><td>Swapping Nodes in a Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1721.Swapping-Nodes-in-a-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>68.2%</td></tr></tbody></table><h3 id="Stack-已全部做完"><a href="#Stack-已全部做完" class="headerlink" title="Stack (已全部做完)"></a>Stack (已全部做完)</h3><ul><li>括号匹配问题及类似问题。第 20 题，第 921 题，第 1021 题。</li><li>栈的基本 pop 和 push 操作。第 71 题，第 150 题，第 155 题，第 224 题，第 225 题，第 232 题，第 946 题，第 1047 题。</li><li>利用栈进行编码问题。第 394 题，第 682 题，第 856 题，第 880 题。</li><li><strong>单调栈</strong>。<strong>利用栈维护一个单调递增或者递减的下标数组</strong>。第 84 题，第 456 题，第 496 题，第 503 题，第 739 题，第 901 题，第 907 题，第 1019 题。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0020</td><td>Valid Parentheses</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0020.Valid-Parentheses/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>39.9%</td></tr><tr><td>0042</td><td>Trapping Rain Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0042.Trapping-Rain-Water/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>51.4%</td></tr><tr><td>0071</td><td>Simplify Path</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0071.Simplify-Path/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>34.8%</td></tr><tr><td>0084</td><td>Largest Rectangle in Histogram</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0084.Largest-Rectangle-in-Histogram/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>37.3%</td></tr><tr><td>0094</td><td>Binary Tree Inorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0094.Binary-Tree-Inorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>66.1%</td></tr><tr><td>0103</td><td>Binary Tree Zigzag Level Order Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>50.3%</td></tr><tr><td>0144</td><td>Binary Tree Preorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.7%</td></tr><tr><td>0145</td><td>Binary Tree Postorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.8%</td></tr><tr><td>0150</td><td>Evaluate Reverse Polish Notation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0150.Evaluate-Reverse-Polish-Notation/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>38.1%</td></tr><tr><td>0155</td><td>Min Stack</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0155.Min-Stack/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>46.6%</td></tr><tr><td>0173</td><td>Binary Search Tree Iterator</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0173.Binary-Search-Tree-Iterator/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>60.4%</td></tr><tr><td>0224</td><td>Basic Calculator</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0224.Basic-Calculator/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>38.2%</td></tr><tr><td>0225</td><td>Implement Stack using Queues</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0225.Implement-Stack-using-Queues/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>47.7%</td></tr><tr><td>0227</td><td>Basic Calculator II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0227.Basic-Calculator-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>38.6%</td></tr><tr><td>0232</td><td>Implement Queue using Stacks</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0232.Implement-Queue-using-Stacks/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>52.5%</td></tr><tr><td>0331</td><td>Verify Preorder Serialization of a Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0331.Verify-Preorder-Serialization-of-a-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>41.1%</td></tr><tr><td>0385</td><td>Mini Parser</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0385.Mini-Parser/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>34.5%</td></tr><tr><td>0394</td><td>Decode String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0394.Decode-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>52.8%</td></tr><tr><td>0402</td><td>Remove K Digits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0402.Remove-K-Digits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>28.7%</td></tr><tr><td>0456</td><td>132 Pattern</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0456.132-Pattern/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>30.7%</td></tr><tr><td>0496</td><td>Next Greater Element I</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0496.Next-Greater-Element-I/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>65.8%</td></tr><tr><td>0503</td><td>Next Greater Element II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0503.Next-Greater-Element-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>58.6%</td></tr><tr><td>0636</td><td>Exclusive Time of Functions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0636.Exclusive-Time-of-Functions/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>54.7%</td></tr><tr><td>0682</td><td>Baseball Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0682.Baseball-Game/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>67.2%</td></tr><tr><td>0726</td><td>Number of Atoms</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0726.Number-of-Atoms/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>51.0%</td></tr><tr><td>0735</td><td>Asteroid Collision</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0735.Asteroid-Collision/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>43.3%</td></tr><tr><td>0739</td><td>Daily Temperatures</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0739.Daily-Temperatures/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>64.7%</td></tr><tr><td>0844</td><td>Backspace String Compare</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0844.Backspace-String-Compare/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>47.1%</td></tr><tr><td>0856</td><td>Score of Parentheses</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0856.Score-of-Parentheses/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>64.9%</td></tr><tr><td>0880</td><td>Decoded String at Index</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0880.Decoded-String-at-Index/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>28.2%</td></tr><tr><td>0895</td><td>Maximum Frequency Stack</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0895.Maximum-Frequency-Stack/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>63.1%</td></tr><tr><td>0901</td><td>Online Stock Span</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0901.Online-Stock-Span/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>61.4%</td></tr><tr><td>0907</td><td>Sum of Subarray Minimums</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0907.Sum-of-Subarray-Minimums/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>33.1%</td></tr><tr><td>0921</td><td>Minimum Add to Make Parentheses Valid</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0921.Minimum-Add-to-Make-Parentheses-Valid/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>74.9%</td></tr><tr><td>0946</td><td>Validate Stack Sequences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0946.Validate-Stack-Sequences/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>64.4%</td></tr><tr><td>1003</td><td>Check If Word Is Valid After Substitutions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1003.Check-If-Word-Is-Valid-After-Substitutions/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>56.5%</td></tr><tr><td>1019</td><td>Next Greater Node In Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1019.Next-Greater-Node-In-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>58.3%</td></tr><tr><td>1021</td><td>Remove Outermost Parentheses</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1021.Remove-Outermost-Parentheses/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>79.1%</td></tr><tr><td>1047</td><td>Remove All Adjacent Duplicates In String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1047.Remove-All-Adjacent-Duplicates-In-String/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>71.0%</td></tr><tr><td>1249</td><td>Minimum Remove to Make Valid Parentheses</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1249.Minimum-Remove-to-Make-Valid-Parentheses/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>64.2%</td></tr><tr><td>1673</td><td>Find the Most Competitive Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1673.Find-the-Most-Competitive-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>45.5%</td></tr></tbody></table><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0094</td><td>Binary Tree Inorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0094.Binary-Tree-Inorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>66.1%</td></tr><tr><td>0095</td><td>Unique Binary Search Trees II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0095.Unique-Binary-Search-Trees-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>42.8%</td></tr><tr><td>0096</td><td>Unique Binary Search Trees</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0096.Unique-Binary-Search-Trees/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>54.6%</td></tr><tr><td>0098</td><td>Validate Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0098.Validate-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>28.8%</td></tr><tr><td>0099</td><td>Recover Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0099.Recover-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>42.6%</td></tr><tr><td>0100</td><td>Same Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0100.Same-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>54.2%</td></tr><tr><td>0101</td><td>Symmetric Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>48.3%</td></tr><tr><td>0102</td><td>Binary Tree Level Order Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>56.8%</td></tr><tr><td>0103</td><td>Binary Tree Zigzag Level Order Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>50.3%</td></tr><tr><td>0104</td><td>Maximum Depth of Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>68.2%</td></tr><tr><td>0105</td><td>Construct Binary Tree from Preorder and Inorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.1%</td></tr><tr><td>0106</td><td>Construct Binary Tree from Inorder and Postorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.9%</td></tr><tr><td>0107</td><td>Binary Tree Level Order Traversal II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>55.4%</td></tr><tr><td>0108</td><td>Convert Sorted Array to Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>60.7%</td></tr><tr><td>0110</td><td>Balanced Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>44.8%</td></tr><tr><td>0111</td><td>Minimum Depth of Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>39.7%</td></tr><tr><td>0112</td><td>Path Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>42.5%</td></tr><tr><td>0113</td><td>Path Sum II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>49.3%</td></tr><tr><td>0114</td><td>Flatten Binary Tree to Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>52.2%</td></tr><tr><td>0124</td><td>Binary Tree Maximum Path Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>35.6%</td></tr><tr><td>0129</td><td>Sum Root to Leaf Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>51.1%</td></tr><tr><td>0144</td><td>Binary Tree Preorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.7%</td></tr><tr><td>0145</td><td>Binary Tree Postorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.8%</td></tr><tr><td>0173</td><td>Binary Search Tree Iterator</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0173.Binary-Search-Tree-Iterator/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>60.4%</td></tr><tr><td>0199</td><td>Binary Tree Right Side View</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0199.Binary-Tree-Right-Side-View/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>56.4%</td></tr><tr><td>0222</td><td>Count Complete Tree Nodes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0222.Count-Complete-Tree-Nodes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>49.5%</td></tr><tr><td>0226</td><td>Invert Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0226.Invert-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>67.2%</td></tr><tr><td>0230</td><td>Kth Smallest Element in a BST</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0230.Kth-Smallest-Element-in-a-BST/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>62.8%</td></tr><tr><td>0235</td><td>Lowest Common Ancestor of a Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0235.Lowest-Common-Ancestor-of-a-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>52.0%</td></tr><tr><td>0236</td><td>Lowest Common Ancestor of a Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0236.Lowest-Common-Ancestor-of-a-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>49.1%</td></tr><tr><td>0257</td><td>Binary Tree Paths</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0257.Binary-Tree-Paths/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>53.8%</td></tr><tr><td>0337</td><td>House Robber III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0337.House-Robber-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.0%</td></tr><tr><td>0404</td><td>Sum of Left Leaves</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0404.Sum-of-Left-Leaves/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>52.3%</td></tr><tr><td>0437</td><td>Path Sum III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0437.Path-Sum-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>48.2%</td></tr><tr><td>0508</td><td>Most Frequent Subtree Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0508.Most-Frequent-Subtree-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.2%</td></tr><tr><td>0513</td><td>Find Bottom Left Tree Value</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0513.Find-Bottom-Left-Tree-Value/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.7%</td></tr><tr><td>0515</td><td>Find Largest Value in Each Tree Row</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0515.Find-Largest-Value-in-Each-Tree-Row/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>62.3%</td></tr><tr><td>0538</td><td>Convert BST to Greater Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0538.Convert-BST-to-Greater-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.6%</td></tr><tr><td>0563</td><td>Binary Tree Tilt</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0563.Binary-Tree-Tilt/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>53.1%</td></tr><tr><td>0572</td><td>Subtree of Another Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0572.Subtree-of-Another-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>44.5%</td></tr><tr><td>0623</td><td>Add One Row to Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0623.Add-One-Row-to-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>53.0%</td></tr><tr><td>0637</td><td>Average of Levels in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0637.Average-of-Levels-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>66.0%</td></tr><tr><td>0653</td><td>Two Sum IV - Input is a BST</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0653.Two-Sum-IV-Input-is-a-BST/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>56.3%</td></tr><tr><td>0662</td><td>Maximum Width of Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0662.Maximum-Width-of-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>39.8%</td></tr><tr><td>0669</td><td>Trim a Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0669.Trim-a-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>64.4%</td></tr><tr><td>0684</td><td>Redundant Connection</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0684.Redundant-Connection/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.0%</td></tr><tr><td>0685</td><td>Redundant Connection II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0685.Redundant-Connection-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>33.0%</td></tr><tr><td>0834</td><td>Sum of Distances in Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0834.Sum-of-Distances-in-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>46.3%</td></tr><tr><td>0863</td><td>All Nodes Distance K in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0863.All-Nodes-Distance-K-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>58.1%</td></tr><tr><td>0872</td><td>Leaf-Similar Trees</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0872.Leaf-Similar-Trees/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>64.5%</td></tr><tr><td>0897</td><td>Increasing Order Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0897.Increasing-Order-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>74.6%</td></tr><tr><td>0968</td><td>Binary Tree Cameras</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0968.Binary-Tree-Cameras/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.8%</td></tr><tr><td>0979</td><td>Distribute Coins in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0979.Distribute-Coins-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>69.9%</td></tr><tr><td>0987</td><td>Vertical Order Traversal of a Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0987.Vertical-Order-Traversal-of-a-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.9%</td></tr><tr><td>0993</td><td>Cousins in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0993.Cousins-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>52.3%</td></tr><tr><td>1026</td><td>Maximum Difference Between Node and Ancestor</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1026.Maximum-Difference-Between-Node-and-Ancestor/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>69.6%</td></tr><tr><td>1028</td><td>Recover a Tree From Preorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1028.Recover-a-Tree-From-Preorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>71.0%</td></tr><tr><td>1038</td><td>Binary Search Tree to Greater Sum Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1038.Binary-Search-Tree-to-Greater-Sum-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>82.4%</td></tr><tr><td>1110</td><td>Delete Nodes And Return Forest</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1110.Delete-Nodes-And-Return-Forest/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>67.8%</td></tr><tr><td>1123</td><td>Lowest Common Ancestor of Deepest Leaves</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1123.Lowest-Common-Ancestor-of-Deepest-Leaves/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>68.0%</td></tr><tr><td>1145</td><td>Binary Tree Coloring Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1145.Binary-Tree-Coloring-Game/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>51.3%</td></tr><tr><td>1302</td><td>Deepest Leaves Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1302.Deepest-Leaves-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>84.2%</td></tr><tr><td>1305</td><td>All Elements in Two Binary Search Trees</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1305.All-Elements-in-Two-Binary-Search-Trees/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>77.8%</td></tr></tbody></table><h3 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0005</td><td>Longest Palindromic Substring</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0005.Longest-Palindromic-Substring/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>30.6%</td></tr><tr><td>0042</td><td>Trapping Rain Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0042.Trapping-Rain-Water/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>51.4%</td></tr><tr><td>0053</td><td>Maximum Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0053.Maximum-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>47.8%</td></tr><tr><td>0062</td><td>Unique Paths</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0062.Unique-Paths/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>56.2%</td></tr><tr><td>0063</td><td>Unique Paths II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0063.Unique-Paths-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>35.3%</td></tr><tr><td>0064</td><td>Minimum Path Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0064.Minimum-Path-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>56.4%</td></tr><tr><td>0070</td><td>Climbing Stairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0070.Climbing-Stairs/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>48.7%</td></tr><tr><td>0091</td><td>Decode Ways</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0091.Decode-Ways/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>26.8%</td></tr><tr><td>0095</td><td>Unique Binary Search Trees II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0095.Unique-Binary-Search-Trees-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>42.8%</td></tr><tr><td>0096</td><td>Unique Binary Search Trees</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0096.Unique-Binary-Search-Trees/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>54.6%</td></tr><tr><td>0115</td><td>Distinct Subsequences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>39.9%</td></tr><tr><td>0120</td><td>Triangle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0120.Triangle/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>45.9%</td></tr><tr><td>0121</td><td>Best Time to Buy and Sell Stock</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0121.Best-Time-to-Buy-and-Sell-Stock/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>51.7%</td></tr><tr><td>0131</td><td>Palindrome Partitioning</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.4%</td></tr><tr><td>0152</td><td>Maximum Product Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0152.Maximum-Product-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>32.8%</td></tr><tr><td>0174</td><td>Dungeon Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0174.Dungeon-Game/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>33.4%</td></tr><tr><td>0198</td><td>House Robber</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0198.House-Robber/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>43.0%</td></tr><tr><td>0213</td><td>House Robber II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0213.House-Robber-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>37.6%</td></tr><tr><td>0300</td><td>Longest Increasing Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0300.Longest-Increasing-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>44.3%</td></tr><tr><td>0303</td><td>Range Sum Query - Immutable</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0303.Range-Sum-Query-Immutable/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>48.0%</td></tr><tr><td>0304</td><td>Range Sum Query 2D - Immutable</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0304.Range-Sum-Query-2D-Immutable/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>40.8%</td></tr><tr><td>0309</td><td>Best Time to Buy and Sell Stock with Cooldown</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0309.Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>48.3%</td></tr><tr><td>0322</td><td>Coin Change</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0322.Coin-Change/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>37.6%</td></tr><tr><td>0337</td><td>House Robber III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0337.House-Robber-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.0%</td></tr><tr><td>0338</td><td>Counting Bits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0338.Counting-Bits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>70.5%</td></tr><tr><td>0343</td><td>Integer Break</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0343.Integer-Break/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>51.3%</td></tr><tr><td>0354</td><td>Russian Doll Envelopes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0354.Russian-Doll-Envelopes/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.5%</td></tr><tr><td>0357</td><td>Count Numbers with Unique Digits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0357.Count-Numbers-with-Unique-Digits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(1)</td><td>O(1)</td><td>48.9%</td></tr><tr><td>0376</td><td>Wiggle Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0376.Wiggle-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>42.2%</td></tr><tr><td>0392</td><td>Is Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0392.Is-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>49.5%</td></tr><tr><td>0410</td><td>Split Array Largest Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0410.Split-Array-Largest-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>46.5%</td></tr><tr><td>0413</td><td>Arithmetic Slices</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0413.Arithmetic-Slices/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>60.0%</td></tr><tr><td>0416</td><td>Partition Equal Subset Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0416.Partition-Equal-Subset-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>44.9%</td></tr><tr><td>0474</td><td>Ones and Zeroes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0474.Ones-and-Zeroes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>43.8%</td></tr><tr><td>0494</td><td>Target Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0494.Target-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>45.7%</td></tr><tr><td>0638</td><td>Shopping Offers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0638.Shopping-Offers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>53.0%</td></tr><tr><td>0714</td><td>Best Time to Buy and Sell Stock with Transaction Fee</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0714.Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>58.0%</td></tr><tr><td>0718</td><td>Maximum Length of Repeated Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0718.Maximum-Length-of-Repeated-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>50.4%</td></tr><tr><td>0746</td><td>Min Cost Climbing Stairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0746.Min-Cost-Climbing-Stairs/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>50.9%</td></tr><tr><td>0838</td><td>Push Dominoes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0838.Push-Dominoes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>49.9%</td></tr><tr><td>0887</td><td>Super Egg Drop</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0887.Super-Egg-Drop/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>27.0%</td></tr><tr><td>0898</td><td>Bitwise ORs of Subarrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0898.Bitwise-ORs-of-Subarrays/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>34.3%</td></tr><tr><td>0920</td><td>Number of Music Playlists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0920.Number-of-Music-Playlists/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>47.8%</td></tr><tr><td>0968</td><td>Binary Tree Cameras</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0968.Binary-Tree-Cameras/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.8%</td></tr><tr><td>0978</td><td>Longest Turbulent Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0978.Longest-Turbulent-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>46.6%</td></tr><tr><td>1025</td><td>Divisor Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1025.Divisor-Game/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>66.1%</td></tr><tr><td>1049</td><td>Last Stone Weight II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1049.Last-Stone-Weight-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>45.6%</td></tr><tr><td>1074</td><td>Number of Submatrices That Sum to Target</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1074.Number-of-Submatrices-That-Sum-to-Target/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>61.9%</td></tr><tr><td>1105</td><td>Filling Bookcase Shelves</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1105.Filling-Bookcase-Shelves/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>57.5%</td></tr><tr><td>1235</td><td>Maximum Profit in Job Scheduling</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1235.Maximum-Profit-in-Job-Scheduling/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>47.5%</td></tr><tr><td>1423</td><td>Maximum Points You Can Obtain from Cards</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1423.Maximum-Points-You-Can-Obtain-from-Cards/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>46.8%</td></tr><tr><td>1463</td><td>Cherry Pickup II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1463.Cherry-Pickup-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>69.0%</td></tr><tr><td>1641</td><td>Count Sorted Vowel Strings</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1641.Count-Sorted-Vowel-Strings/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>76.1%</td></tr><tr><td>1654</td><td>Minimum Jumps to Reach Home</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1654.Minimum-Jumps-to-Reach-Home/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>25.4%</td></tr><tr><td>1655</td><td>Distribute Repeating Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1655.Distribute-Repeating-Integers/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>39.9%</td></tr><tr><td>1659</td><td>Maximize Grid Happiness</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1659.Maximize-Grid-Happiness/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>35.6%</td></tr><tr><td>1664</td><td>Ways to Make a Fair Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1664.Ways-to-Make-a-Fair-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.1%</td></tr><tr><td>1690</td><td>Stone Game VII</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1690.Stone-Game-VII/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>48.7%</td></tr><tr><td>1691</td><td>Maximum Height by Stacking Cuboids</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1691.Maximum-Height-by-Stacking-Cuboids/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>50.2%</td></tr></tbody></table><h3 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h3><ul><li>排列问题 Permutations。第 46 题，第 47 题。第 60 题，第 526 题，第 996 题。</li><li>组合问题 Combination。第 39 题，第 40 题，第 77 题，第 216 题。</li><li>排列和组合杂交问题。第 1079 题。</li><li>N 皇后终极解法(二进制解法)。第 51 题，第 52 题。</li><li>数独问题。第 37 题。</li><li>四个方向搜索。第 79 题，第 212 题，第 980 题。</li><li>子集合问题。第 78 题，第 90 题。</li><li>Trie。第 208 题，第 211 题。</li><li>BFS 优化。第 126 题，第 127 题。</li><li>DFS 模板。(只是一个例子，不对应任何题)</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>    <span class="token function">findcombinationSum2</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">findcombinationSum2</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">,</span> c <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> res <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里是去重的关键逻辑</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> target <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">findcombinationSum2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> res<span class="token punctuation">)</span>            c <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BFS 模板。(只是一个例子，不对应任何题)</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">updateMatrix_BFS</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    res <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res    <span class="token punctuation">}</span>    queue <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> matrix <span class="token punctuation">{</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    level <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        size <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">for</span> size <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            size <span class="token operator">-=</span> <span class="token number">1</span>            node <span class="token operator">:=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            queue <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            i<span class="token punctuation">,</span> j <span class="token operator">:=</span> node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> direction <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>                x <span class="token operator">:=</span> i <span class="token operator">+</span> direction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                y <span class="token operator">:=</span> j <span class="token operator">+</span> direction<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> level                queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        level<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> res <span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token punctuation">,</span> cell <span class="token operator">:=</span> <span class="token keyword">range</span> row <span class="token punctuation">{</span>            <span class="token keyword">if</span> cell <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0017</td><td>Letter Combinations of a Phone Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0017.Letter-Combinations-of-a-Phone-Number/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(log n)</td><td>O(1)</td><td>49.4%</td></tr><tr><td>0022</td><td>Generate Parentheses</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0022.Generate-Parentheses/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(log n)</td><td>O(1)</td><td>65.6%</td></tr><tr><td>0037</td><td>Sudoku Solver</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0037.Sudoku-Solver/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^2)</td><td>O(n^2)</td><td>46.8%</td></tr><tr><td>0039</td><td>Combination Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0039.Combination-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>59.5%</td></tr><tr><td>0040</td><td>Combination Sum II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0040.Combination-Sum-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>50.3%</td></tr><tr><td>0046</td><td>Permutations</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0046.Permutations/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>66.9%</td></tr><tr><td>0047</td><td>Permutations II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0047.Permutations-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>49.6%</td></tr><tr><td>0051</td><td>N-Queens</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0051.N-Queens/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n!)</td><td>O(n)</td><td>49.9%</td></tr><tr><td>0052</td><td>N-Queens II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0052.N-Queens-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n!)</td><td>O(n)</td><td>60.4%</td></tr><tr><td>0060</td><td>Permutation Sequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0060.Permutation-Sequence/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(1)</td><td>39.5%</td></tr><tr><td>0077</td><td>Combinations</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0077.Combinations/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>57.8%</td></tr><tr><td>0078</td><td>Subsets</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0078.Subsets/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>65.4%</td></tr><tr><td>0079</td><td>Word Search</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0079.Word-Search/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>37.0%</td></tr><tr><td>0089</td><td>Gray Code</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0089.Gray-Code/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>50.6%</td></tr><tr><td>0090</td><td>Subsets II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0090.Subsets-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>49.0%</td></tr><tr><td>0093</td><td>Restore IP Addresses</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0093.Restore-IP-Addresses/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>37.7%</td></tr><tr><td>0126</td><td>Word Ladder II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n^2)</td><td>23.9%</td></tr><tr><td>0131</td><td>Palindrome Partitioning</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n^2)</td><td>52.4%</td></tr><tr><td>0211</td><td>Design Add and Search Words Data Structure</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0211.Design-Add-and-Search-Words-Data-Structure/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>40.4%</td></tr><tr><td>0212</td><td>Word Search II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0212.Word-Search-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^2)</td><td>O(n^2)</td><td>37.3%</td></tr><tr><td>0216</td><td>Combination Sum III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0216.Combination-Sum-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>60.5%</td></tr><tr><td>0306</td><td>Additive Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0306.Additive-Number/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>29.7%</td></tr><tr><td>0357</td><td>Count Numbers with Unique Digits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0357.Count-Numbers-with-Unique-Digits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(1)</td><td>O(1)</td><td>48.9%</td></tr><tr><td>0401</td><td>Binary Watch</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0401.Binary-Watch/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>48.5%</td></tr><tr><td>0526</td><td>Beautiful Arrangement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0526.Beautiful-Arrangement/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>62.0%</td></tr><tr><td>0784</td><td>Letter Case Permutation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0784.Letter-Case-Permutation/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>68.6%</td></tr><tr><td>0842</td><td>Split Array into Fibonacci Sequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0842.Split-Array-into-Fibonacci-Sequence/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>37.0%</td></tr><tr><td>0980</td><td>Unique Paths III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0980.Unique-Paths-III/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>77.1%</td></tr><tr><td>0996</td><td>Number of Squareful Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0996.Number-of-Squareful-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>48.6%</td></tr><tr><td>1079</td><td>Letter Tile Possibilities</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1079.Letter-Tile-Possibilities/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>75.9%</td></tr><tr><td>1641</td><td>Count Sorted Vowel Strings</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1641.Count-Sorted-Vowel-Strings/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>76.1%</td></tr><tr><td>1655</td><td>Distribute Repeating Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1655.Distribute-Repeating-Integers/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>39.9%</td></tr><tr><td>1659</td><td>Maximize Grid Happiness</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1659.Maximize-Grid-Happiness/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>35.6%</td></tr><tr><td>1681</td><td>Minimum Incompatibility</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1681.Minimum-Incompatibility/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>35.7%</td></tr><tr><td>1688</td><td>Count of Matches in Tournament</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1688.Count-of-Matches-in-Tournament/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>81.6%</td></tr></tbody></table><h3 id="Depth-first-search"><a href="#Depth-first-search" class="headerlink" title="Depth-first search"></a>Depth-first search</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0017</td><td>Letter Combinations of a Phone Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0017.Letter-Combinations-of-a-Phone-Number/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.4%</td></tr><tr><td>0098</td><td>Validate Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0098.Validate-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>28.8%</td></tr><tr><td>0099</td><td>Recover Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0099.Recover-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>42.6%</td></tr><tr><td>0100</td><td>Same Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0100.Same-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>54.2%</td></tr><tr><td>0101</td><td>Symmetric Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>48.3%</td></tr><tr><td>0104</td><td>Maximum Depth of Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>68.2%</td></tr><tr><td>0105</td><td>Construct Binary Tree from Preorder and Inorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.1%</td></tr><tr><td>0106</td><td>Construct Binary Tree from Inorder and Postorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.9%</td></tr><tr><td>0108</td><td>Convert Sorted Array to Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>60.7%</td></tr><tr><td>0109</td><td>Convert Sorted List to Binary Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(log n)</td><td>O(n)</td><td>50.4%</td></tr><tr><td>0110</td><td>Balanced Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>44.8%</td></tr><tr><td>0111</td><td>Minimum Depth of Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>39.7%</td></tr><tr><td>0112</td><td>Path Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>42.5%</td></tr><tr><td>0113</td><td>Path Sum II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>49.3%</td></tr><tr><td>0114</td><td>Flatten Binary Tree to Linked List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>52.2%</td></tr><tr><td>0124</td><td>Binary Tree Maximum Path Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>35.6%</td></tr><tr><td>0129</td><td>Sum Root to Leaf Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>51.1%</td></tr><tr><td>0130</td><td>Surrounded Regions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>29.6%</td></tr><tr><td>0131</td><td>Palindrome Partitioning</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.4%</td></tr><tr><td>0199</td><td>Binary Tree Right Side View</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0199.Binary-Tree-Right-Side-View/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>56.4%</td></tr><tr><td>0200</td><td>Number of Islands</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0200.Number-of-Islands/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>49.3%</td></tr><tr><td>0207</td><td>Course Schedule</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0207.Course-Schedule/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>44.3%</td></tr><tr><td>0210</td><td>Course Schedule II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0210.Course-Schedule-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>42.8%</td></tr><tr><td>0211</td><td>Design Add and Search Words Data Structure</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0211.Design-Add-and-Search-Words-Data-Structure/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>40.4%</td></tr><tr><td>0257</td><td>Binary Tree Paths</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0257.Binary-Tree-Paths/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>53.8%</td></tr><tr><td>0329</td><td>Longest Increasing Path in a Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0329.Longest-Increasing-Path-in-a-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>45.2%</td></tr><tr><td>0337</td><td>House Robber III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0337.House-Robber-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.0%</td></tr><tr><td>0394</td><td>Decode String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0394.Decode-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>52.8%</td></tr><tr><td>0491</td><td>Increasing Subsequences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0491.Increasing-Subsequences/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>47.6%</td></tr><tr><td>0494</td><td>Target Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0494.Target-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>45.7%</td></tr><tr><td>0513</td><td>Find Bottom Left Tree Value</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0513.Find-Bottom-Left-Tree-Value/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.7%</td></tr><tr><td>0515</td><td>Find Largest Value in Each Tree Row</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0515.Find-Largest-Value-in-Each-Tree-Row/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>62.3%</td></tr><tr><td>0526</td><td>Beautiful Arrangement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0526.Beautiful-Arrangement/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.0%</td></tr><tr><td>0529</td><td>Minesweeper</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0529.Minesweeper/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>61.3%</td></tr><tr><td>0538</td><td>Convert BST to Greater Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0538.Convert-BST-to-Greater-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.6%</td></tr><tr><td>0542</td><td>01 Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0542.01-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>41.0%</td></tr><tr><td>0547</td><td>Number of Provinces</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0547.Number-of-Provinces/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>60.6%</td></tr><tr><td>0563</td><td>Binary Tree Tilt</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0563.Binary-Tree-Tilt/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>53.1%</td></tr><tr><td>0638</td><td>Shopping Offers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0638.Shopping-Offers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>53.0%</td></tr><tr><td>0685</td><td>Redundant Connection II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0685.Redundant-Connection-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>33.0%</td></tr><tr><td>0695</td><td>Max Area of Island</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0695.Max-Area-of-Island/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>65.0%</td></tr><tr><td>0721</td><td>Accounts Merge</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0721.Accounts-Merge/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.1%</td></tr><tr><td>0733</td><td>Flood Fill</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0733.Flood-Fill/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>55.9%</td></tr><tr><td>0753</td><td>Cracking the Safe</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0753.Cracking-the-Safe/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>52.4%</td></tr><tr><td>0756</td><td>Pyramid Transition Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0756.Pyramid-Transition-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.6%</td></tr><tr><td>0778</td><td>Swim in Rising Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0778.Swim-in-Rising-Water/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>54.7%</td></tr><tr><td>0785</td><td>Is Graph Bipartite?</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0785.Is-Graph-Bipartite/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>48.7%</td></tr><tr><td>0802</td><td>Find Eventual Safe States</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0802.Find-Eventual-Safe-States/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.9%</td></tr><tr><td>0834</td><td>Sum of Distances in Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0834.Sum-of-Distances-in-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>46.3%</td></tr><tr><td>0839</td><td>Similar String Groups</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0839.Similar-String-Groups/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>41.2%</td></tr><tr><td>0841</td><td>Keys and Rooms</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0841.Keys-and-Rooms/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>66.4%</td></tr><tr><td>0851</td><td>Loud and Rich</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0851.Loud-and-Rich/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.7%</td></tr><tr><td>0863</td><td>All Nodes Distance K in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0863.All-Nodes-Distance-K-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>58.1%</td></tr><tr><td>0872</td><td>Leaf-Similar Trees</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0872.Leaf-Similar-Trees/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>64.5%</td></tr><tr><td>0897</td><td>Increasing Order Search Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0897.Increasing-Order-Search-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>74.6%</td></tr><tr><td>0924</td><td>Minimize Malware Spread</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0924.Minimize-Malware-Spread/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>41.9%</td></tr><tr><td>0928</td><td>Minimize Malware Spread II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0928.Minimize-Malware-Spread-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>41.5%</td></tr><tr><td>0947</td><td>Most Stones Removed with Same Row or Column</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0947.Most-Stones-Removed-with-Same-Row-or-Column/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.5%</td></tr><tr><td>0959</td><td>Regions Cut By Slashes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0959.Regions-Cut-By-Slashes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>67.2%</td></tr><tr><td>0968</td><td>Binary Tree Cameras</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0968.Binary-Tree-Cameras/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.8%</td></tr><tr><td>0979</td><td>Distribute Coins in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0979.Distribute-Coins-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>69.9%</td></tr><tr><td>0980</td><td>Unique Paths III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0980.Unique-Paths-III/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>77.1%</td></tr><tr><td>0987</td><td>Vertical Order Traversal of a Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0987.Vertical-Order-Traversal-of-a-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.9%</td></tr><tr><td>1020</td><td>Number of Enclaves</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1020.Number-of-Enclaves/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.1%</td></tr><tr><td>1026</td><td>Maximum Difference Between Node and Ancestor</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1026.Maximum-Difference-Between-Node-and-Ancestor/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>69.6%</td></tr><tr><td>1028</td><td>Recover a Tree From Preorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1028.Recover-a-Tree-From-Preorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>71.0%</td></tr><tr><td>1038</td><td>Binary Search Tree to Greater Sum Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1038.Binary-Search-Tree-to-Greater-Sum-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>82.4%</td></tr><tr><td>1110</td><td>Delete Nodes And Return Forest</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1110.Delete-Nodes-And-Return-Forest/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>67.8%</td></tr><tr><td>1123</td><td>Lowest Common Ancestor of Deepest Leaves</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1123.Lowest-Common-Ancestor-of-Deepest-Leaves/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>68.0%</td></tr><tr><td>1145</td><td>Binary Tree Coloring Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1145.Binary-Tree-Coloring-Game/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>51.3%</td></tr><tr><td>1203</td><td>Sort Items by Groups Respecting Dependencies</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1203.Sort-Items-by-Groups-Respecting-Dependencies/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>48.3%</td></tr><tr><td>1254</td><td>Number of Closed Islands</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1254.Number-of-Closed-Islands/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>61.7%</td></tr><tr><td>1302</td><td>Deepest Leaves Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1302.Deepest-Leaves-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>84.2%</td></tr><tr><td>1306</td><td>Jump Game III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1306.Jump-Game-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.3%</td></tr><tr><td>1319</td><td>Number of Operations to Make Network Connected</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1319.Number-of-Operations-to-Make-Network-Connected/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.5%</td></tr><tr><td>1631</td><td>Path With Minimum Effort</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1631.Path-With-Minimum-Effort/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.9%</td></tr></tbody></table><h3 id="Breadth-First-Search"><a href="#Breadth-First-Search" class="headerlink" title="Breadth First Search"></a>Breadth First Search</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0101</td><td>Symmetric Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>48.3%</td></tr><tr><td>0102</td><td>Binary Tree Level Order Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>56.8%</td></tr><tr><td>0103</td><td>Binary Tree Zigzag Level Order Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>50.3%</td></tr><tr><td>0107</td><td>Binary Tree Level Order Traversal II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>55.4%</td></tr><tr><td>0111</td><td>Minimum Depth of Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>39.7%</td></tr><tr><td>0126</td><td>Word Ladder II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n^2)</td><td>23.9%</td></tr><tr><td>0127</td><td>Word Ladder</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0127.Word-Ladder/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>32.0%</td></tr><tr><td>0130</td><td>Surrounded Regions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>29.6%</td></tr><tr><td>0199</td><td>Binary Tree Right Side View</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0199.Binary-Tree-Right-Side-View/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>56.4%</td></tr><tr><td>0200</td><td>Number of Islands</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0200.Number-of-Islands/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>49.3%</td></tr><tr><td>0207</td><td>Course Schedule</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0207.Course-Schedule/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>44.3%</td></tr><tr><td>0210</td><td>Course Schedule II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0210.Course-Schedule-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>42.8%</td></tr><tr><td>0513</td><td>Find Bottom Left Tree Value</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0513.Find-Bottom-Left-Tree-Value/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.7%</td></tr><tr><td>0515</td><td>Find Largest Value in Each Tree Row</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0515.Find-Largest-Value-in-Each-Tree-Row/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>62.3%</td></tr><tr><td>0529</td><td>Minesweeper</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0529.Minesweeper/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>61.3%</td></tr><tr><td>0542</td><td>01 Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0542.01-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>41.0%</td></tr><tr><td>0785</td><td>Is Graph Bipartite?</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0785.Is-Graph-Bipartite/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>48.7%</td></tr><tr><td>0815</td><td>Bus Routes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0815.Bus-Routes/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>43.4%</td></tr><tr><td>0863</td><td>All Nodes Distance K in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0863.All-Nodes-Distance-K-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>58.1%</td></tr><tr><td>0864</td><td>Shortest Path to Get All Keys</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0864.Shortest-Path-to-Get-All-Keys/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>42.3%</td></tr><tr><td>0987</td><td>Vertical Order Traversal of a Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0987.Vertical-Order-Traversal-of-a-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.9%</td></tr><tr><td>0993</td><td>Cousins in Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0993.Cousins-in-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>52.3%</td></tr><tr><td>1091</td><td>Shortest Path in Binary Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1091.Shortest-Path-in-Binary-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>40.1%</td></tr><tr><td>1306</td><td>Jump Game III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1306.Jump-Game-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.3%</td></tr><tr><td>1319</td><td>Number of Operations to Make Network Connected</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1319.Number-of-Operations-to-Make-Network-Connected/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.5%</td></tr><tr><td>1654</td><td>Minimum Jumps to Reach Home</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1654.Minimum-Jumps-to-Reach-Home/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>25.4%</td></tr></tbody></table><h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><ul><li>二分搜索的经典写法。需要注意的三点：<ol><li>循环退出条件，注意是 low &lt;= high，而不是 low &lt; high。</li><li>mid 的取值，mid := low + (high-low)»1</li><li>low 和 high 的更新。low = mid + 1，high = mid - 1。</li></ol></li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">binarySearchMatrix</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二分搜索的变种写法。有 4 个基本变种:<ol><li>查找第一个与 target 相等的元素，时间复杂度 O(logn)</li><li>查找最后一个与 target 相等的元素，时间复杂度 O(logn)</li><li>查找第一个大于等于 target 的元素，时间复杂度 O(logn)</li><li>查找最后一个小于等于 target 的元素，时间复杂度 O(logn)</li></ol></li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 二分查找第一个与 target 相等的元素，时间复杂度 O(logn)</span><span class="token keyword">func</span> <span class="token function">searchFirstEqualElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到第一个与 target 相等的元素</span>                <span class="token keyword">return</span> mid            <span class="token punctuation">}</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二分查找最后一个与 target 相等的元素，时间复杂度 O(logn)</span><span class="token keyword">func</span> <span class="token function">searchLastEqualElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到最后一个与 target 相等的元素</span>                <span class="token keyword">return</span> mid            <span class="token punctuation">}</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二分查找第一个大于等于 target 的元素，时间复杂度 O(logn)</span><span class="token keyword">func</span> <span class="token function">searchFirstGreaterElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> target <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到第一个大于等于 target 的元素</span>                <span class="token keyword">return</span> mid            <span class="token punctuation">}</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二分查找最后一个小于等于 target 的元素，时间复杂度 O(logn)</span><span class="token keyword">func</span> <span class="token function">searchLastLessElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到最后一个小于等于 target 的元素</span>                <span class="token keyword">return</span> mid            <span class="token punctuation">}</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在基本有序的数组中用二分搜索。经典解法可以解，变种写法也可以写，常见的题型，在山峰数组中找山峰，在旋转有序数组中找分界点。第 33 题，第 81 题，第 153 题，第 154 题，第 162 题，第 852 题</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span>A <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>        <span class="token comment" spellcheck="true">// 如果 mid 较大，则左侧存在峰值，high = m，如果 mid + 1 较大，则右侧存在峰值，low = mid + 1</span>        <span class="token keyword">if</span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> A<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> low<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>max-min 最大值最小化问题。求在最小满足条件的情况下的最大值。第 410 题，第 875 题，第 1011 题，第 1283 题。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0004</td><td>Median of Two Sorted Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0004.Median-of-Two-Sorted-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>31.2%</td></tr><tr><td>0029</td><td>Divide Two Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0029.Divide-Two-Integers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>16.9%</td></tr><tr><td>0033</td><td>Search in Rotated Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0033.Search-in-Rotated-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>36.0%</td></tr><tr><td>0034</td><td>Find First and Last Position of Element in Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0034.Find-First-and-Last-Position-of-Element-in-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>37.4%</td></tr><tr><td>0035</td><td>Search Insert Position</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0035.Search-Insert-Position/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>42.8%</td></tr><tr><td>0050</td><td>Pow(x, n)</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0050.Powx-n/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(log n)</td><td>O(1)</td><td>31.0%</td></tr><tr><td>0069</td><td>Sqrt(x)</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0069.Sqrtx/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>35.2%</td></tr><tr><td>0074</td><td>Search a 2D Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0074.Search-a-2D-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>38.0%</td></tr><tr><td>0081</td><td>Search in Rotated Sorted Array II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0081.Search-in-Rotated-Sorted-Array-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>33.6%</td></tr><tr><td>0153</td><td>Find Minimum in Rotated Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0153.Find-Minimum-in-Rotated-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>46.3%</td></tr><tr><td>0154</td><td>Find Minimum in Rotated Sorted Array II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0154.Find-Minimum-in-Rotated-Sorted-Array-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>42.1%</td></tr><tr><td>0162</td><td>Find Peak Element</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0162.Find-Peak-Element/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>44.0%</td></tr><tr><td>0167</td><td>Two Sum II - Input array is sorted</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0167.Two-Sum-II-Input-array-is-sorted/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>55.8%</td></tr><tr><td>0174</td><td>Dungeon Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0174.Dungeon-Game/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>33.4%</td></tr><tr><td>0209</td><td>Minimum Size Subarray Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0209.Minimum-Size-Subarray-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>39.7%</td></tr><tr><td>0222</td><td>Count Complete Tree Nodes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0222.Count-Complete-Tree-Nodes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>49.5%</td></tr><tr><td>0230</td><td>Kth Smallest Element in a BST</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0230.Kth-Smallest-Element-in-a-BST/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>62.8%</td></tr><tr><td>0240</td><td>Search a 2D Matrix II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0240.Search-a-2D-Matrix-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>45.2%</td></tr><tr><td>0275</td><td>H-Index II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0275.H-Index-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>36.3%</td></tr><tr><td>0287</td><td>Find the Duplicate Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0287.Find-the-Duplicate-Number/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>57.7%</td></tr><tr><td>0300</td><td>Longest Increasing Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0300.Longest-Increasing-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>44.3%</td></tr><tr><td>0315</td><td>Count of Smaller Numbers After Self</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0315.Count-of-Smaller-Numbers-After-Self/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>42.4%</td></tr><tr><td>0327</td><td>Count of Range Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0327.Count-of-Range-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.1%</td></tr><tr><td>0349</td><td>Intersection of Two Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0349.Intersection-of-Two-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>65.0%</td></tr><tr><td>0350</td><td>Intersection of Two Arrays II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0350.Intersection-of-Two-Arrays-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>52.0%</td></tr><tr><td>0354</td><td>Russian Doll Envelopes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0354.Russian-Doll-Envelopes/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.5%</td></tr><tr><td>0367</td><td>Valid Perfect Square</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0367.Valid-Perfect-Square/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>42.1%</td></tr><tr><td>0378</td><td>Kth Smallest Element in a Sorted Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0378.Kth-Smallest-Element-in-a-Sorted-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>56.3%</td></tr><tr><td>0392</td><td>Is Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0392.Is-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>49.5%</td></tr><tr><td>0410</td><td>Split Array Largest Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0410.Split-Array-Largest-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>46.5%</td></tr><tr><td>0436</td><td>Find Right Interval</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0436.Find-Right-Interval/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>48.5%</td></tr><tr><td>0441</td><td>Arranging Coins</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0441.Arranging-Coins/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>42.4%</td></tr><tr><td>0454</td><td>4Sum II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0454.4Sum-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>54.6%</td></tr><tr><td>0475</td><td>Heaters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0475.Heaters/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>33.7%</td></tr><tr><td>0483</td><td>Smallest Good Base</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0483.Smallest-Good-Base/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.3%</td></tr><tr><td>0493</td><td>Reverse Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0493.Reverse-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>27.0%</td></tr><tr><td>0497</td><td>Random Point in Non-overlapping Rectangles</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0497.Random-Point-in-Non-overlapping-Rectangles/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>39.1%</td></tr><tr><td>0528</td><td>Random Pick with Weight</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0528.Random-Pick-with-Weight/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>44.7%</td></tr><tr><td>0658</td><td>Find K Closest Elements</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0658.Find-K-Closest-Elements/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>42.1%</td></tr><tr><td>0668</td><td>Kth Smallest Number in Multiplication Table</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0668.Kth-Smallest-Number-in-Multiplication-Table/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>47.8%</td></tr><tr><td>0704</td><td>Binary Search</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0704.Binary-Search/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>54.1%</td></tr><tr><td>0710</td><td>Random Pick with Blacklist</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0710.Random-Pick-with-Blacklist/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>32.9%</td></tr><tr><td>0718</td><td>Maximum Length of Repeated Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0718.Maximum-Length-of-Repeated-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>50.4%</td></tr><tr><td>0719</td><td>Find K-th Smallest Pair Distance</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0719.Find-K-th-Smallest-Pair-Distance/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>32.6%</td></tr><tr><td>0744</td><td>Find Smallest Letter Greater Than Target</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0744.Find-Smallest-Letter-Greater-Than-Target/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>45.5%</td></tr><tr><td>0778</td><td>Swim in Rising Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0778.Swim-in-Rising-Water/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>54.7%</td></tr><tr><td>0786</td><td>K-th Smallest Prime Fraction</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0786.K-th-Smallest-Prime-Fraction/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>43.0%</td></tr><tr><td>0793</td><td>Preimage Size of Factorial Zeroes Function</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0793.Preimage-Size-of-Factorial-Zeroes-Function/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>40.6%</td></tr><tr><td>0852</td><td>Peak Index in a Mountain Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0852.Peak-Index-in-a-Mountain-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>71.6%</td></tr><tr><td>0862</td><td>Shortest Subarray with Sum at Least K</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0862.Shortest-Subarray-with-Sum-at-Least-K/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>25.2%</td></tr><tr><td>0875</td><td>Koko Eating Bananas</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0875.Koko-Eating-Bananas/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>53.5%</td></tr><tr><td>0878</td><td>Nth Magical Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0878.Nth-Magical-Number/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>28.8%</td></tr><tr><td>0887</td><td>Super Egg Drop</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0887.Super-Egg-Drop/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>27.0%</td></tr><tr><td>0911</td><td>Online Election</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0911.Online-Election/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>51.4%</td></tr><tr><td>0927</td><td>Three Equal Parts</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0927.Three-Equal-Parts/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>34.6%</td></tr><tr><td>0981</td><td>Time Based Key-Value Store</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0981.Time-Based-Key-Value-Store/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>54.2%</td></tr><tr><td>1011</td><td>Capacity To Ship Packages Within D Days</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1011.Capacity-To-Ship-Packages-Within-D-Days/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.8%</td></tr><tr><td>1111</td><td>Maximum Nesting Depth of Two Valid Parentheses Strings</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1111.Maximum-Nesting-Depth-of-Two-Valid-Parentheses-Strings/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>72.6%</td></tr><tr><td>1157</td><td>Online Majority Element In Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1157.Online-Majority-Element-In-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>39.8%</td></tr><tr><td>1170</td><td>Compare Strings by Frequency of the Smallest Character</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1170.Compare-Strings-by-Frequency-of-the-Smallest-Character/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>60.1%</td></tr><tr><td>1201</td><td>Ugly Number III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1201.Ugly-Number-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>26.4%</td></tr><tr><td>1235</td><td>Maximum Profit in Job Scheduling</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1235.Maximum-Profit-in-Job-Scheduling/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>47.5%</td></tr><tr><td>1283</td><td>Find the Smallest Divisor Given a Threshold</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1283.Find-the-Smallest-Divisor-Given-a-Threshold/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.7%</td></tr><tr><td>1300</td><td>Sum of Mutated Array Closest to Target</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1300.Sum-of-Mutated-Array-Closest-to-Target/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>43.0%</td></tr><tr><td>1337</td><td>The K Weakest Rows in a Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1337.The-K-Weakest-Rows-in-a-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>71.9%</td></tr><tr><td>1631</td><td>Path With Minimum Effort</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1631.Path-With-Minimum-Effort/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.9%</td></tr><tr><td>1649</td><td>Create Sorted Array through Instructions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1649.Create-Sorted-Array-through-Instructions/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.4%</td></tr><tr><td>1658</td><td>Minimum Operations to Reduce X to Zero</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1658.Minimum-Operations-to-Reduce-X-to-Zero/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>33.3%</td></tr></tbody></table><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0002</td><td>Add Two Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0002.Add-Two-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>35.6%</td></tr><tr><td>0007</td><td>Reverse Integer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0007.Reverse-Integer/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>25.9%</td></tr><tr><td>0008</td><td>String to Integer (atoi)</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0008.String-to-Integer-atoi/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>15.7%</td></tr><tr><td>0009</td><td>Palindrome Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0009.Palindrome-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>49.9%</td></tr><tr><td>0012</td><td>Integer to Roman</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0012.Integer-to-Roman/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>57.0%</td></tr><tr><td>0013</td><td>Roman to Integer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0013.Roman-to-Integer/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>56.9%</td></tr><tr><td>0029</td><td>Divide Two Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0029.Divide-Two-Integers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>16.9%</td></tr><tr><td>0043</td><td>Multiply Strings</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0043.Multiply-Strings/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>35.0%</td></tr><tr><td>0050</td><td>Pow(x, n)</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0050.Powx-n/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(log n)</td><td>O(1)</td><td>31.0%</td></tr><tr><td>0060</td><td>Permutation Sequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0060.Permutation-Sequence/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(1)</td><td>39.5%</td></tr><tr><td>0067</td><td>Add Binary</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0067.Add-Binary/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>47.1%</td></tr><tr><td>0069</td><td>Sqrt(x)</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0069.Sqrtx/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>35.2%</td></tr><tr><td>0168</td><td>Excel Sheet Column Title</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0168.Excel-Sheet-Column-Title/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>31.8%</td></tr><tr><td>0171</td><td>Excel Sheet Column Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0171.Excel-Sheet-Column-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>57.0%</td></tr><tr><td>0172</td><td>Factorial Trailing Zeroes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0172.Factorial-Trailing-Zeroes/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>38.7%</td></tr><tr><td>0202</td><td>Happy Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0202.Happy-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>51.3%</td></tr><tr><td>0204</td><td>Count Primes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0204.Count-Primes/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>32.3%</td></tr><tr><td>0223</td><td>Rectangle Area</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0223.Rectangle-Area/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>38.3%</td></tr><tr><td>0224</td><td>Basic Calculator</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0224.Basic-Calculator/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>38.2%</td></tr><tr><td>0231</td><td>Power of Two</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0231.Power-of-Two/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>43.8%</td></tr><tr><td>0258</td><td>Add Digits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0258.Add-Digits/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>58.6%</td></tr><tr><td>0263</td><td>Ugly Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0263.Ugly-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>41.7%</td></tr><tr><td>0268</td><td>Missing Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0268.Missing-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>55.1%</td></tr><tr><td>0326</td><td>Power of Three</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0326.Power-of-Three/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>42.1%</td></tr><tr><td>0343</td><td>Integer Break</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0343.Integer-Break/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>51.3%</td></tr><tr><td>0357</td><td>Count Numbers with Unique Digits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0357.Count-Numbers-with-Unique-Digits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(1)</td><td>O(1)</td><td>48.9%</td></tr><tr><td>0367</td><td>Valid Perfect Square</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0367.Valid-Perfect-Square/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>42.1%</td></tr><tr><td>0372</td><td>Super Pow</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0372.Super-Pow/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>36.7%</td></tr><tr><td>0397</td><td>Integer Replacement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0397.Integer-Replacement/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>33.5%</td></tr><tr><td>0413</td><td>Arithmetic Slices</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0413.Arithmetic-Slices/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>60.0%</td></tr><tr><td>0441</td><td>Arranging Coins</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0441.Arranging-Coins/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>42.4%</td></tr><tr><td>0447</td><td>Number of Boomerangs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0447.Number-of-Boomerangs/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.5%</td></tr><tr><td>0453</td><td>Minimum Moves to Equal Array Elements</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0453.Minimum-Moves-to-Equal-Array-Elements/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>50.9%</td></tr><tr><td>0478</td><td>Generate Random Point in a Circle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0478.Generate-Random-Point-in-a-Circle/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>39.1%</td></tr><tr><td>0483</td><td>Smallest Good Base</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0483.Smallest-Good-Base/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.3%</td></tr><tr><td>0507</td><td>Perfect Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0507.Perfect-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>36.3%</td></tr><tr><td>0535</td><td>Encode and Decode TinyURL</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0535.Encode-and-Decode-TinyURL/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>82.3%</td></tr><tr><td>0537</td><td>Complex Number Multiplication</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0537.Complex-Number-Multiplication/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>68.3%</td></tr><tr><td>0598</td><td>Range Addition II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0598.Range-Addition-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>50.2%</td></tr><tr><td>0628</td><td>Maximum Product of Three Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0628.Maximum-Product-of-Three-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>46.8%</td></tr><tr><td>0633</td><td>Sum of Square Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0633.Sum-of-Square-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>32.6%</td></tr><tr><td>0645</td><td>Set Mismatch</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0645.Set-Mismatch/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>41.6%</td></tr><tr><td>0753</td><td>Cracking the Safe</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0753.Cracking-the-Safe/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>52.4%</td></tr><tr><td>0781</td><td>Rabbits in Forest</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0781.Rabbits-in-Forest/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.6%</td></tr><tr><td>0812</td><td>Largest Triangle Area</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0812.Largest-Triangle-Area/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>59.0%</td></tr><tr><td>0836</td><td>Rectangle Overlap</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0836.Rectangle-Overlap/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>44.0%</td></tr><tr><td>0869</td><td>Reordered Power of 2</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0869.Reordered-Power-of-2/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>61.1%</td></tr><tr><td>0878</td><td>Nth Magical Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0878.Nth-Magical-Number/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>28.8%</td></tr><tr><td>0885</td><td>Spiral Matrix III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0885.Spiral-Matrix-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>71.0%</td></tr><tr><td>0887</td><td>Super Egg Drop</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0887.Super-Egg-Drop/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>27.0%</td></tr><tr><td>0891</td><td>Sum of Subsequence Widths</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0891.Sum-of-Subsequence-Widths/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(1)</td><td>33.1%</td></tr><tr><td>0892</td><td>Surface Area of 3D Shapes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0892.Surface-Area-of-3D-Shapes/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>59.9%</td></tr><tr><td>0910</td><td>Smallest Range II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0910.Smallest-Range-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>31.2%</td></tr><tr><td>0914</td><td>X of a Kind in a Deck of Cards</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0914.X-of-a-Kind-in-a-Deck-of-Cards/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>34.1%</td></tr><tr><td>0927</td><td>Three Equal Parts</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0927.Three-Equal-Parts/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>34.6%</td></tr><tr><td>0942</td><td>DI String Match</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0942.DI-String-Match/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>73.6%</td></tr><tr><td>0949</td><td>Largest Time for Given Digits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0949.Largest-Time-for-Given-Digits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>36.2%</td></tr><tr><td>0952</td><td>Largest Component Size by Common Factor</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0952.Largest-Component-Size-by-Common-Factor/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.2%</td></tr><tr><td>0970</td><td>Powerful Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0970.Powerful-Integers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>40.0%</td></tr><tr><td>0976</td><td>Largest Perimeter Triangle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0976.Largest-Perimeter-Triangle/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n log n)</td><td>O(log n)</td><td>58.7%</td></tr><tr><td>0991</td><td>Broken Calculator</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0991.Broken-Calculator/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.8%</td></tr><tr><td>0996</td><td>Number of Squareful Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0996.Number-of-Squareful-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>48.6%</td></tr><tr><td>1017</td><td>Convert to Base -2</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1017.Convert-to-Base-2/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.2%</td></tr><tr><td>1025</td><td>Divisor Game</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1025.Divisor-Game/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>66.1%</td></tr><tr><td>1037</td><td>Valid Boomerang</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1037.Valid-Boomerang/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>37.7%</td></tr><tr><td>1073</td><td>Adding Two Negabinary Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1073.Adding-Two-Negabinary-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>34.8%</td></tr><tr><td>1093</td><td>Statistics from a Large Sample</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1093.Statistics-from-a-Large-Sample/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.1%</td></tr><tr><td>1154</td><td>Day of the Year</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1154.Day-of-the-Year/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>49.2%</td></tr><tr><td>1175</td><td>Prime Arrangements</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1175.Prime-Arrangements/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>51.7%</td></tr><tr><td>1201</td><td>Ugly Number III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1201.Ugly-Number-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>26.4%</td></tr><tr><td>1217</td><td>Minimum Cost to Move Chips to The Same Position</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1217.Minimum-Cost-to-Move-Chips-to-The-Same-Position/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>71.1%</td></tr><tr><td>1232</td><td>Check If It Is a Straight Line</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1232.Check-If-It-Is-a-Straight-Line/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>43.4%</td></tr><tr><td>1281</td><td>Subtract the Product and Sum of Digits of an Integer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1281.Subtract-the-Product-and-Sum-of-Digits-of-an-Integer/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>85.6%</td></tr><tr><td>1317</td><td>Convert Integer to the Sum of Two No-Zero Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1317.Convert-Integer-to-the-Sum-of-Two-No-Zero-Integers/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>56.8%</td></tr><tr><td>1512</td><td>Number of Good Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1512.Number-of-Good-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>87.7%</td></tr><tr><td>1641</td><td>Count Sorted Vowel Strings</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1641.Count-Sorted-Vowel-Strings/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>76.1%</td></tr><tr><td>1648</td><td>Sell Diminishing-Valued Colored Balls</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1648.Sell-Diminishing-Valued-Colored-Balls/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>30.5%</td></tr><tr><td>1680</td><td>Concatenation of Consecutive Binary Numbers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1680.Concatenation-of-Consecutive-Binary-Numbers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>52.3%</td></tr><tr><td>1685</td><td>Sum of Absolute Differences in a Sorted Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1685.Sum-of-Absolute-Differences-in-a-Sorted-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>62.8%</td></tr><tr><td>1716</td><td>Calculate Money in Leetcode Bank</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1716.Calculate-Money-in-Leetcode-Bank/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>66.2%</td></tr></tbody></table><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/closest-binary-search-tree-value/" target="_blank" rel="noopener">Closest Binary Search Tree Value</a></td><td><a href="./Search/ClosestBinarySearchTreeValue.Go">Go</a></td><td>Easy</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/closest-binary-search-tree-value-ii/" target="_blank" rel="noopener">Closest Binary Search Tree Value II</a></td><td><a href="./Search/ClosestBinarySearchTreeValueII.Go">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td></tr><tr><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">Search in Rotated Sorted Array</a></td><td><a href="./Search/SearchInRotatedSortedArray.Go">Go</a></td><td>Hard</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/" target="_blank" rel="noopener">Search in Rotated Sorted Array II</a></td><td><a href="./Search/SearchInRotatedSortedArrayII.Go">Go</a></td><td>Medium</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener">Find Minimum in Rotated Sorted Array</a></td><td><a href="./Search/FindMinimumRotatedSortedArray.Go">Go</a></td><td>Medium</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="noopener">Find Minimum in Rotated Sorted Array II</a></td><td><a href="./Search/FindMinimumRotatedSortedArrayII.Go">Go</a></td><td>Hard</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/search-a-2d-matrix/" target="_blank" rel="noopener">Search a 2D Matrix</a></td><td><a href="./Search/Search2DMatrix.Go">Go</a></td><td>Medium</td><td>O(log(m + n))</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="noopener">Search a 2D Matrix II</a></td><td><a href="./Search/Search2DMatrixII.Go">Go</a></td><td>Medium</td><td>O(m + n)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/search-for-a-range/" target="_blank" rel="noopener">Search for a Range</a></td><td><a href="./Search/SearchForARange.Go">Go</a></td><td>Medium</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/search-insert-position/" target="_blank" rel="noopener">Search Insert Position</a></td><td><a href="./Search/SearchForARange.Go">Go</a></td><td>Medium</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/find-peak-element/" target="_blank" rel="noopener">Find Peak Element</a></td><td><a href="./Search/FindPeakElement.Go">Go</a></td><td>Medium</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="noopener">Sqrt(x)</a></td><td><a href="./Search/Sqrtx.Go">Go</a></td><td>Medium</td><td>O(logn)</td><td>O(1)</td></tr><tr><td><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">Median of Two Sorted Arrays</a></td><td><a href="./Search/MedianTwoSortedArrays.Go">Go</a></td><td>Hard</td><td>O(log(m + n))</td><td>O(1)</td></tr></tbody></table><h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0001</td><td>Two Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0001.Two-Sum/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>46.6%</td></tr><tr><td>0003</td><td>Longest Substring Without Repeating Characters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0003.Longest-Substring-Without-Repeating-Characters/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>31.5%</td></tr><tr><td>0018</td><td>4Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0018.4Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^3)</td><td>O(n^2)</td><td>35.0%</td></tr><tr><td>0030</td><td>Substring with Concatenation of All Words</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0030.Substring-with-Concatenation-of-All-Words/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>26.3%</td></tr><tr><td>0036</td><td>Valid Sudoku</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0036.Valid-Sudoku/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>50.7%</td></tr><tr><td>0037</td><td>Sudoku Solver</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0037.Sudoku-Solver/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^2)</td><td>O(n^2)</td><td>46.8%</td></tr><tr><td>0049</td><td>Group Anagrams</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0049.Group-Anagrams/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>59.5%</td></tr><tr><td>0076</td><td>Minimum Window Substring</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0076.Minimum-Window-Substring/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>36.1%</td></tr><tr><td>0094</td><td>Binary Tree Inorder Traversal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0094.Binary-Tree-Inorder-Traversal/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>66.1%</td></tr><tr><td>0136</td><td>Single Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>66.6%</td></tr><tr><td>0138</td><td>Copy List with Random Pointer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>41.2%</td></tr><tr><td>0187</td><td>Repeated DNA Sequences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0187.Repeated-DNA-Sequences/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>41.6%</td></tr><tr><td>0202</td><td>Happy Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0202.Happy-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(1)</td><td>51.3%</td></tr><tr><td>0204</td><td>Count Primes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0204.Count-Primes/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>32.3%</td></tr><tr><td>0205</td><td>Isomorphic Strings</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0205.Isomorphic-Strings/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(log n)</td><td>O(n)</td><td>40.5%</td></tr><tr><td>0217</td><td>Contains Duplicate</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0217.Contains-Duplicate/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>56.7%</td></tr><tr><td>0219</td><td>Contains Duplicate II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0219.Contains-Duplicate-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>38.7%</td></tr><tr><td>0242</td><td>Valid Anagram</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0242.Valid-Anagram/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>58.7%</td></tr><tr><td>0274</td><td>H-Index</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0274.H-Index/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>36.4%</td></tr><tr><td>0290</td><td>Word Pattern</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0290.Word-Pattern/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>38.4%</td></tr><tr><td>0347</td><td>Top K Frequent Elements</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0347.Top-K-Frequent-Elements/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>62.5%</td></tr><tr><td>0349</td><td>Intersection of Two Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0349.Intersection-of-Two-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>65.0%</td></tr><tr><td>0350</td><td>Intersection of Two Arrays II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0350.Intersection-of-Two-Arrays-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>52.0%</td></tr><tr><td>0387</td><td>First Unique Character in a String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0387.First-Unique-Character-in-a-String/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>53.8%</td></tr><tr><td>0389</td><td>Find the Difference</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0389.Find-the-Difference/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>57.9%</td></tr><tr><td>0409</td><td>Longest Palindrome</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0409.Longest-Palindrome/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>52.2%</td></tr><tr><td>0438</td><td>Find All Anagrams in a String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0438.Find-All-Anagrams-in-a-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>45.1%</td></tr><tr><td>0447</td><td>Number of Boomerangs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0447.Number-of-Boomerangs/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>52.5%</td></tr><tr><td>0451</td><td>Sort Characters By Frequency</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0451.Sort-Characters-By-Frequency/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(1)</td><td>64.5%</td></tr><tr><td>0454</td><td>4Sum II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0454.4Sum-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>54.6%</td></tr><tr><td>0463</td><td>Island Perimeter</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0463.Island-Perimeter/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>66.7%</td></tr><tr><td>0500</td><td>Keyboard Row</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0500.Keyboard-Row/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>65.8%</td></tr><tr><td>0508</td><td>Most Frequent Subtree Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0508.Most-Frequent-Subtree-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>59.2%</td></tr><tr><td>0535</td><td>Encode and Decode TinyURL</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0535.Encode-and-Decode-TinyURL/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>82.3%</td></tr><tr><td>0575</td><td>Distribute Candies</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0575.Distribute-Candies/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>64.5%</td></tr><tr><td>0594</td><td>Longest Harmonious Subsequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0594.Longest-Harmonious-Subsequence/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>51.2%</td></tr><tr><td>0599</td><td>Minimum Index Sum of Two Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0599.Minimum-Index-Sum-of-Two-Lists/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>51.8%</td></tr><tr><td>0632</td><td>Smallest Range Covering Elements from K Lists</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0632.Smallest-Range-Covering-Elements-from-K-Lists/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>54.4%</td></tr><tr><td>0645</td><td>Set Mismatch</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0645.Set-Mismatch/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>41.6%</td></tr><tr><td>0648</td><td>Replace Words</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0648.Replace-Words/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>58.8%</td></tr><tr><td>0676</td><td>Implement Magic Dictionary</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0676.Implement-Magic-Dictionary/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>55.3%</td></tr><tr><td>0705</td><td>Design HashSet</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0705.Design-HashSet/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>64.6%</td></tr><tr><td>0706</td><td>Design HashMap</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0706.Design-HashMap/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>64.2%</td></tr><tr><td>0710</td><td>Random Pick with Blacklist</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0710.Random-Pick-with-Blacklist/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>32.9%</td></tr><tr><td>0718</td><td>Maximum Length of Repeated Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0718.Maximum-Length-of-Repeated-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>50.4%</td></tr><tr><td>0720</td><td>Longest Word in Dictionary</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0720.Longest-Word-in-Dictionary/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>49.3%</td></tr><tr><td>0726</td><td>Number of Atoms</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0726.Number-of-Atoms/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>51.0%</td></tr><tr><td>0739</td><td>Daily Temperatures</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0739.Daily-Temperatures/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>64.7%</td></tr><tr><td>0748</td><td>Shortest Completing Word</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0748.Shortest-Completing-Word/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>57.6%</td></tr><tr><td>0771</td><td>Jewels and Stones</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0771.Jewels-and-Stones/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>87.0%</td></tr><tr><td>0781</td><td>Rabbits in Forest</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0781.Rabbits-in-Forest/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.6%</td></tr><tr><td>0811</td><td>Subdomain Visit Count</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0811.Subdomain-Visit-Count/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>71.6%</td></tr><tr><td>0884</td><td>Uncommon Words from Two Sentences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0884.Uncommon-Words-from-Two-Sentences/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>64.2%</td></tr><tr><td>0895</td><td>Maximum Frequency Stack</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0895.Maximum-Frequency-Stack/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>63.2%</td></tr><tr><td>0930</td><td>Binary Subarrays With Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0930.Binary-Subarrays-With-Sum/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>44.7%</td></tr><tr><td>0953</td><td>Verifying an Alien Dictionary</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0953.Verifying-an-Alien-Dictionary/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>51.9%</td></tr><tr><td>0961</td><td>N-Repeated Element in Size 2N Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0961.N-Repeated-Element-in-Size-2N-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>74.6%</td></tr><tr><td>0966</td><td>Vowel Spellchecker</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0966.Vowel-Spellchecker/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>50.3%</td></tr><tr><td>0970</td><td>Powerful Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0970.Powerful-Integers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>40.0%</td></tr><tr><td>0981</td><td>Time Based Key-Value Store</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0981.Time-Based-Key-Value-Store/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>54.2%</td></tr><tr><td>0987</td><td>Vertical Order Traversal of a Binary Tree</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0987.Vertical-Order-Traversal-of-a-Binary-Tree/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>38.9%</td></tr><tr><td>0992</td><td>Subarrays with K Different Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0992.Subarrays-with-K-Different-Integers/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>50.8%</td></tr><tr><td>1002</td><td>Find Common Characters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1002.Find-Common-Characters/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>68.7%</td></tr><tr><td>1078</td><td>Occurrences After Bigram</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1078.Occurrences-After-Bigram/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>65.0%</td></tr><tr><td>1160</td><td>Find Words That Can Be Formed by Characters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1160.Find-Words-That-Can-Be-Formed-by-Characters/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>67.9%</td></tr><tr><td>1178</td><td>Number of Valid Words for Each Puzzle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1178.Number-of-Valid-Words-for-Each-Puzzle/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>39.5%</td></tr><tr><td>1189</td><td>Maximum Number of Balloons</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1189.Maximum-Number-of-Balloons/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>62.1%</td></tr><tr><td>1207</td><td>Unique Number of Occurrences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1207.Unique-Number-of-Occurrences/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>71.8%</td></tr><tr><td>1512</td><td>Number of Good Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1512.Number-of-Good-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>87.7%</td></tr><tr><td>1539</td><td>Kth Missing Positive Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1539.Kth-Missing-Positive-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>54.9%</td></tr><tr><td>1640</td><td>Check Array Formation Through Concatenation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1640.Check-Array-Formation-Through-Concatenation/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>59.8%</td></tr><tr><td>1679</td><td>Max Number of K-Sum Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1679.Max-Number-of-K-Sum-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>53.9%</td></tr><tr><td>1748</td><td>Sum of Unique Elements</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1748.Sum-of-Unique-Elements/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>75.1%</td></tr></tbody></table><h3 id="Sort-已全部做完"><a href="#Sort-已全部做完" class="headerlink" title="Sort (已全部做完)"></a>Sort (已全部做完)</h3><ul><li>深刻的理解多路快排。第 75 题。</li><li>链表的排序，插入排序(第 147 题)和归并排序(第 148 题)</li><li>桶排序和基数排序。第 164 题。</li><li>“摆动排序”。第 324 题。</li><li>两两不相邻的排序。第 767 题，第 1054 题。</li><li>“饼子排序”。第 969 题。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0056</td><td>Merge Intervals</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0056.Merge-Intervals/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>41.2%</td></tr><tr><td>0057</td><td>Insert Interval</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0057.Insert-Interval/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>35.2%</td></tr><tr><td>0075</td><td>Sort Colors</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0075.Sort-Colors/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>49.6%</td></tr><tr><td>0147</td><td>Insertion Sort List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(1)</td><td>44.5%</td></tr><tr><td>0148</td><td>Sort List</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0148.Sort-List/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>46.5%</td></tr><tr><td>0164</td><td>Maximum Gap</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0164.Maximum-Gap/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(log n)</td><td>37.0%</td></tr><tr><td>0179</td><td>Largest Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0179.Largest-Number/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>30.8%</td></tr><tr><td>0220</td><td>Contains Duplicate III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0220.Contains-Duplicate-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(1)</td><td>21.3%</td></tr><tr><td>0242</td><td>Valid Anagram</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0242.Valid-Anagram/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>58.7%</td></tr><tr><td>0274</td><td>H-Index</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0274.H-Index/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>36.4%</td></tr><tr><td>0315</td><td>Count of Smaller Numbers After Self</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0315.Count-of-Smaller-Numbers-After-Self/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>42.4%</td></tr><tr><td>0324</td><td>Wiggle Sort II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0324.Wiggle-Sort-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>30.8%</td></tr><tr><td>0327</td><td>Count of Range Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0327.Count-of-Range-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.1%</td></tr><tr><td>0349</td><td>Intersection of Two Arrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0349.Intersection-of-Two-Arrays/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>65.0%</td></tr><tr><td>0350</td><td>Intersection of Two Arrays II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0350.Intersection-of-Two-Arrays-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(n)</td><td>52.0%</td></tr><tr><td>0493</td><td>Reverse Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0493.Reverse-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>27.0%</td></tr><tr><td>0524</td><td>Longest Word in Dictionary through Deleting</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0524.Longest-Word-in-Dictionary-through-Deleting/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>50.1%</td></tr><tr><td>0710</td><td>Random Pick with Blacklist</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0710.Random-Pick-with-Blacklist/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>32.9%</td></tr><tr><td>0767</td><td>Reorganize String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0767.Reorganize-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>50.2%</td></tr><tr><td>0853</td><td>Car Fleet</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0853.Car-Fleet/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>44.2%</td></tr><tr><td>0922</td><td>Sort Array By Parity II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0922.Sort-Array-By-Parity-II/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>70.6%</td></tr><tr><td>0969</td><td>Pancake Sorting</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0969.Pancake-Sorting/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>68.7%</td></tr><tr><td>0973</td><td>K Closest Points to Origin</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0973.K-Closest-Points-to-Origin/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>64.6%</td></tr><tr><td>0976</td><td>Largest Perimeter Triangle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0976.Largest-Perimeter-Triangle/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n log n)</td><td>O(log n)</td><td>58.7%</td></tr><tr><td>1030</td><td>Matrix Cells in Distance Order</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1030.Matrix-Cells-in-Distance-Order/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n^2)</td><td>O(1)</td><td>67.2%</td></tr><tr><td>1054</td><td>Distant Barcodes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1054.Distant-Barcodes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(log n)</td><td>44.2%</td></tr><tr><td>1122</td><td>Relative Sort Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1122.Relative-Sort-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>68.1%</td></tr><tr><td>1235</td><td>Maximum Profit in Job Scheduling</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1235.Maximum-Profit-in-Job-Scheduling/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>47.5%</td></tr><tr><td>1305</td><td>All Elements in Two Binary Search Trees</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1305.All-Elements-in-Two-Binary-Search-Trees/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>77.8%</td></tr><tr><td>1329</td><td>Sort the Matrix Diagonally</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1329.Sort-the-Matrix-Diagonally/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>81.7%</td></tr><tr><td>1636</td><td>Sort Array by Increasing Frequency</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1636.Sort-Array-by-Increasing-Frequency/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>66.8%</td></tr><tr><td>1640</td><td>Check Array Formation Through Concatenation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1640.Check-Array-Formation-Through-Concatenation/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>59.8%</td></tr><tr><td>1647</td><td>Minimum Deletions to Make Character Frequencies Unique</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1647.Minimum-Deletions-to-Make-Character-Frequencies-Unique/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>54.8%</td></tr><tr><td>1648</td><td>Sell Diminishing-Valued Colored Balls</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1648.Sell-Diminishing-Valued-Colored-Balls/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>30.5%</td></tr><tr><td>1691</td><td>Maximum Height by Stacking Cuboids</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1691.Maximum-Height-by-Stacking-Cuboids/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>50.2%</td></tr><tr><td>1710</td><td>Maximum Units on a Truck</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1710.Maximum-Units-on-a-Truck/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>70.0%</td></tr></tbody></table><h3 id="Bit-Manipulation"><a href="#Bit-Manipulation" class="headerlink" title="Bit Manipulation"></a>Bit Manipulation</h3><ul><li>异或的特性。第 136 题，第 268 题，第 389 题，第 421 题，</li></ul><pre class="line-numbers language-go"><code class="language-go">x <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> xx <span class="token operator">^</span> <span class="token number">11111</span>……<span class="token number">1111</span> <span class="token operator">=</span> ~xx <span class="token operator">^</span> <span class="token punctuation">(</span>~x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11111</span>……<span class="token number">1111</span>x <span class="token operator">^</span> x <span class="token operator">=</span> <span class="token number">0</span>a <span class="token operator">^</span> b <span class="token operator">=</span> c  <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">^</span> c <span class="token operator">=</span> b  <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">^</span> c <span class="token operator">=</span> <span class="token function">a</span> <span class="token punctuation">(</span>交换律<span class="token punctuation">)</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c <span class="token operator">=</span> a <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b）<span class="token operator">^</span> <span class="token function">c</span> <span class="token punctuation">(</span>结合律<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构造特殊 Mask，将特殊位置放 0 或 1。</li></ul><pre class="line-numbers language-go"><code class="language-go">将 x 最右边的 n 位清零， x <span class="token operator">&amp;</span> <span class="token punctuation">(</span> ~<span class="token number">0</span> <span class="token operator">&lt;&lt;</span> n <span class="token punctuation">)</span>获取 x 的第 n 位值<span class="token punctuation">(</span><span class="token number">0</span> 或者 <span class="token number">1</span><span class="token punctuation">)</span>，<span class="token punctuation">(</span>x <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span>获取 x 的第 n 位的幂值，x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>仅将第 n 位置为 <span class="token number">1</span>，x <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span>仅将第 n 位置为 <span class="token number">0</span>，x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>~<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>将 x 最高位至第 n 位<span class="token punctuation">(</span>含<span class="token punctuation">)</span>清零，x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>将第 n 位至第 <span class="token number">0</span> 位<span class="token punctuation">(</span>含<span class="token punctuation">)</span>清零，x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>~<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>有特殊意义的 &amp; 位操作运算。第 260 题，第 201 题，第 318 题，第 371 题，第 397 题，第 461 题，第 693 题，</li></ul><pre class="line-numbers language-go"><code class="language-go">X <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> 判断是否是奇数<span class="token punctuation">(</span>偶数<span class="token punctuation">)</span>X <span class="token operator">&amp;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>X <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> 将最低位<span class="token punctuation">(</span>LSB<span class="token punctuation">)</span>的 <span class="token number">1</span> 清零X <span class="token operator">&amp;</span> <span class="token operator">-</span>X 得到最低位<span class="token punctuation">(</span>LSB<span class="token punctuation">)</span>的 <span class="token number">1</span>X <span class="token operator">&amp;</span> ~X <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0078</td><td>Subsets</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0078.Subsets/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>65.4%</td></tr><tr><td>0136</td><td>Single Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>66.6%</td></tr><tr><td>0137</td><td>Single Number II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0137.Single-Number-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>54.0%</td></tr><tr><td>0169</td><td>Majority Element</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0169.Majority-Element/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>60.2%</td></tr><tr><td>0187</td><td>Repeated DNA Sequences</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0187.Repeated-DNA-Sequences/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>41.6%</td></tr><tr><td>0190</td><td>Reverse Bits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0190.Reverse-Bits/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>42.4%</td></tr><tr><td>0191</td><td>Number of 1 Bits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0191.Number-of-1-Bits/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>54.1%</td></tr><tr><td>0201</td><td>Bitwise AND of Numbers Range</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0201.Bitwise-AND-of-Numbers-Range/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>39.7%</td></tr><tr><td>0231</td><td>Power of Two</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0231.Power-of-Two/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>43.8%</td></tr><tr><td>0260</td><td>Single Number III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0260.Single-Number-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>65.4%</td></tr><tr><td>0268</td><td>Missing Number</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0268.Missing-Number/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>55.1%</td></tr><tr><td>0318</td><td>Maximum Product of Word Lengths</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0318.Maximum-Product-of-Word-Lengths/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>52.4%</td></tr><tr><td>0338</td><td>Counting Bits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0338.Counting-Bits/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>70.5%</td></tr><tr><td>0342</td><td>Power of Four</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0342.Power-of-Four/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>41.8%</td></tr><tr><td>0371</td><td>Sum of Two Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0371.Sum-of-Two-Integers/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>50.6%</td></tr><tr><td>0389</td><td>Find the Difference</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0389.Find-the-Difference/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>57.9%</td></tr><tr><td>0393</td><td>UTF-8 Validation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0393.UTF-8-Validation/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>38.1%</td></tr><tr><td>0397</td><td>Integer Replacement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0397.Integer-Replacement/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>33.5%</td></tr><tr><td>0401</td><td>Binary Watch</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0401.Binary-Watch/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(1)</td><td>O(1)</td><td>48.5%</td></tr><tr><td>0405</td><td>Convert a Number to Hexadecimal</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0405.Convert-a-Number-to-Hexadecimal/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>44.5%</td></tr><tr><td>0421</td><td>Maximum XOR of Two Numbers in an Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0421.Maximum-XOR-of-Two-Numbers-in-an-Array/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>54.2%</td></tr><tr><td>0461</td><td>Hamming Distance</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0461.Hamming-Distance/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>73.2%</td></tr><tr><td>0476</td><td>Number Complement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0476.Number-Complement/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>65.1%</td></tr><tr><td>0477</td><td>Total Hamming Distance</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0477.Total-Hamming-Distance/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>50.6%</td></tr><tr><td>0693</td><td>Binary Number with Alternating Bits</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0693.Binary-Number-with-Alternating-Bits/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>59.9%</td></tr><tr><td>0756</td><td>Pyramid Transition Matrix</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0756.Pyramid-Transition-Matrix/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(n)</td><td>55.6%</td></tr><tr><td>0762</td><td>Prime Number of Set Bits in Binary Representation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0762.Prime-Number-of-Set-Bits-in-Binary-Representation/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td>O(n)</td><td>O(1)</td><td>64.4%</td></tr><tr><td>0784</td><td>Letter Case Permutation</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0784.Letter-Case-Permutation/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>68.6%</td></tr><tr><td>0898</td><td>Bitwise ORs of Subarrays</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0898.Bitwise-ORs-of-Subarrays/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>34.3%</td></tr><tr><td>1178</td><td>Number of Valid Words for Each Puzzle</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1178.Number-of-Valid-Words-for-Each-Puzzle/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>39.5%</td></tr><tr><td>1290</td><td>Convert Binary Number in a Linked List to Integer</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1290.Convert-Binary-Number-in-a-Linked-List-to-Integer/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>81.8%</td></tr><tr><td>1461</td><td>Check If a String Contains All Binary Codes of Size K</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1461.Check-If-a-String-Contains-All-Binary-Codes-of-Size-K/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>54.3%</td></tr><tr><td>1720</td><td>Decode XORed Array</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1700~1799/1720.Decode-XORed-Array/" target="_blank" rel="noopener">Go</a></td><td>Easy</td><td></td><td></td><td>85.2%</td></tr></tbody></table><h3 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h3><ul><li>灵活使用并查集的思想，熟练掌握并查集的 <a href="https://books.halfrost.com/leetcode/ChapterThree/UnionFind/" target="_blank" rel="noopener">模板</a>，模板中有两种并查集的实现方式，一种是路径压缩 + 秩优化的版本，另外一种是计算每个集合中元素的个数 + 最大集合元素个数的版本，这两种版本都有各自使用的地方。能使用第一类并查集模板的题目有：第 128 题，第 130 题，第 547 题，第 684 题，第 721 题，第 765 题，第 778 题，第 839 题，第 924 题，第 928 题，第 947 题，第 952 题，第 959 题，第 990 题。能使用第二类并查集模板的题目有：第 803 题，第 952 题。第 803 题秩优化和统计集合个数这些地方会卡时间，如果不优化，会 TLE。</li><li>并查集是一种思想，有些题需要灵活使用这种思想，而不是死套模板，如第 399 题，这一题是 stringUnionFind，利用并查集思想实现的。这里每个节点是基于字符串和 map 的，而不是单纯的用 int 节点编号实现的。</li><li>有些题死套模板反而做不出来，比如第 685 题，这一题不能路径压缩和秩优化，因为题目中涉及到有向图，需要知道节点的前驱节点，如果路径压缩了，这一题就没法做了。这一题不需要路径压缩和秩优化。</li><li>灵活的抽象题目给的信息，将给定的信息合理的编号，使用并查集解题，并用 map 降低时间复杂度，如第 721 题，第 959 题。</li><li>关于地图，砖块，网格的题目，可以新建一个特殊节点，将四周边缘的砖块或者网格都 union() 到这个特殊节点上。第 130 题，第 803 题。</li><li>能用并查集的题目，一般也可以用 DFS 和 BFS 解答，只不过时间复杂度会高一点。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0128</td><td>Longest Consecutive Sequence</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>46.4%</td></tr><tr><td>0130</td><td>Surrounded Regions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(m*n)</td><td>O(m*n)</td><td>29.6%</td></tr><tr><td>0200</td><td>Number of Islands</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0200.Number-of-Islands/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(m*n)</td><td>O(m*n)</td><td>49.3%</td></tr><tr><td>0399</td><td>Evaluate Division</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0399.Evaluate-Division/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>54.5%</td></tr><tr><td>0547</td><td>Number of Provinces</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0547.Number-of-Provinces/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n)</td><td>60.6%</td></tr><tr><td>0684</td><td>Redundant Connection</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0684.Redundant-Connection/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>59.0%</td></tr><tr><td>0685</td><td>Redundant Connection II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0685.Redundant-Connection-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>33.0%</td></tr><tr><td>0721</td><td>Accounts Merge</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0721.Accounts-Merge/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>52.1%</td></tr><tr><td>0765</td><td>Couples Holding Hands</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0765.Couples-Holding-Hands/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>55.5%</td></tr><tr><td>0778</td><td>Swim in Rising Water</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0778.Swim-in-Rising-Water/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^2)</td><td>O(n)</td><td>54.7%</td></tr><tr><td>0803</td><td>Bricks Falling When Hit</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0803.Bricks-Falling-When-Hit/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^2)</td><td>O(n)</td><td>31.5%</td></tr><tr><td>0839</td><td>Similar String Groups</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0839.Similar-String-Groups/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^2)</td><td>O(n)</td><td>41.2%</td></tr><tr><td>0924</td><td>Minimize Malware Spread</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0924.Minimize-Malware-Spread/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(m*n)</td><td>O(n)</td><td>41.9%</td></tr><tr><td>0928</td><td>Minimize Malware Spread II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0928.Minimize-Malware-Spread-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(m*n)</td><td>O(n)</td><td>41.5%</td></tr><tr><td>0947</td><td>Most Stones Removed with Same Row or Column</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0947.Most-Stones-Removed-with-Same-Row-or-Column/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>55.5%</td></tr><tr><td>0952</td><td>Largest Component Size by Common Factor</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0952.Largest-Component-Size-by-Common-Factor/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>36.2%</td></tr><tr><td>0959</td><td>Regions Cut By Slashes</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0959.Regions-Cut-By-Slashes/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n^2)</td><td>O(n^2)</td><td>67.2%</td></tr><tr><td>0990</td><td>Satisfiability of Equality Equations</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0990.Satisfiability-of-Equality-Equations/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(n)</td><td>46.9%</td></tr><tr><td>1202</td><td>Smallest String With Swaps</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1202.Smallest-String-With-Swaps/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>48.9%</td></tr><tr><td>1319</td><td>Number of Operations to Make Network Connected</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1300~1399/1319.Number-of-Operations-to-Make-Network-Connected/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>55.5%</td></tr><tr><td>1579</td><td>Remove Max Number of Edges to Keep Graph Fully Traversable</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1500~1599/1579.Remove-Max-Number-of-Edges-to-Keep-Graph-Fully-Traversable/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>46.2%</td></tr><tr><td>1631</td><td>Path With Minimum Effort</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1631.Path-With-Minimum-Effort/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>49.9%</td></tr></tbody></table><h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><ul><li>双指针滑动窗口的经典写法。右指针不断往右移，移动到不能往右移动为止(具体条件根据题目而定)。当右指针到最右边以后，开始挪动左指针，释放窗口左边界。第 3 题，第 76 题，第 209 题，第 424 题，第 438 题，第 567 题，第 713 题，第 763 题，第 845 题，第 881 题，第 904 题，第 978 题，第 992 题，第 1004 题，第 1040 题，第 1052 题。</li></ul><pre class="line-numbers language-c"><code class="language-c">    left<span class="token punctuation">,</span> right <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> left <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> right<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> freq<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            freq<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span>            right<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            freq<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span>            left<span class="token operator">++</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>滑动窗口经典题。第 239 题，第 480 题。</li></ul><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0003</td><td>Longest Substring Without Repeating Characters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0003.Longest-Substring-Without-Repeating-Characters/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>31.5%</td></tr><tr><td>0076</td><td>Minimum Window Substring</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0076.Minimum-Window-Substring/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>36.1%</td></tr><tr><td>0239</td><td>Sliding Window Maximum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0239.Sliding-Window-Maximum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n * k)</td><td>O(n)</td><td>44.7%</td></tr><tr><td>0395</td><td>Longest Substring with At Least K Repeating Characters</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0395.Longest-Substring-with-At-Least-K-Repeating-Characters/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>43.6%</td></tr><tr><td>0424</td><td>Longest Repeating Character Replacement</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0424.Longest-Repeating-Character-Replacement/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>48.3%</td></tr><tr><td>0480</td><td>Sliding Window Median</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0480.Sliding-Window-Median/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n * log k)</td><td>O(k)</td><td>38.8%</td></tr><tr><td>0567</td><td>Permutation in String</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0500~0599/0567.Permutation-in-String/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>44.6%</td></tr><tr><td>0978</td><td>Longest Turbulent Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0978.Longest-Turbulent-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>46.6%</td></tr><tr><td>0992</td><td>Subarrays with K Different Integers</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0992.Subarrays-with-K-Different-Integers/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(n)</td><td>50.8%</td></tr><tr><td>0995</td><td>Minimum Number of K Consecutive Bit Flips</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0900~0999/0995.Minimum-Number-of-K-Consecutive-Bit-Flips/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n)</td><td>O(1)</td><td>50.0%</td></tr><tr><td>1004</td><td>Max Consecutive Ones III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1004.Max-Consecutive-Ones-III/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n)</td><td>O(1)</td><td>60.9%</td></tr><tr><td>1040</td><td>Moving Stones Until Consecutive II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1040.Moving-Stones-Until-Consecutive-II/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(1)</td><td>54.1%</td></tr><tr><td>1052</td><td>Grumpy Bookstore Owner</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1052.Grumpy-Bookstore-Owner/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(n log n)</td><td>O(1)</td><td>55.8%</td></tr><tr><td>1074</td><td>Number of Submatrices That Sum to Target</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1000~1099/1074.Number-of-Submatrices-That-Sum-to-Target/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n^3)</td><td>O(n)</td><td>61.9%</td></tr><tr><td>1208</td><td>Get Equal Substrings Within Budget</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1200~1299/1208.Get-Equal-Substrings-Within-Budget/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>44.1%</td></tr><tr><td>1423</td><td>Maximum Points You Can Obtain from Cards</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1423.Maximum-Points-You-Can-Obtain-from-Cards/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>46.8%</td></tr><tr><td>1438</td><td>Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1400~1499/1438.Longest-Continuous-Subarray-With-Absolute-Diff-Less-Than-or-Equal-to-Limit/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>44.4%</td></tr><tr><td>1658</td><td>Minimum Operations to Reduce X to Zero</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1658.Minimum-Operations-to-Reduce-X-to-Zero/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>33.3%</td></tr></tbody></table><h3 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h3><ul><li>线段树的经典数组实现写法。将合并两个节点 pushUp 逻辑抽象出来了，可以实现任意操作(常见的操作有：加法，取 max，min 等等)。第 218 题，第 303 题，第 307 题，第 699 题。</li><li>计数线段树的经典写法。第 315 题，第 327 题，第 493 题。</li><li>线段树的树的实现写法。第 715 题，第 732 题。</li><li>区间懒惰更新。第 218 题，第 699 题。</li><li>离散化。离散化需要注意一个特殊情况：假如三个区间为 [1,10] [1,4] [6,10]，离散化后 x[1]=1,x[2]=4,x[3]=6,x[4]=10。第一个区间为 [1,4]，第二个区间为 [1,2]，第三个区间为 [3,4]，这样一来，区间一 = 区间二 + 区间三，这和离散前的模型不符，离散前，很明显，区间一 &gt; 区间二 + 区间三。正确的做法是：在相差大于 1 的数间加一个数，例如在上面 1 4 6 10 中间加 5，即可 x[1]=1,x[2]=4,x[3]=5,x[4]=6,x[5]=10。这样处理之后，区间一是 1-5 ，区间二是 1-2 ，区间三是 4-5 。</li><li>灵活构建线段树。线段树节点可以存储多条信息，合并两个节点的 pushUp 操作也可以是多样的。第 850 题，第 1157 题。</li></ul><p>线段树 <a href="https://blog.csdn.net/xuechelingxiao/article/details/38313105" target="_blank" rel="noopener">题型</a>从简单到困难:</p><ol><li>单点更新:<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" target="_blank" rel="noopener">HDU 1166 敌兵布阵</a> update:单点增减 query:区间求和<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754" target="_blank" rel="noopener">HDU 1754 I Hate It</a> update:单点替换 query:区间最值<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1394" target="_blank" rel="noopener">HDU 1394 Minimum Inversion Number</a> update:单点增减 query:区间求和<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2795" target="_blank" rel="noopener">HDU 2795 Billboard</a> query:区间求最大值的位子(直接把update的操作在query里做了)</li><li>区间更新:<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698" target="_blank" rel="noopener">HDU 1698 Just a Hook</a> update:成段替换 (由于只query一次总区间,所以可以直接输出 1 结点的信息)<br><a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">POJ 3468 A Simple Problem with Integers</a> update:成段增减 query:区间求和<br><a href="http://poj.org/problem?id=2528" target="_blank" rel="noopener">POJ 2528 Mayor’s posters</a> 离散化 + update:成段替换 query:简单hash<br><a href="http://poj.org/problem?id=3225" target="_blank" rel="noopener">POJ 3225 Help with Intervals</a> update:成段替换,区间异或 query:简单hash</li><li>区间合并(这类题目会询问区间中满足条件的连续最长区间,所以PushUp的时候需要对左右儿子的区间进行合并):<br><a href="http://poj.org/problem?id=3667" target="_blank" rel="noopener">POJ 3667 Hotel</a> update:区间替换 query:询问满足条件的最左端点</li><li>扫描线(这类题目需要将一些操作排序,然后从左到右用一根扫描线扫过去最典型的就是矩形面积并,周长并等题):<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542" target="_blank" rel="noopener">HDU 1542 Atlantis</a> update:区间增减 query:直接取根节点的值<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1828" target="_blank" rel="noopener">HDU 1828 Picture</a> update:区间增减 query:直接取根节点的值</li></ol><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0218</td><td>The Skyline Problem</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0218.The-Skyline-Problem/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>36.5%</td></tr><tr><td>0307</td><td>Range Sum Query - Mutable</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0307.Range-Sum-Query-Mutable/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td>O(1)</td><td>O(n)</td><td>36.8%</td></tr><tr><td>0315</td><td>Count of Smaller Numbers After Self</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0315.Count-of-Smaller-Numbers-After-Self/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>42.4%</td></tr><tr><td>0327</td><td>Count of Range Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0327.Count-of-Range-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>36.1%</td></tr><tr><td>0493</td><td>Reverse Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0493.Reverse-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>27.0%</td></tr><tr><td>0699</td><td>Falling Squares</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0600~0699/0699.Falling-Squares/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>42.7%</td></tr><tr><td>0715</td><td>Range Module</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0715.Range-Module/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(log n)</td><td>O(n)</td><td>40.4%</td></tr><tr><td>0732</td><td>My Calendar III</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0700~0799/0732.My-Calendar-III/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(log n)</td><td>O(n)</td><td>62.1%</td></tr><tr><td>0850</td><td>Rectangle Area II</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0800~0899/0850.Rectangle-Area-II/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(n log n)</td><td>O(n)</td><td>48.4%</td></tr><tr><td>1157</td><td>Online Majority Element In Subarray</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1100~1199/1157.Online-Majority-Element-In-Subarray/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td>O(log n)</td><td>O(n)</td><td>39.8%</td></tr><tr><td>1649</td><td>Create Sorted Array through Instructions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1649.Create-Sorted-Array-through-Instructions/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.4%</td></tr></tbody></table><h3 id="Binary-Indexed-Tree"><a href="#Binary-Indexed-Tree" class="headerlink" title="Binary Indexed Tree"></a>Binary Indexed Tree</h3><table><thead><tr><th>No.</th><th>Title</th><th>Solution</th><th>Difficulty</th><th>Time</th><th>Space</th><th>Acceptance</th></tr></thead><tbody><tr><td>0218</td><td>The Skyline Problem</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0200~0299/0218.The-Skyline-Problem/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.5%</td></tr><tr><td>0307</td><td>Range Sum Query - Mutable</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0307.Range-Sum-Query-Mutable/" target="_blank" rel="noopener">Go</a></td><td>Medium</td><td></td><td></td><td>36.8%</td></tr><tr><td>0315</td><td>Count of Smaller Numbers After Self</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0315.Count-of-Smaller-Numbers-After-Self/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>42.4%</td></tr><tr><td>0327</td><td>Count of Range Sum</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0300~0399/0327.Count-of-Range-Sum/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.1%</td></tr><tr><td>0493</td><td>Reverse Pairs</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/0400~0499/0493.Reverse-Pairs/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>27.0%</td></tr><tr><td>1649</td><td>Create Sorted Array through Instructions</td><td><a href="https://books.halfrost.com/leetcode/ChapterFour/1600~1699/1649.Create-Sorted-Array-through-Instructions/" target="_blank" rel="noopener">Go</a></td><td>Hard</td><td></td><td></td><td>36.4%</td></tr></tbody></table><h2 id="3、大公司算法题"><a href="#3、大公司算法题" class="headerlink" title="3、大公司算法题"></a>3、大公司算法题</h2><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="noopener">Plus One</a></td><td><a href="./Math/PlusOne.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener">Number of Islands</a></td><td><a href="./DFS/NumberofIslands.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/summary-ranges/" target="_blank" rel="noopener">Summary Ranges</a></td><td><a href="./Array/SummaryRanges.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/perfect-squares/" target="_blank" rel="noopener">Perfect Squares</a></td><td><a href="./DP/PerfectSquares.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">Merge Intervals</a></td><td><a href="./Sort/MergeIntervals.Go">Go</a></td><td>Hard</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">Valid Parentheses</a></td><td><a href="./Stack/ValidParentheses.Go">Go</a></td><td>Easy</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">Trapping Rain Water</a></td><td><a href="./Math/TrappingRainWater.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">Merge k Sorted Lists</a></td><td><a href="./LinkedList/MergeKSortedLists.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener">Longest Consecutive Sequence</a></td><td><a href="./Array/LongestConsecutiveSequence.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/find-peak-element/" target="_blank" rel="noopener">Find Peak Element</a></td><td><a href="./Search/FindPeakElement.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="noopener">Power of Two</a></td><td><a href="./Math/PowerTwo.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/spiral-matrix/" target="_blank" rel="noopener">Spiral Matrix</a></td><td><a href="./Array/SpiralMatrix.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">Sliding Window Maximum </a></td><td><a href="./Array/SlidingWindowMaximum.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="noopener">Pow(x, n)</a></td><td><a href="./Math/Pow.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">Letter Combinations of a Phone Number</a></td><td><a href="./DFS/LetterCombinationsPhoneNumber.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/heaters/" target="_blank" rel="noopener">Heaters</a></td><td><a href="./Array/Heaters.Go">Go</a></td><td>Easy</td><td>★</td></tr></tbody></table><h3 id="Facebook"><a href="#Facebook" class="headerlink" title="Facebook"></a>Facebook</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="noopener">3Sum</a></td><td><a href="./Array/ThreeSum.Go">Go</a></td><td>Medium</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="noopener">Valid Palindrome</a></td><td><a href="./String/ValidPalindrome.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/valid-palindrome-ii/" target="_blank" rel="noopener">Valid Palindrome II</a></td><td><a href="./String/ValidPalindromeII.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/move-zeroes/" target="_blank" rel="noopener">Move Zeroes</a></td><td><a href="./Array/MoveZeroes.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/remove-invalid-parentheses/" target="_blank" rel="noopener">Remove Invalid Parentheses</a></td><td><a href="./DFS/RemoveInvalidParentheses.Go">Go</a></td><td>Hard</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/add-binary/" target="_blank" rel="noopener">Add Binary</a></td><td><a href="./Math/AddBinary.Go">Go</a></td><td>Easy</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></td><td><a href="./Array/TwoSum.Go">Go</a></td><td>Easy</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/binary-tree-paths/" target="_blank" rel="noopener">Bnary Tree Paths</a></td><td><a href="./Tree/BnaryTreePaths.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">Letter Combinations of a Phone Number</a></td><td><a href="./DFS/LetterCombinationsPhoneNumber.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">Merge k Sorted Lists</a></td><td><a href="./LinkedList/MergeKSortedLists.Go">Go</a></td><td>Hard</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">Reverse Linked List</a></td><td><a href="./LinkedList/ReverseLinkedList.Go">Go</a></td><td>Easy</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">Merge Intervals</a></td><td><a href="./Sort/MergeIntervals.Go">Go</a></td><td>Hard</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener">Number of Islands</a></td><td><a href="./DFS/NumberofIslands.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">Reverse Linked List</a></td><td><a href="./LinkedList/ReverseLinkedList.Go">Go</a></td><td>Easy</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/expression-add-operators/" target="_blank" rel="noopener">Expression Add Operators</a></td><td><a href="./DFS/ExpressionAddOperators.Go">Go</a></td><td>Hard</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener">Subsets</a></td><td><a href="./DFS/Subsets.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="noopener">Sort Colors</a></td><td><a href="./Sort/SortColors.Go">Go</a></td><td>Medium</td><td>★★</td></tr></tbody></table><h3 id="Snapchat"><a href="#Snapchat" class="headerlink" title="Snapchat"></a>Snapchat</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/game-of-life/" target="_blank" rel="noopener">Game of Life</a></td><td><a href="./Array/GameLife.Go">Go</a></td><td>Medium</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/meeting-rooms-ii/" target="_blank" rel="noopener">Meeting Rooms II</a></td><td><a href="./Sort/MeetingRoomsII.Go">Go</a></td><td>Medium</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/valid-sudoku/" target="_blank" rel="noopener">Valid Sudoku</a></td><td><a href="./Array/ValidSudoku.Go">Go</a></td><td>Easy</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/binary-tree-vertical-order-traversal/" target="_blank" rel="noopener">Binary Tree Vertical Order Traversal</a></td><td><a href="./Tree/BinaryTreeVerticalOrderTraversal.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/alien-dictionary/" target="_blank" rel="noopener">Alien Dictionary</a></td><td><a href="./Sort/AlienDictionary.Go">Go</a></td><td>Hard</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/one-edit-distance/" target="_blank" rel="noopener">One Edit Distance</a></td><td><a href="./String/OneEditDistance.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener">Sudoku Solver</a></td><td><a href="./Math/SudokuSolver.Go">Go</a></td><td>Hard</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">Reverse Linked List</a></td><td><a href="./LinkedList/ReverseLinkedList.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">Unique Binary Search Trees</a></td><td><a href="./Tree/UniqueBinarySearchTrees.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/minimum-window-substring/" target="_blank" rel="noopener">Minimum Window Substring</a></td><td><a href="./Array/MinimumWindowSubstring.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/remove-k-digits/" target="_blank" rel="noopener">Remove K Digits</a></td><td><a href="./Stack/RemoveKDigits.Go">Go</a></td><td>Medium</td><td>★</td></tr><tr><td><a href="https://leetcode.com/problems/ternary-expression-parser/" target="_blank" rel="noopener">Ternary Expression Parser</a></td><td><a href="./Stack/TernaryExpressionParser.Go">Go</a></td><td>Medium</td><td>★</td></tr></tbody></table><h3 id="Uber"><a href="#Uber" class="headerlink" title="Uber"></a>Uber</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/valid-sudoku/" target="_blank" rel="noopener">Valid Sudoku</a></td><td><a href="./Array/ValidSudoku.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/spiral-matrix/" target="_blank" rel="noopener">Spiral Matrix</a></td><td><a href="./Array/SpiralMatrix.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">Letter Combinations of a Phone Number</a></td><td><a href="./DFS/LetterCombinationsPhoneNumber.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/anagrams/" target="_blank" rel="noopener">Group Anagrams</a></td><td><a href="./String/GroupAnagrams.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/word-pattern/" target="_blank" rel="noopener">Word Pattern</a></td><td><a href="./String/WordPattern.Go">Go</a></td><td>Easy</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">Roman to Integer</a></td><td><a href="./Math/RomanToInteger.Go">Go</a></td><td>Easy</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener">Combination Sum</a></td><td><a href="./DFS/CombinationSum.Go">Go</a></td><td>Medium</td><td>★★</td></tr></tbody></table><h3 id="Airbnb"><a href="#Airbnb" class="headerlink" title="Airbnb"></a>Airbnb</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></td><td><a href="./Array/TwoSum.Go">Go</a></td><td>Easy</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/text-justification/" target="_blank" rel="noopener">Text Justification</a></td><td><a href="./String/TextJustification.Go">Go</a></td><td>Hard</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">House Robber</a></td><td><a href="./DP/HouseRobber.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">Single Number</a></td><td><a href="./Math/SingleNumber.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/word-search-ii/" target="_blank" rel="noopener">Word Search II</a></td><td><a href="./DFS/WordSearchII.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></td><td><a href="./Math/AddTwoNumbers.Go">Go</a></td><td>Medium</td><td>★★</td></tr></tbody></table><h3 id="LinkedIn"><a href="#LinkedIn" class="headerlink" title="LinkedIn"></a>LinkedIn</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">Maximum Subarray</a></td><td><a href="./DP/MaximumSubarray.Go">Go</a></td><td>Medium</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="noopener">Pow(x, n)</a></td><td><a href="./Math/Pow.Go">Go</a></td><td>Medium</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">Merge Intervals</a></td><td><a href="./Sort/MergeIntervals.Go">Go</a></td><td>Hard</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="noopener">Isomorphic Strings</a></td><td><a href="./String/IsomorphicStrings.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">Search in Rotated Sorted Array</a></td><td><a href="./Search/SearchInRotatedSortedArray.Go">Go</a></td><td>Hard</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/search-for-a-range/" target="_blank" rel="noopener">Search for a Range</a></td><td><a href="./Search/SearchForARange.Go">Go</a></td><td>Medium</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></td><td><a href="./Array/TwoSum.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">Binary Tree Level Order Traversal</a></td><td><a href="./Tree/BinaryTreeLevelOrderTraversal.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">Evaluate Reverse Polish Notation</a></td><td><a href="./Stack/EvaluateReversePolishNotation.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">Maximum Product Subarray</a></td><td><a href="./DP/MaximumProductSubarray.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">Product of Array Except Self</a></td><td><a href="./Array/ProductExceptSelf.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="noopener">Symmetric Tree</a></td><td><a href="./Tree/SymmetricTree.Go">Go</a></td><td>Easy</td><td>★★</td></tr></tbody></table><h3 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></td><td><a href="./Array/TwoSum.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener">Min Cost Climbing Stairs</a></td><td><a href="./DP/MinCostClimbingStairs.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener">Number of Islands</a></td><td><a href="./DFS/NumberofIslands.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></td><td><a href="./Math/AddTwoNumbers.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">Reverse Linked List</a></td><td><a href="./LinkedList/ReverseLinkedList.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">Valid Parentheses</a></td><td><a href="./Stack/ValidParentheses.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">Longest Palindromic Substring</a></td><td><a href="./DP/LongestPalindromicSubstring.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">Trapping Rain Water</a></td><td><a href="./Math/TrappingRainWater.Go">Go</a></td><td>Hard</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">Longest Substring Without Repeating Characters</a></td><td><a href="./String/LongestSubstringWithoutRepeatingCharacters.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">Letter Combinations of a Phone Number</a></td><td><a href="./DFS/LetterCombinationsPhoneNumber.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="noopener">Valid Anagram</a></td><td><a href="./String/ValidAnagram.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/rotate-image/" target="_blank" rel="noopener">Rotate Image</a></td><td><a href="./Array/RotateImage.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">Best Time to Buy and Sell Stock</a></td><td><a href="./DP/BestTimeBuySellStock.Go">Go</a></td><td>Easy</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="noopener">3Sum</a></td><td><a href="./Array/ThreeSum.Go">Go</a></td><td>Medium</td><td>★★</td></tr><tr><td><a href="https://leetcode.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">Sliding Window Maximum </a></td><td><a href="./Array/SlidingWindowMaximum.Go">Go</a></td><td>Hard</td><td>★★</td></tr></tbody></table><h3 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a>Microsoft</h3><table><thead><tr><th>Title</th><th>Solution</th><th>Difficulty</th><th>Frequency</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">Reverse Linked List</a></td><td><a href="./LinkedList/ReverseLinkedList.Go">Go</a></td><td>Easy</td><td>★★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></td><td><a href="./Array/TwoSum.Go">Go</a></td><td>Easy</td><td>★★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">String to Integer (atoi)</a></td><td><a href="./Math/Atoi.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></td><td><a href="./Math/AddTwoNumbers.Go">Go</a></td><td>Medium</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">Excel Sheet Column Number</a></td><td><a href="./Math/ExcelSheetColumnNumber.Go">Go</a></td><td>Easy</td><td>★★★★</td></tr><tr><td><a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">Validate Binary Search Tree</a></td><td><a href="./Tree/ValidateBinarySearchTree.Go">Go</a></td><td>Medium</td><td>★★★</td></tr><tr><td><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">Merge Two Sorted Lists</a></td><td><a href="./LinkedList/MergeTwoSortedLists.Go">Go</a></td><td>Easy</td><td>★★★</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2020/03/10/geek-time-data-structures-and-algorithms-all/"/>
      <url>/2020/03/10/geek-time-data-structures-and-algorithms-all/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-02/" title="数组">数组</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li><li><a href="/2020/03/11/geek-time-data-structures-and-algorithms-01/" title="复杂度分析">复杂度分析</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络分层的真实含义是什么？</title>
      <link href="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/"/>
      <url>/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/</url>
      
        <content type="html"><![CDATA[<h2 id="1、想成为技术牛人？先搞定网络协议！"><a href="#1、想成为技术牛人？先搞定网络协议！" class="headerlink" title="1、想成为技术牛人？先搞定网络协议！"></a>1、想成为技术牛人？先搞定网络协议！</h2><h3 id="1-1-为什么网络协议这么重要？"><a href="#1-1-为什么网络协议这么重要？" class="headerlink" title="1.1 为什么网络协议这么重要？"></a>1.1 为什么网络协议这么重要？</h3><p>你好，我是刘超，网易研究院云计算技术部的首席架构师。我主要负责两部分工作，对内支撑网易核心业务上云，对外帮助客户搞定容器化与微服务化架构。</p><p>为什么网络协议这么重要呢？为什么“计算机组成与系统结构”“数据结构与算法”“操作系统”“计算机网络”“编译原理”，会成为大学计算机的核心课程呢？至少看起来，这些内容没有“多少天搞定MFC、Structs”这样的内容更容易帮你找到工作。我毕业的时候，也感到很困惑。</p><p>不过当时我抱着一个理想，也可能是大多数程序员的理想：我要做技术牛人，我要搞定大系统。</p><p>工作 15 年，我在 EMC 做过类似 GFS 的分布式存储开发，做过基于 Lucene 的搜索引擎，做过Hadoop 的运维；在 HP 和华为做过 OpenStack 的开发、实施和解决方案；还创业倒腾过 Mesos 容器平台，后来在网易做 Kubernetes。</p><p>随着见过的世面越来越多，我渐渐发现，无论是对于大规模系统的架构，还是对于程序员的个人职业生涯，<strong>网络和网络协议都是绕不过去的坎儿</strong>。</p><p>集群规模一大，我们首先想到的就是网络互通的问题；应用吞吐量压不上去，我们首先想到的也是网络互通的问题。不客气地讲，很多情况下，只要搞定了网络，一个大型系统也就搞定了一半。所以，<strong>要成为技术牛人，搞定大系统，一定要过网络这一关，而网络协议在网络中占有举足轻重的地位</strong>。</p><p>相信大部分人都思考过“技术变化太快，容易过时”的问题。毕竟，技术浪潮一浪接一浪，新技术层出不穷。从搜索引擎、大数据、云计算，到人工智能、区块链，简直就是“你方唱罢我登场”。这里面究竟有没有最本质的东西，使得你掌握了它，就能在新技术的滚滚浪潮中，保持快速学习的能力？</p><p><strong>通过对大量开源技术的代码进行分析，我发现很多技术看起来轰轰烈烈，扒下外衣，本质的东西其实就是基础知识和核心概念。</strong>想要不被滚滚而来的新技术淘汰，就要掌握这些可以长久使用的知识，而网络协议就是值得你学习，而且是到 40 岁之后依然有价值的知识。</p><p>但是，要想真正学习和掌握网络协议，也并非易事。下面这些场景，你是不是也感同身受呢？</p><ul><li>网络协议知识点太多，学完记不住。我们都学过计算机网络课程，学的时候感觉并不难。尤其这门课没有公式，更像是文科。学了一大堆，也背了一大堆，应付完考试之后，最终都“还给老师”了。</li><li>看上去懂了，但是经不住问。没关系，网上有很多的文章嘛。于是，你会搜索很多文章去看。看的时候，你感觉别人说的很有道理，好像理解了，但是经不住问，一问就发现，你只是了解了大概的流程，很多细节还是不知道。所以说，从能看懂到能给别人讲明白，中间还有很长一段距离。</li><li>知识学会了，实际应用依旧不会。细节都摸索得差不多了，但是当你自己去应用和调试的时候，发现还是没有思路。比如，当创建出来的虚拟机不能上网的时候，该怎么办呢？学过的东西，怎么还是不会用？</li></ul><p>我把这样的网络协议学习过程总结为：<strong>一看觉得懂，一问就打鼓，一用就糊涂</strong>。</p><h3 id="1-2网络协议究竟该怎么学？"><a href="#1-2网络协议究竟该怎么学？" class="headerlink" title="1.2网络协议究竟该怎么学？"></a>1.2网络协议究竟该怎么学？</h3><p>基于这个问题，我决定从以下三个角度和你分享我所理解的网络协议。</p><ul><li>第一，我会从身边经常见到的事情出发，用故事来讲解各种网络协议，然后慢慢扩展到不熟悉的领域。例如，每个人都会查看 IP 地址，那我们就从这个命令开始，展开一些概念；很多人都在大学宿舍组过简单的网络来打游戏，我就从宿舍里最简单的网络概念开始讲；然后说到办公室，说到日常上网、购物、视频下载等过程涉及的协议；最后说到最陌生的数据中心。</li><li>第二，我会用贴近场景的方式来讲解网络协议，将各个层次的关系串起来，而非孤立地讲解某个概念。常见的计算机网络课程往往会按照网络分层，一层一层地讲，却很少讲层与层之间的关系。例如，我们学习路由协议的时候，在真实场景中，这么多的算法和二层是什么关系呢？和四层又是什么关系呢？例如，在真实的网络通信中，我们访问一个网站，做一个支付，在 TCP 进行三次握手的时候，IP 层在干嘛？MAC 层又在干嘛？这些你是不是都清楚？</li><li>第三，我会在讲解完各个层次的网络协议之后，着重剖析如何在当下热门领域使用这些协议，比如云计算、容器和微服务。</li></ul><p><strong>一方面你可以知道网络协议真实应用的地方，另一方面你也可以通过上手使用云计算、容器、微服务来进一步加深对于协议的理解。</strong></p><p>千里之行，始于足下。不管何时，我相信，<strong>扎实的功底和过硬的技术，都会是你职业发展的助力器。</strong></p><p>希望这个专栏，不仅可以帮你理清繁杂的网络协议概念，<strong>帮你构建一个精准的网络协议知识框架，帮你在热门领域应用这些底层知识，更重要的是给你一种学习知识的方法和态度：看似最枯燥、最基础的东西往往具有最长久的生命力。</strong></p><h2 id="2、为什么要学习网络协议？"><a href="#2、为什么要学习网络协议？" class="headerlink" title="2、为什么要学习网络协议？"></a>2、为什么要学习网络协议？</h2><p>《圣经》中有一个通天塔的故事，大致是说，上帝为了阻止人类联合起来，就让人类说不同的语言。人类没法儿沟通，达不成“协议”，通天塔的计划就失败了。</p><p>但是千年以后，有一种叫“程序猿”的物种，敲着一种这个群体通用的语言，连接着全世界所有的人，打造这互联网世界的通天塔。如今的世界，正是因为互联网，才连接在一起。</p><p>当 “Hello World!” 从显示器打印出来的时候，还记得你激动的心情吗？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你是程序员，一定看得懂上面这一段文字。这是每一个程序员向计算机世界说“你好，世界”的方式。但是，你不一定知道，这段文字也是一种协议，是人类和计算机沟通的协议，只有通过这种协议，计算机才知道我们想让它做什么。</p><h3 id="2-1-协议的三要素"><a href="#2-1-协议的三要素" class="headerlink" title="2.1 协议的三要素"></a>2.1 协议的三要素</h3><p>当然，这种协议还是更接近人类语言，机器不能直接读懂，需要进行翻译，翻译的工作交给了编译器，也就是我们常说的编译(compile)。这个过程比较复杂，其中的编译原理非常复杂。</p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406100556506.png" alt="image-20210406100556506"></p><p>可以看得出，计算机语言作为程序员控制一台计算机工作的协议，具备了协议的三要素。</p><ul><li>语法：就是这一段内容要符合一定的规则和格式。例如，括号要成对，结束要使用分号等。</li><li>语义：就是这一段内容要代表某种意义。例如数字减去数字是有意义的，数字减去文本一般来说就没有意义。</li><li>顺序：就是先干啥后干啥。例如，可以先加上某个数值，然后再减去某个数值。</li></ul><p>会了计算机语言，你就能够教给一台计算机完成你的工作了。但是，<strong>要想打造互联网世界的通天塔，只教给一台机器做什么是不够的，你需要学会教给一大片机器做什么。这就需要网络协议。只有通过网络协议，才能使一大片机器互相协作、共同完成一件事。</strong></p><h3 id="2-2-网络协议长啥样？"><a href="#2-2-网络协议长啥样？" class="headerlink" title="2.2 网络协议长啥样？"></a>2.2 网络协议长啥样？</h3><p>先拿一个简单的例子，让你尝尝鲜，然后再讲一个大事。</p><p>当你想要买一个商品，常规的做法就是打开浏览器，输入购物网站的地址。浏览器就会给你显示一个缤纷多彩的页面。</p><p>那你有没有深入思考过，浏览器是如何做到这件事情的？它之所以能够显示缤纷多彩的页面，是因为它收到了一段来自 HTTP 协议的“东西”。我拿网易考拉来举例，格式就像下面这样：</p><pre class="line-numbers language-html"><code class="language-html">HTTP/1.1 200 OKDate: Tue, 27 Mar 2018 16:50:26 GMTContent-Type: text/html;charset=UTF-8Content-Language: zh-CN<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://pages.kaola.com/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span> 网易考拉 3 周年主会场 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这符合协议的三要素吗？我们来看一下。</p><p>首先，符合语法，也就是说只有按照上面那个格式来，浏览器才认。例如，上来是状态，然后是首部，然后是内容。</p><p>其次，符合语义，也就是要按照约定的意思来。例如，状态200表示网页成功返回。如果不成功就是404。</p><p>最后，符合顺序，你一点浏览器就是发送一个HTTP请求，然后才有上面那一串HTTP返回的东西。</p><p>浏览器显然按照协议商定好的做了，最后一个五彩缤纷的页面就出现在你面前了。</p><h3 id="2-3-常用的网络协议有哪些？"><a href="#2-3-常用的网络协议有哪些？" class="headerlink" title="2.3 常用的网络协议有哪些？"></a>2.3 常用的网络协议有哪些？</h3><p>接下来揭秘我要说的大事情，“双十一”。这和我们要讲的网络协议有什么关系呢？</p><p>在经济学领域，有个伦纳德·里德（Leonard E. Read）创作的《铅笔的故事》。这个故事通过一个铅笔的诞生过程，来讲述复杂的经济学理论。这里，我也用一个下单的过程，看看互联网世界的运行过程中，都使用了哪些网络协议。</p><p>你先在浏览器里面输入 <a href="https://www.kaola.com" target="_blank" rel="noopener">https://www.kaola.com</a> ，这是一个URL。浏览器只知道名字是“<a href="http://www.kaola.com”，但是不知道具体的地点，所以不知道应该如何访问。" target="_blank" rel="noopener">www.kaola.com”，但是不知道具体的地点，所以不知道应该如何访问。</a></p><p>于是，浏览器打开地址簿去查找，可以使用一般的地址簿协议DNS去查找，还可以使用另外一种更加精准的地址簿查找协议HTTPDNS。无论使用哪一种方法查找，最终都会得到这个地址：106.114.138.24。这个是IP地址，是互联网世界的“门牌号”。</p><p>知道了目标地址，浏览器就开始打包它的请求。对于普通的浏览请求，往往会使用HTTP协议；但是对于购物的请求，往往需要进行加密传输，因而会使用HTTPS协议。无论是什么协议，里面都会写明“你要买什么和买多少”。 </p><p>DNS、HTTP、HTTPS所在的层我们称为应用层。经过应用层封装后，浏览器会将应用层的包交给下一层去完成，通过socket编程来实现。</p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406110608230.png" alt="image-20210406110608230"></p><p>下一层是传输层。传输层有两种协议。一种是无连接的协议UDP，一种是面向连接的协议TCP。对于支付来讲，往往使用TCP协议。所谓的面向连接就是TCP会保证这个包能够到达目的地。如果不能到达，就会重新发送直到到达。</p><p>TCP协议里面会有两个端口。一个是浏览器监听的端口，一个是电商的服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给那个进程。</p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406111315201.png" alt="image-20210406111315201"></p><p>传输层封装完毕后，浏览器会将包交给操作系统的网络层。网络层的协议是IP协议。在IP协议里面会有源IP地址(即浏览器所在机器的IP地址)和目标IP地址(即电商网站所在服务器的 IP 地址)。</p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406111802669.png" alt="image-20210406111802669"></p><p>操作系统既然知道了目标 IP 地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这个目标 IP 地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然电商网站不在本地，而在遥远的地方。</p><p>操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海关，去外地就要去网关。而操作系统启动的时候，就会被DHCP协议配置IP地址以及默认的网关的IP地址192.168.1.1。</p><p>操作系统如何将 IP 地址发给网关呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是 192.168.1.1啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是MAC地址，而大吼的那一声是ARP协议。</p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406112444610.png" alt="image-20210406112444610"></p><p>于是操作系统将 IP 包交给了下一层，也就是MAC 层。网卡再将包发出去。由于这个包里面是有 MAC地址的，因而它能够到达网关。网关收到包之后，会根据自己的知识，判断下一步应该怎么走。网关往往是一个路由器，到某个 IP 地址应该怎么走，这个叫作路由表。</p><p>路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个局域网，在每个国家内部，都可以使用本地的地址 MAC 进行通信。一旦跨越城关，就需要拿出 IP 头来，里面写着贫僧来自东土大唐（就是源 IP 地址），欲往西天拜佛求经（指的是目标 IP 地址）。路过宝地，借宿一晚，明日启行，请问接下来该怎么走啊？</p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406112722772.png" alt="image-20210406112722772"></p><p>城关往往是知道这些“知识”的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为路由协议，常用的有OSPF和BGP。 </p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406112805428.png" alt="image-20210406112805428"></p><p>城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的MAC地址，通过下一个城关的MAC地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标 IP 啊？目标服务器就会回复一个 MAC 地址。网络包过关后，通过这个 MAC 地址就能找到目标服务器。</p><p>目标服务器发现 MAC 地址对上了，取下 MAC 头来，发送给操作系统的网络层。发现 IP 也对上了，就取下 IP 头。IP 头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即TCP 层。</p><p>在这一层里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次下单请求的结果，例如购物是否成功，扣了多少钱等，而仅仅是 TCP 层的一个说明，即收到之后的回复。当然这个回复，会按照刚刚一样的方式走回去，报个平安。因为一旦出了国门，西行路上千难万险，如果在这个过程中，网络包走丢了，例如进了大沙漠，或者被强盗抢劫杀害怎么办呢？因而到了要报个平安。</p><p>如果过一段时间还是没到，发送端的 TCP 层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。这个重试绝非你的浏览器重新将下单这个动作重新请求一次。对于浏览器来讲，就发送了一次下单请求，TCP 层不断自己闷头重试。除非 TCP 这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送下单请求。</p><p>当网络包平安到达 TCP 层之后，TCP 头中有目标端口号，通过这个端口号，可以找到电商网站的进程正在监听这个端口号，假设一个 Tomcat，将这个包发给电商网站。 </p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406135031161.png" alt="image-20210406135031161"></p><p>电商网站的进程得到 HTTP 请求的内容，知道了要买东西，买多少。往往一个电商网站最初接待请求的这个 Tomcat 只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告诉专门管理订单的进程，登记要买某个商品，买多少，要告诉管理库存的进程，库存要减少多少，要告诉支付的进程，应该付多少钱，等等。</p><p>如和告诉相关的进程呢？往往通过 RPC 调用，即远程过程调用的方式来实现。远程过程调用就是当告诉管理订单进程的时候，接待员不用关心中间的网络互连问题，会由 RPC 框架统一处理。RPC 框架有很多种，有基于 HTTP 协议放在 HTTP 的报文里面的，有直接封装在 TCP 报文里面的。</p><p>当接待员发现相应的部门都处理完毕，就回复一个 HTTPS 的包，告知下单成功。这个 HTTPS 的包，会像来的时候一样，经过千难万险到达你的个人电脑，最终进入浏览器，显示支付成功。</p><p>看到了吧，一个简简单单的下单过程，中间牵扯到这么多的协议。而管理一大片机器，更是一件特别有技术含量的事情。除此之外，像最近比较火的云计算、容器、微服务等技术，也都需要借助各种协议，来达成大规模机器之间的合作。</p><p>我在这里列一下之后要讲的网络协议，之后我会按照从底层到上层的顺序来讲述。 </p><p><img src="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/image-20210406135401619.png" alt="image-20210406135401619"></p><p>上面的“双十一”故事只是为了给你一个大致的框架，这里面有些协议，我在故事里已经提到了，有些还没有提到。在这门课的最后一章，当所有的协议都讲过之后，我会再重新讲一遍这个故事，到时候你就能明白更多的细节。</p><h2 id="3、思考问题？"><a href="#3、思考问题？" class="headerlink" title="3、思考问题？"></a>3、思考问题？</h2><p>1、当网络包到达一个城关的时候，可以通过路由表得到下一个城关的 IP 地址，直接通过 IP 地址找就可以了，为什么还要通过本地的 MAC 地址呢？</p><p>答案：</p><p>在网络包里，有源IP地址和目标IP地址、源MAC地址和目标MAC地址。从路由表中取得下一跳的IP地址后，应该把这个地址放在哪里呢？如果放在目标IP地址里面，到了城关，谁知道最终的目标在哪里呢？所有要用MAC地址。</p><p>所谓的下一跳，看起来是IP地址，其实是要通过ARP协议得到MAC地址，将下一跳的MAC地址放在目标MAC地址里面。</p><p>2、MAC地址可以修改吗？如果MAC地址是全球唯一的，那么是不是这些网卡厂商都要维护自己的MAC列表，从而保证和其他厂商绝对不重复，有分配MAC地址的机构吗？MAC地址唯一是不是指局域网内MAC地址唯一？</p><p>答案：</p><p>我查了一下，MAC（Media Access Control，介质访问控制）地址，也叫硬件地址，长度是 48 比特（6 字节），由 16 进制的数字组成，分为前 24 位和后 24 位。</p><p>前 24 位叫作<strong>组织唯一标志符</strong>（Organizationally Unique Identifier，OUI），是由 IEEE 的注册管理机构给不同厂家分配的代码，用于区分不同的厂家。后 24 位是厂家自己分配的，称为<strong>扩展标识符</strong>。同一个厂家生产的网卡中 MAC 地址后 24 位是不同的。</p><p>也就是说，MAC 本来设计为唯一性的，但是后来设备越来越多，而且还有虚拟化的设备和网卡，有很多工具可以修改，就很难保证不冲突了。但是至少应该保持一个局域网内是唯一的。</p><p>MAC 的设计，使得即便不能保证绝对唯一，但是能保证一个局域网内出现冲突的概率很小。这样，一台机器启动的时候，就能够在没有 IP 地址的情况下，先用 MAC 地址进行通信，获得 IP 地址。</p><p>好在 MAC 地址是工作在一个局域网中的，因而即便出现了冲突，网络工程师也能够在自己的范围内很快定位并解决这个问题。这就像我们生成 UUID 或者哈希值，大部分情况下是不会冲突的，但是如果碰巧出现冲突了，采取一定的机制解决冲突就好。</p><p>3、TCP 重试有没有可能导致重复下单？</p><p>答案：</p><p>答案是不会的。这个在TCP那一节有详细的讲解。因为 TCP 层收到了重复包之后，TCP 层自己会进行去重，发给应用层、HTTP 层。还是一个唯一的下单请求，所以不会重复下单。</p><p>那什么时候会导致重复下单呢？因为网络原因或者服务端错误，导致 TCP 连接断了，这样会重新发送应用层的请求，也即 HTTP 的请求会重新发送一遍。</p><p>如果服务端设计的是无状态的，它记不住上一次已经发送了一次请求。如果处理不好，就会导致重复下单，这就需要服务端除了实现无状态，还需要根据传过来的订单号实现幂等，同一个订单只处理一次。</p><p>还会有的现象是请求被黑客拦截，发送多次，这在 HTTPS 层可以有很多种机制，例如通过 Timestamp 和 Nonce 随机数联合起来，然后做一个不可逆的签名来保证。</p><p>4、TCP 报平安的包是原路返回吗？</p><p>答案：</p><p>这里的比喻不够严谨，容易让读者产生误会，这里的原路返回的意思是原样返回，也就是返回也是这个过程，不一定是完全一样的路径。</p><p>5、IP 地址和 MAC 地址的关系？</p><p>答案：</p><ol><li>局域网内通过dhpc配置IP地址是动态分配的，假如我是192.168.1.100，如果我下线了，可能IP就分配给了另一台电脑。IP和设备并不总是对应的，这对通信就产生了问题。但是MAC地址不同，MAC地址和设备是一一对应且全球唯一的。所以局域网使用MAC地址通信没有问题。</li><li>历史遗留问题：早期的以太网只有交换机，没有路由器，以太网内通过MAC地址通信，后来才有了互联网，为了兼容原本的模式，采用了IP+MAC地址通信的方式。为啥不推倒重来呢？看看IPv6的处境就知道了。所以是现有MAC地址后有的IP，IP的提出主要还是因为MAC地址本身的缺陷，这个问题换成有了MAC为何还要IP地址也是很有意思。</li><li>第一：MAC地址本身的缺陷：因为MAC地址是硬件厂商写在网卡中的，MAC地址虽然唯一但是不能表明用户在整个互联网中的位置，除非维护一个超级大的MAC地址对应表，但是那样的话寻址效率肯定爆炸。但是IP地址解决了这个问题，因为IP地址是网络提供商给你的，所以你在哪里整个网络都是知道的。第二：安全问题：获取MAC地址是通过ARP协议来完成的，如果只用MAC地址通信，那么广播风暴是个难题。</li><li>我觉得如果哪天每个人笃定一个IPv6地址，那么MAC地址+IPv4的模式是不是可以被替换了？</li></ol><p>芒果同学的理解非常准确，讲IP 和 MAC 的关系的时候说了这个问题。IP 是有远程定位功能的，MAC 是没有远程定位功能的，只能通过本地 ARP 的方式找到。</p><p>我个人认为，即便有了 IPv6，也不会改变当前的网络分层模式，还是 IP 层解决远程定位问题，只不过改成 IPv6 了，到了本地，还是通过 MAC。</p><p>6、如果最后一跳的时候，IP 改变了怎么办？我的理解是当到达了目标机器所在的网关时，网关会使用ARP协议发送广播来得到目标机器的MAC地址。但是如果在这之前目标机器的IP就已经改变了，那么会怎么处理？</p><p>答案：</p><p>对于 IP 层来讲，当包到达最后一跳的时候，原来的 IP 不存在了。比如网线拔掉了，或者服务器直接宕机了，则 ARP 就找不到了，所以这个包就会发送失败了。对于 IP 层的工作就结束了。</p><p>但是 IP 层之上还有 TCP 层，TCP 会重试的，包还是会重新发送，但是如果服务器没有启动起来，超过一定的次数，最终放弃。</p><p>如果服务器重启了，IP 还是原来的 IP 地址，这个时候 TCP 重新发送的一个包的时候，ARP 是能够得到这个地址的，因而会发到这台机器上来，但是机器上面没有启动服务端监听那个端口，于是会发送 ICMP 端口不可达。</p><p>如果服务器重启了，服务端也重新启动了，也在监听那个端口了，这个时候 TCP 的服务端由于是新的，Sequence Number 根本对不上，说明不是原来的连接，会发送 RST。</p><p>那有没有可能有特殊的场景 Sequence Number 也能对的上呢？按照 Sequence Number 的生成算法，是不可能的。</p><p>但是有一个非常特殊的方式，就是虚拟机的热迁移，从一台物理机迁移到另外一台物理机，IP 不变，MAC 不变，内存也拷贝过去，Sequence Number 在内存里面也保持住了，在迁移的过程中会丢失一两个包，但是从 TCP 来看，最终还是能够连接成功的。</p><p>7、TCP 层报平安，怎么确认浏览器收到呢？</p><p>TCP 报平安，只能保证 TCP 层能够收到，不保证浏览器能够收到。但是可以想象，如果浏览器是你写的一个程序，你也是通过 socket 编程写的，你是通过 socket，建立一个 TCP 的连接，然后从这个连接里面读取数据，读取的数据就是 TCP 层确认收到的。</p><p>这个读取的动作是本地系统调用，大部分情况下不会失败的。如果读取失败呢，当然本地会报错，你的 socket 读取函数会返回错误，如果你是浏览器程序的实现者，你有两种选择，一个是将错误报告给用户，另一个是重新发送一次请求，获取结果显示给用户。</p><p>8、有的文章说ARP是网络层协议，这里介绍是数据链路层协议，所以ARP 协议属于哪一层？</p><p>ARP 属于哪个层，一直是有争议的。比如《TCP/IP 详解》把它放在了二层和三层之间，但是既然是协议，只要大家都遵守相同的格式、流程就可以了，在实际应用的时候，不会有歧义的，唯一有歧义的是参加各种考试，让你做选择题，ARP 属于哪一层？平时工作中咱不用纠结这个。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 趣谈网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣谈网络协议目录</title>
      <link href="/2020/03/08/geek-time-interesting-talk-about-network-protocols-all/"/>
      <url>/2020/03/08/geek-time-interesting-talk-about-network-protocols-all/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="第一模块-通信协议综述"><a href="#第一模块-通信协议综述" class="headerlink" title="第一模块 通信协议综述"></a>第一模块 通信协议综述</h3><ol><li><a href="/2020/03/10/geek-time-interesting-talk-about-network-protocols-01/" title="网络分层的真实含义是什么？">网络分层的真实含义是什么？</a></li><li><a href="/2020/03/11/geek-time-interesting-talk-about-network-protocols-02/" title="网络分层的真实含义是什么？">网络分层的真实含义是什么？</a></li><li><a href="/2020/03/12/geek-time-interesting-talk-about-network-protocols-03/" title="如何查看ip地址？">如何查看ip地址？</a></li><li><a href="/2020/03/13/geek-time-interesting-talk-about-network-protocols-04/" title="DHCP与PXE：IP是怎么来的，又是怎么没的？">DHCP与PXE：IP是怎么来的，又是怎么没的？</a></li></ol><h3 id="第二模块-底层网络知识详解：从二层到三层"><a href="#第二模块-底层网络知识详解：从二层到三层" class="headerlink" title="第二模块 底层网络知识详解：从二层到三层"></a>第二模块 底层网络知识详解：从二层到三层</h3><ol><li><a href="/2020/03/14/geek-time-interesting-talk-about-network-protocols-05/" title="从物理层到MAC层：如何在宿舍里自己组网玩联机游戏？">从物理层到MAC层：如何在宿舍里自己组网玩联机游戏？</a></li><li><a href="/2020/03/15/geek-time-interesting-talk-about-network-protocols-06/" title="交换机与VLAN：办公室太复杂，我要回学校">交换机与VLAN：办公室太复杂，我要回学校</a></li><li><a href="/2020/03/15/geek-time-interesting-talk-about-network-protocols-07/" title="ICMP与ping：投石问路的侦察兵">ICMP与ping：投石问路的侦察兵</a></li></ol><h3 id="第二模块-底层网络知识详解：最重要的传输层"><a href="#第二模块-底层网络知识详解：最重要的传输层" class="headerlink" title="第二模块 底层网络知识详解：最重要的传输层"></a>第二模块 底层网络知识详解：最重要的传输层</h3><ol><li></li></ol><h3 id="第二模块-底层网络知识详解：最常用的应用层"><a href="#第二模块-底层网络知识详解：最常用的应用层" class="headerlink" title="第二模块 底层网络知识详解：最常用的应用层"></a>第二模块 底层网络知识详解：最常用的应用层</h3><ol><li></li></ol><h3 id="第二模块-底层网络知识详解：陌生的数据中心"><a href="#第二模块-底层网络知识详解：陌生的数据中心" class="headerlink" title="第二模块 底层网络知识详解：陌生的数据中心"></a>第二模块 底层网络知识详解：陌生的数据中心</h3><ol><li></li></ol><h3 id="第三模块-热门技术中的应用：云计算中的网络"><a href="#第三模块-热门技术中的应用：云计算中的网络" class="headerlink" title="第三模块 热门技术中的应用：云计算中的网络"></a>第三模块 热门技术中的应用：云计算中的网络</h3><ol><li></li></ol><h3 id="第三模块-热门技术中的应用：容器技术中的网络"><a href="#第三模块-热门技术中的应用：容器技术中的网络" class="headerlink" title="第三模块 热门技术中的应用：容器技术中的网络"></a>第三模块 热门技术中的应用：容器技术中的网络</h3><ol><li></li></ol><h3 id="第三模块-热门技术中的应用：微服务相关协议"><a href="#第三模块-热门技术中的应用：微服务相关协议" class="headerlink" title="第三模块 热门技术中的应用：微服务相关协议"></a>第三模块 热门技术中的应用：微服务相关协议</h3><ol><li></li></ol><h3 id="第四模块-网络协议知识串讲"><a href="#第四模块-网络协议知识串讲" class="headerlink" title="第四模块 网络协议知识串讲"></a>第四模块 网络协议知识串讲</h3><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章目录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
